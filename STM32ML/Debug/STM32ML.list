
STM32ML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08008a20  08008a20  00018a20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fb8  08008fb8  0002052c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc0  08008fc0  0002052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000052c  20000000  08008fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  2000052c  080094f4  0002052c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20000cfc  080094f4  00020cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4c4  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1d  00000000  00000000  0003da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00041440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00042b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a878  00000000  00000000  00044078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a587  00000000  00000000  0006e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff269  00000000  00000000  00088e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001880e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a58  00000000  00000000  001881b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  0018ec08  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  0018ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000052c 	.word	0x2000052c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089fc 	.word	0x080089fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000530 	.word	0x20000530
 80001cc:	080089fc 	.word	0x080089fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 bacc 	b.w	8000820 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f83a 	bl	8000308 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__aeabi_f2lz>:
 80002a0:	ee07 0a90 	vmov	s15, r0
 80002a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_f2lz+0x12>
 80002ae:	f000 b80b 	b.w	80002c8 <__aeabi_f2ulz>
 80002b2:	eef1 7a67 	vneg.f32	s15, s15
 80002b6:	b508      	push	{r3, lr}
 80002b8:	ee17 0a90 	vmov	r0, s15
 80002bc:	f000 f804 	bl	80002c8 <__aeabi_f2ulz>
 80002c0:	4240      	negs	r0, r0
 80002c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c6:	bd08      	pop	{r3, pc}

080002c8 <__aeabi_f2ulz>:
 80002c8:	b5d0      	push	{r4, r6, r7, lr}
 80002ca:	f000 fc0f 	bl	8000aec <__aeabi_f2d>
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <__aeabi_f2ulz+0x38>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	4606      	mov	r6, r0
 80002d4:	460f      	mov	r7, r1
 80002d6:	f000 f979 	bl	80005cc <__aeabi_dmul>
 80002da:	f000 fc5f 	bl	8000b9c <__aeabi_d2uiz>
 80002de:	4604      	mov	r4, r0
 80002e0:	f000 fbe2 	bl	8000aa8 <__aeabi_ui2d>
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <__aeabi_f2ulz+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f000 f970 	bl	80005cc <__aeabi_dmul>
 80002ec:	4602      	mov	r2, r0
 80002ee:	460b      	mov	r3, r1
 80002f0:	4630      	mov	r0, r6
 80002f2:	4639      	mov	r1, r7
 80002f4:	f000 fa9a 	bl	800082c <__aeabi_dsub>
 80002f8:	f000 fc50 	bl	8000b9c <__aeabi_d2uiz>
 80002fc:	4621      	mov	r1, r4
 80002fe:	bdd0      	pop	{r4, r6, r7, pc}
 8000300:	3df00000 	.word	0x3df00000
 8000304:	41f00000 	.word	0x41f00000

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_idiv0>:
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__aeabi_drsub>:
 8000824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000828:	e002      	b.n	8000830 <__adddf3>
 800082a:	bf00      	nop

0800082c <__aeabi_dsub>:
 800082c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000830 <__adddf3>:
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000836:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800083a:	ea94 0f05 	teq	r4, r5
 800083e:	bf08      	it	eq
 8000840:	ea90 0f02 	teqeq	r0, r2
 8000844:	bf1f      	itttt	ne
 8000846:	ea54 0c00 	orrsne.w	ip, r4, r0
 800084a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800084e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000856:	f000 80e2 	beq.w	8000a1e <__adddf3+0x1ee>
 800085a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800085e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000862:	bfb8      	it	lt
 8000864:	426d      	neglt	r5, r5
 8000866:	dd0c      	ble.n	8000882 <__adddf3+0x52>
 8000868:	442c      	add	r4, r5
 800086a:	ea80 0202 	eor.w	r2, r0, r2
 800086e:	ea81 0303 	eor.w	r3, r1, r3
 8000872:	ea82 0000 	eor.w	r0, r2, r0
 8000876:	ea83 0101 	eor.w	r1, r3, r1
 800087a:	ea80 0202 	eor.w	r2, r0, r2
 800087e:	ea81 0303 	eor.w	r3, r1, r3
 8000882:	2d36      	cmp	r5, #54	; 0x36
 8000884:	bf88      	it	hi
 8000886:	bd30      	pophi	{r4, r5, pc}
 8000888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000898:	d002      	beq.n	80008a0 <__adddf3+0x70>
 800089a:	4240      	negs	r0, r0
 800089c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008ac:	d002      	beq.n	80008b4 <__adddf3+0x84>
 80008ae:	4252      	negs	r2, r2
 80008b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008b4:	ea94 0f05 	teq	r4, r5
 80008b8:	f000 80a7 	beq.w	8000a0a <__adddf3+0x1da>
 80008bc:	f1a4 0401 	sub.w	r4, r4, #1
 80008c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80008c4:	db0d      	blt.n	80008e2 <__adddf3+0xb2>
 80008c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008ca:	fa22 f205 	lsr.w	r2, r2, r5
 80008ce:	1880      	adds	r0, r0, r2
 80008d0:	f141 0100 	adc.w	r1, r1, #0
 80008d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80008d8:	1880      	adds	r0, r0, r2
 80008da:	fa43 f305 	asr.w	r3, r3, r5
 80008de:	4159      	adcs	r1, r3
 80008e0:	e00e      	b.n	8000900 <__adddf3+0xd0>
 80008e2:	f1a5 0520 	sub.w	r5, r5, #32
 80008e6:	f10e 0e20 	add.w	lr, lr, #32
 80008ea:	2a01      	cmp	r2, #1
 80008ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008f0:	bf28      	it	cs
 80008f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008f6:	fa43 f305 	asr.w	r3, r3, r5
 80008fa:	18c0      	adds	r0, r0, r3
 80008fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000904:	d507      	bpl.n	8000916 <__adddf3+0xe6>
 8000906:	f04f 0e00 	mov.w	lr, #0
 800090a:	f1dc 0c00 	rsbs	ip, ip, #0
 800090e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000912:	eb6e 0101 	sbc.w	r1, lr, r1
 8000916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800091a:	d31b      	bcc.n	8000954 <__adddf3+0x124>
 800091c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000920:	d30c      	bcc.n	800093c <__adddf3+0x10c>
 8000922:	0849      	lsrs	r1, r1, #1
 8000924:	ea5f 0030 	movs.w	r0, r0, rrx
 8000928:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800092c:	f104 0401 	add.w	r4, r4, #1
 8000930:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000938:	f080 809a 	bcs.w	8000a70 <__adddf3+0x240>
 800093c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000940:	bf08      	it	eq
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	ea41 0105 	orr.w	r1, r1, r5
 8000952:	bd30      	pop	{r4, r5, pc}
 8000954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000958:	4140      	adcs	r0, r0
 800095a:	eb41 0101 	adc.w	r1, r1, r1
 800095e:	3c01      	subs	r4, #1
 8000960:	bf28      	it	cs
 8000962:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000966:	d2e9      	bcs.n	800093c <__adddf3+0x10c>
 8000968:	f091 0f00 	teq	r1, #0
 800096c:	bf04      	itt	eq
 800096e:	4601      	moveq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	fab1 f381 	clz	r3, r1
 8000976:	bf08      	it	eq
 8000978:	3320      	addeq	r3, #32
 800097a:	f1a3 030b 	sub.w	r3, r3, #11
 800097e:	f1b3 0220 	subs.w	r2, r3, #32
 8000982:	da0c      	bge.n	800099e <__adddf3+0x16e>
 8000984:	320c      	adds	r2, #12
 8000986:	dd08      	ble.n	800099a <__adddf3+0x16a>
 8000988:	f102 0c14 	add.w	ip, r2, #20
 800098c:	f1c2 020c 	rsb	r2, r2, #12
 8000990:	fa01 f00c 	lsl.w	r0, r1, ip
 8000994:	fa21 f102 	lsr.w	r1, r1, r2
 8000998:	e00c      	b.n	80009b4 <__adddf3+0x184>
 800099a:	f102 0214 	add.w	r2, r2, #20
 800099e:	bfd8      	it	le
 80009a0:	f1c2 0c20 	rsble	ip, r2, #32
 80009a4:	fa01 f102 	lsl.w	r1, r1, r2
 80009a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009ac:	bfdc      	itt	le
 80009ae:	ea41 010c 	orrle.w	r1, r1, ip
 80009b2:	4090      	lslle	r0, r2
 80009b4:	1ae4      	subs	r4, r4, r3
 80009b6:	bfa2      	ittt	ge
 80009b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80009bc:	4329      	orrge	r1, r5
 80009be:	bd30      	popge	{r4, r5, pc}
 80009c0:	ea6f 0404 	mvn.w	r4, r4
 80009c4:	3c1f      	subs	r4, #31
 80009c6:	da1c      	bge.n	8000a02 <__adddf3+0x1d2>
 80009c8:	340c      	adds	r4, #12
 80009ca:	dc0e      	bgt.n	80009ea <__adddf3+0x1ba>
 80009cc:	f104 0414 	add.w	r4, r4, #20
 80009d0:	f1c4 0220 	rsb	r2, r4, #32
 80009d4:	fa20 f004 	lsr.w	r0, r0, r4
 80009d8:	fa01 f302 	lsl.w	r3, r1, r2
 80009dc:	ea40 0003 	orr.w	r0, r0, r3
 80009e0:	fa21 f304 	lsr.w	r3, r1, r4
 80009e4:	ea45 0103 	orr.w	r1, r5, r3
 80009e8:	bd30      	pop	{r4, r5, pc}
 80009ea:	f1c4 040c 	rsb	r4, r4, #12
 80009ee:	f1c4 0220 	rsb	r2, r4, #32
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	fa01 f304 	lsl.w	r3, r1, r4
 80009fa:	ea40 0003 	orr.w	r0, r0, r3
 80009fe:	4629      	mov	r1, r5
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	fa21 f004 	lsr.w	r0, r1, r4
 8000a06:	4629      	mov	r1, r5
 8000a08:	bd30      	pop	{r4, r5, pc}
 8000a0a:	f094 0f00 	teq	r4, #0
 8000a0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a12:	bf06      	itte	eq
 8000a14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a18:	3401      	addeq	r4, #1
 8000a1a:	3d01      	subne	r5, #1
 8000a1c:	e74e      	b.n	80008bc <__adddf3+0x8c>
 8000a1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a22:	bf18      	it	ne
 8000a24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a28:	d029      	beq.n	8000a7e <__adddf3+0x24e>
 8000a2a:	ea94 0f05 	teq	r4, r5
 8000a2e:	bf08      	it	eq
 8000a30:	ea90 0f02 	teqeq	r0, r2
 8000a34:	d005      	beq.n	8000a42 <__adddf3+0x212>
 8000a36:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a3a:	bf04      	itt	eq
 8000a3c:	4619      	moveq	r1, r3
 8000a3e:	4610      	moveq	r0, r2
 8000a40:	bd30      	pop	{r4, r5, pc}
 8000a42:	ea91 0f03 	teq	r1, r3
 8000a46:	bf1e      	ittt	ne
 8000a48:	2100      	movne	r1, #0
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	bd30      	popne	{r4, r5, pc}
 8000a4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a52:	d105      	bne.n	8000a60 <__adddf3+0x230>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	4149      	adcs	r1, r1
 8000a58:	bf28      	it	cs
 8000a5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a5e:	bd30      	pop	{r4, r5, pc}
 8000a60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a64:	bf3c      	itt	cc
 8000a66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a6a:	bd30      	popcc	{r4, r5, pc}
 8000a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a82:	bf1a      	itte	ne
 8000a84:	4619      	movne	r1, r3
 8000a86:	4610      	movne	r0, r2
 8000a88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a8c:	bf1c      	itt	ne
 8000a8e:	460b      	movne	r3, r1
 8000a90:	4602      	movne	r2, r0
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	bf06      	itte	eq
 8000a98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a9c:	ea91 0f03 	teqeq	r1, r3
 8000aa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000aa4:	bd30      	pop	{r4, r5, pc}
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_ui2d>:
 8000aa8:	f090 0f00 	teq	r0, #0
 8000aac:	bf04      	itt	eq
 8000aae:	2100      	moveq	r1, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	b530      	push	{r4, r5, lr}
 8000ab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000abc:	f04f 0500 	mov.w	r5, #0
 8000ac0:	f04f 0100 	mov.w	r1, #0
 8000ac4:	e750      	b.n	8000968 <__adddf3+0x138>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_i2d>:
 8000ac8:	f090 0f00 	teq	r0, #0
 8000acc:	bf04      	itt	eq
 8000ace:	2100      	moveq	r1, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	b530      	push	{r4, r5, lr}
 8000ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000adc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000ae0:	bf48      	it	mi
 8000ae2:	4240      	negmi	r0, r0
 8000ae4:	f04f 0100 	mov.w	r1, #0
 8000ae8:	e73e      	b.n	8000968 <__adddf3+0x138>
 8000aea:	bf00      	nop

08000aec <__aeabi_f2d>:
 8000aec:	0042      	lsls	r2, r0, #1
 8000aee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000af2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000afa:	bf1f      	itttt	ne
 8000afc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000b04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b08:	4770      	bxne	lr
 8000b0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000b0e:	bf08      	it	eq
 8000b10:	4770      	bxeq	lr
 8000b12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000b16:	bf04      	itt	eq
 8000b18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000b1c:	4770      	bxeq	lr
 8000b1e:	b530      	push	{r4, r5, lr}
 8000b20:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b2c:	e71c      	b.n	8000968 <__adddf3+0x138>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_ul2d>:
 8000b30:	ea50 0201 	orrs.w	r2, r0, r1
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	b530      	push	{r4, r5, lr}
 8000b3a:	f04f 0500 	mov.w	r5, #0
 8000b3e:	e00a      	b.n	8000b56 <__aeabi_l2d+0x16>

08000b40 <__aeabi_l2d>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	b530      	push	{r4, r5, lr}
 8000b4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b4e:	d502      	bpl.n	8000b56 <__aeabi_l2d+0x16>
 8000b50:	4240      	negs	r0, r0
 8000b52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b56:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b62:	f43f aed8 	beq.w	8000916 <__adddf3+0xe6>
 8000b66:	f04f 0203 	mov.w	r2, #3
 8000b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b6e:	bf18      	it	ne
 8000b70:	3203      	addne	r2, #3
 8000b72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b76:	bf18      	it	ne
 8000b78:	3203      	addne	r2, #3
 8000b7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b7e:	f1c2 0320 	rsb	r3, r2, #32
 8000b82:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b8e:	ea40 000e 	orr.w	r0, r0, lr
 8000b92:	fa21 f102 	lsr.w	r1, r1, r2
 8000b96:	4414      	add	r4, r2
 8000b98:	e6bd      	b.n	8000916 <__adddf3+0xe6>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <_write>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1,  (uint8_t *)ptr, len, 0xFFFFFF);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <_write+0x28>)
 8000bf4:	f003 fc59 	bl	80044aa <HAL_UART_Transmit>

    return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000c20 	.word	0x20000c20

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 ff6f 	bl	8001aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f818 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 fa02 	bl	800101c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000c18:	f000 f898 	bl	8000d4c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000c1c:	f000 f8ce 	bl	8000dbc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000c20:	f000 f90a 	bl	8000e38 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000c24:	f000 f92e 	bl	8000e84 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000c28:	f000 f96a 	bl	8000f00 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c2c:	f000 f998 	bl	8000f60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c30:	f000 f9c6 	bl	8000fc0 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8000c34:	f000 f868 	bl	8000d08 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000c38:	f004 fc38 	bl	80054ac <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000c3c:	f004 fc48 	bl	80054d0 <MX_X_CUBE_AI_Process>
 8000c40:	e7fc      	b.n	8000c3c <main+0x34>
	...

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b096      	sub	sp, #88	; 0x58
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2244      	movs	r2, #68	; 0x44
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f006 fed6 	bl	8007a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c6a:	f001 ff53 	bl	8002b14 <HAL_PWREx_ControlVoltageScaling>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c74:	f000 fb82 	bl	800137c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c78:	f001 ff2e 	bl	8002ad8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <SystemClock_Config+0xc0>)
 8000c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <SystemClock_Config+0xc0>)
 8000c84:	f023 0318 	bic.w	r3, r3, #24
 8000c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c9c:	2360      	movs	r3, #96	; 0x60
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cac:	2328      	movs	r3, #40	; 0x28
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 f849 	bl	8002d58 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 fb56 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fc1b 	bl	8003524 <HAL_RCC_ClockConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cf4:	f000 fb42 	bl	800137c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cf8:	f003 f904 	bl	8003f04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cfc:	bf00      	nop
 8000cfe:	3758      	adds	r7, #88	; 0x58
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000

08000d08 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <MX_CRC_Init+0x40>)
 8000d10:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_CRC_Init+0x3c>)
 8000d32:	f001 f887 	bl	8001e44 <HAL_CRC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d3c:	f000 fb1e 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000b4c 	.word	0x20000b4c
 8000d48:	40023000 	.word	0x40023000

08000d4c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <MX_DFSDM1_Init+0x6c>)
 8000d54:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_DFSDM1_Init+0x68>)
 8000da2:	f001 f939 	bl	8002018 <HAL_DFSDM_ChannelInit>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000dac:	f000 fae6 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000688 	.word	0x20000688
 8000db8:	40016020 	.word	0x40016020

08000dbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <MX_I2C2_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000dc8:	f640 6214 	movw	r2, #3604	; 0xe14
 8000dcc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000dfa:	f001 fbfe 	bl	80025fa <HAL_I2C_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e04:	f000 faba 	bl	800137c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000e0c:	f001 fc84 	bl	8002718 <HAL_I2CEx_ConfigAnalogFilter>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e16:	f000 fab1 	bl	800137c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_I2C2_Init+0x74>)
 8000e1e:	f001 fcc6 	bl	80027ae <HAL_I2CEx_ConfigDigitalFilter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 faa8 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000b70 	.word	0x20000b70
 8000e34:	40005800 	.word	0x40005800

08000e38 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <MX_QUADSPI_Init+0x48>)
 8000e40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e50:	2210      	movs	r2, #16
 8000e52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e56:	2217      	movs	r2, #23
 8000e58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_QUADSPI_Init+0x44>)
 8000e68:	f001 feba 	bl	8002be0 <HAL_QSPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000e72:	f000 fa83 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000ca4 	.word	0x20000ca4
 8000e80:	a0001000 	.word	0xa0001000

08000e84 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <MX_SPI3_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000e9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ea2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_SPI3_Init+0x74>)
 8000ee4:	f003 f9f0 	bl	80042c8 <HAL_SPI_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 fa45 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000bbc 	.word	0x20000bbc
 8000efc:	40003c00 	.word	0x40003c00

08000f00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <MX_USART1_UART_Init+0x5c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f44:	f003 fa63 	bl	800440e <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 fa15 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000c20 	.word	0x20000c20
 8000f5c:	40013800 	.word	0x40013800

08000f60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <MX_USART3_UART_Init+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000fa4:	f003 fa33 	bl	800440e <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 f9e5 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200006c0 	.word	0x200006c0
 8000fbc:	40004800 	.word	0x40004800

08000fc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2206      	movs	r2, #6
 8000fd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	f001 fc1f 	bl	8002846 <HAL_PCD_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 f9b5 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000744 	.word	0x20000744

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001032:	4bba      	ldr	r3, [pc, #744]	; (800131c <MX_GPIO_Init+0x300>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4ab9      	ldr	r2, [pc, #740]	; (800131c <MX_GPIO_Init+0x300>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4bb7      	ldr	r3, [pc, #732]	; (800131c <MX_GPIO_Init+0x300>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4bb4      	ldr	r3, [pc, #720]	; (800131c <MX_GPIO_Init+0x300>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4ab3      	ldr	r2, [pc, #716]	; (800131c <MX_GPIO_Init+0x300>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4bb1      	ldr	r3, [pc, #708]	; (800131c <MX_GPIO_Init+0x300>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4bae      	ldr	r3, [pc, #696]	; (800131c <MX_GPIO_Init+0x300>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4aad      	ldr	r2, [pc, #692]	; (800131c <MX_GPIO_Init+0x300>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4bab      	ldr	r3, [pc, #684]	; (800131c <MX_GPIO_Init+0x300>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4ba8      	ldr	r3, [pc, #672]	; (800131c <MX_GPIO_Init+0x300>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4aa7      	ldr	r2, [pc, #668]	; (800131c <MX_GPIO_Init+0x300>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4ba5      	ldr	r3, [pc, #660]	; (800131c <MX_GPIO_Init+0x300>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4ba2      	ldr	r3, [pc, #648]	; (800131c <MX_GPIO_Init+0x300>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4aa1      	ldr	r2, [pc, #644]	; (800131c <MX_GPIO_Init+0x300>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b9f      	ldr	r3, [pc, #636]	; (800131c <MX_GPIO_Init+0x300>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80010b0:	489b      	ldr	r0, [pc, #620]	; (8001320 <MX_GPIO_Init+0x304>)
 80010b2:	f001 fa67 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f248 1104 	movw	r1, #33028	; 0x8104
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f001 fa60 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010c4:	2200      	movs	r2, #0
 80010c6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80010ca:	4896      	ldr	r0, [pc, #600]	; (8001324 <MX_GPIO_Init+0x308>)
 80010cc:	f001 fa5a 	bl	8002584 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f241 0181 	movw	r1, #4225	; 0x1081
 80010d6:	4894      	ldr	r0, [pc, #592]	; (8001328 <MX_GPIO_Init+0x30c>)
 80010d8:	f001 fa54 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4891      	ldr	r0, [pc, #580]	; (8001328 <MX_GPIO_Init+0x30c>)
 80010e4:	f001 fa4e 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80010ee:	488f      	ldr	r0, [pc, #572]	; (800132c <MX_GPIO_Init+0x310>)
 80010f0:	f001 fa48 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	488a      	ldr	r0, [pc, #552]	; (8001324 <MX_GPIO_Init+0x308>)
 80010fa:	f001 fa43 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2101      	movs	r1, #1
 8001102:	4887      	ldr	r0, [pc, #540]	; (8001320 <MX_GPIO_Init+0x304>)
 8001104:	f001 fa3e 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001108:	f240 1315 	movw	r3, #277	; 0x115
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	487f      	ldr	r0, [pc, #508]	; (8001320 <MX_GPIO_Init+0x304>)
 8001122:	f001 f885 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001126:	236a      	movs	r3, #106	; 0x6a
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	4b81      	ldr	r3, [pc, #516]	; (8001330 <MX_GPIO_Init+0x314>)
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4879      	ldr	r0, [pc, #484]	; (8001320 <MX_GPIO_Init+0x304>)
 800113a:	f001 f879 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001144:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <MX_GPIO_Init+0x318>)
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4876      	ldr	r0, [pc, #472]	; (800132c <MX_GPIO_Init+0x310>)
 8001154:	f001 f86c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001158:	233f      	movs	r3, #63	; 0x3f
 800115a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800115c:	230b      	movs	r3, #11
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4870      	ldr	r0, [pc, #448]	; (800132c <MX_GPIO_Init+0x310>)
 800116c:	f001 f860 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001170:	2303      	movs	r3, #3
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001180:	2308      	movs	r3, #8
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f001 f84f 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001192:	f248 1304 	movw	r3, #33028	; 0x8104
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f001 f83f 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011b2:	2308      	movs	r3, #8
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011c2:	2301      	movs	r3, #1
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f001 f82e 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80011d4:	2310      	movs	r3, #16
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011d8:	230b      	movs	r3, #11
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ea:	f001 f821 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80011ee:	23e0      	movs	r3, #224	; 0xe0
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011fe:	2305      	movs	r3, #5
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f001 f810 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <MX_GPIO_Init+0x314>)
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4840      	ldr	r0, [pc, #256]	; (8001324 <MX_GPIO_Init+0x308>)
 8001224:	f001 f804 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001228:	2302      	movs	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800122c:	230b      	movs	r3, #11
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	483a      	ldr	r0, [pc, #232]	; (8001324 <MX_GPIO_Init+0x308>)
 800123c:	f000 fff8 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001240:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001244:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4832      	ldr	r0, [pc, #200]	; (8001324 <MX_GPIO_Init+0x308>)
 800125a:	f000 ffe9 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800125e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001262:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MX_GPIO_Init+0x314>)
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	482d      	ldr	r0, [pc, #180]	; (8001328 <MX_GPIO_Init+0x30c>)
 8001274:	f000 ffdc 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001278:	f243 0381 	movw	r3, #12417	; 0x3081
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4825      	ldr	r0, [pc, #148]	; (8001328 <MX_GPIO_Init+0x30c>)
 8001292:	f000 ffcd 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001296:	f44f 7310 	mov.w	r3, #576	; 0x240
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	481f      	ldr	r0, [pc, #124]	; (800132c <MX_GPIO_Init+0x310>)
 80012b0:	f000 ffbe 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80012b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_GPIO_Init+0x314>)
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_GPIO_Init+0x310>)
 80012ca:	f000 ffb1 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80012ce:	2302      	movs	r3, #2
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012de:	2305      	movs	r3, #5
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <MX_GPIO_Init+0x30c>)
 80012ea:	f000 ffa1 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80012ee:	2378      	movs	r3, #120	; 0x78
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fe:	2307      	movs	r3, #7
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_GPIO_Init+0x30c>)
 800130a:	f000 ff91 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	e00d      	b.n	8001338 <MX_GPIO_Init+0x31c>
 800131c:	40021000 	.word	0x40021000
 8001320:	48001000 	.word	0x48001000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000c00 	.word	0x48000c00
 800132c:	48000800 	.word	0x48000800
 8001330:	10110000 	.word	0x10110000
 8001334:	10210000 	.word	0x10210000
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <MX_GPIO_Init+0x35c>)
 800134a:	f000 ff71 	bl	8002230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2017      	movs	r0, #23
 8001354:	f000 fd3f 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001358:	2017      	movs	r0, #23
 800135a:	f000 fd58 	bl	8001e0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2028      	movs	r0, #40	; 0x28
 8001364:	f000 fd37 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001368:	2028      	movs	r0, #40	; 0x28
 800136a:	f000 fd50 	bl	8001e0e <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	48000400 	.word	0x48000400

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_MspInit+0x44>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6613      	str	r3, [r2, #96]	; 0x60
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_MspInit+0x44>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x44>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6593      	str	r3, [r2, #88]	; 0x58
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x44>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_CRC_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_CRC_MspInit+0x3c>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_CRC_MspInit+0x3c>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	6493      	str	r3, [r2, #72]	; 0x48
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_CRC_MspInit+0x3c>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023000 	.word	0x40023000
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0ac      	sub	sp, #176	; 0xb0
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2288      	movs	r2, #136	; 0x88
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f006 fae7 	bl	8007a04 <memset>
  if(DFSDM1_Init == 0)
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d142      	bne.n	80014c4 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800143e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001442:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fa6e 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800145a:	f7ff ff8f 	bl	800137c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001468:	6613      	str	r3, [r2, #96]	; 0x60
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800148e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014a8:	2306      	movs	r3, #6
 80014aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80014b6:	f000 febb 	bl	8002230 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a02      	ldr	r2, [pc, #8]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014c2:	6013      	str	r3, [r2, #0]
  }

}
 80014c4:	bf00      	nop
 80014c6:	37b0      	adds	r7, #176	; 0xb0
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000548 	.word	0x20000548
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48001000 	.word	0x48001000

080014d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0ac      	sub	sp, #176	; 0xb0
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2288      	movs	r2, #136	; 0x88
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 fa83 	bl	8007a04 <memset>
  if(hi2c->Instance==I2C2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_I2C_MspInit+0xb0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d13b      	bne.n	8001580 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fa0b 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001520:	f7ff ff2c 	bl	800137c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_I2C_MspInit+0xb4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a18      	ldr	r2, [pc, #96]	; (800158c <HAL_I2C_MspInit+0xb4>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_I2C_MspInit+0xb4>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800153c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001556:	2304      	movs	r3, #4
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <HAL_I2C_MspInit+0xb8>)
 8001564:	f000 fe64 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_I2C_MspInit+0xb4>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_I2C_MspInit+0xb4>)
 800156e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001572:	6593      	str	r3, [r2, #88]	; 0x58
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_I2C_MspInit+0xb4>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	37b0      	adds	r7, #176	; 0xb0
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40005800 	.word	0x40005800
 800158c:	40021000 	.word	0x40021000
 8001590:	48000400 	.word	0x48000400

08001594 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_QSPI_MspInit+0x7c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d128      	bne.n	8001608 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_QSPI_MspInit+0x80>)
 80015b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_QSPI_MspInit+0x80>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6513      	str	r3, [r2, #80]	; 0x50
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_QSPI_MspInit+0x80>)
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_QSPI_MspInit+0x80>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_QSPI_MspInit+0x80>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_QSPI_MspInit+0x80>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80015e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015ea:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015f8:	230a      	movs	r3, #10
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_QSPI_MspInit+0x84>)
 8001604:	f000 fe14 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	a0001000 	.word	0xa0001000
 8001614:	40021000 	.word	0x40021000
 8001618:	48001000 	.word	0x48001000

0800161c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_SPI_MspInit+0x7c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d128      	bne.n	8001690 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001648:	6593      	str	r3, [r2, #88]	; 0x58
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_SPI_MspInit+0x80>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_SPI_MspInit+0x80>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800166e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001680:	2306      	movs	r3, #6
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_SPI_MspInit+0x84>)
 800168c:	f000 fdd0 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40003c00 	.word	0x40003c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000800 	.word	0x48000800

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ae      	sub	sp, #184	; 0xb8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	2288      	movs	r2, #136	; 0x88
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 f99d 	bl	8007a04 <memset>
  if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a42      	ldr	r2, [pc, #264]	; (80017d8 <HAL_UART_MspInit+0x134>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d13b      	bne.n	800174c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016d8:	2300      	movs	r3, #0
 80016da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 f925 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016ec:	f7ff fe46 	bl	800137c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f0:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_UART_MspInit+0x138>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_UART_MspInit+0x138>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fa:	6613      	str	r3, [r2, #96]	; 0x60
 80016fc:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_UART_MspInit+0x138>)
 80016fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_UART_MspInit+0x138>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	4a33      	ldr	r2, [pc, #204]	; (80017dc <HAL_UART_MspInit+0x138>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001714:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_UART_MspInit+0x138>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001720:	23c0      	movs	r3, #192	; 0xc0
 8001722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001738:	2307      	movs	r3, #7
 800173a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001742:	4619      	mov	r1, r3
 8001744:	4826      	ldr	r0, [pc, #152]	; (80017e0 <HAL_UART_MspInit+0x13c>)
 8001746:	f000 fd73 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800174a:	e040      	b.n	80017ce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <HAL_UART_MspInit+0x140>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d13b      	bne.n	80017ce <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001756:	2304      	movs	r3, #4
 8001758:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800175a:	2300      	movs	r3, #0
 800175c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4618      	mov	r0, r3
 8001764:	f002 f8e4 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800176e:	f7ff fe05 	bl	800137c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_UART_MspInit+0x138>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_UART_MspInit+0x138>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6593      	str	r3, [r2, #88]	; 0x58
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x138>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_UART_MspInit+0x138>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_UART_MspInit+0x138>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_UART_MspInit+0x138>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017bc:	2307      	movs	r3, #7
 80017be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <HAL_UART_MspInit+0x144>)
 80017ca:	f000 fd31 	bl	8002230 <HAL_GPIO_Init>
}
 80017ce:	bf00      	nop
 80017d0:	37b8      	adds	r7, #184	; 0xb8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	40004800 	.word	0x40004800
 80017e8:	48000c00 	.word	0x48000c00

080017ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ac      	sub	sp, #176	; 0xb0
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2288      	movs	r2, #136	; 0x88
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f006 f8f9 	bl	8007a04 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181a:	d17c      	bne.n	8001916 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001822:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001832:	2318      	movs	r3, #24
 8001834:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001836:	2307      	movs	r3, #7
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800183e:	2302      	movs	r3, #2
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001842:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4618      	mov	r0, r3
 800184e:	f002 f86f 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001858:	f7ff fd90 	bl	800137c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_PCD_MspInit+0x134>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_PCD_MspInit+0x134>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_PCD_MspInit+0x134>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	f000 fccd 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001896:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800189a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018b0:	230a      	movs	r3, #10
 80018b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f000 fcb6 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d114      	bne.n	8001912 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6593      	str	r3, [r2, #88]	; 0x58
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_PCD_MspInit+0x134>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001900:	f001 f95e 	bl	8002bc0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_PCD_MspInit+0x134>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PCD_MspInit+0x134>)
 800190a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001910:	e001      	b.n	8001916 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001912:	f001 f955 	bl	8002bc0 <HAL_PWREx_EnableVddUSB>
}
 8001916:	bf00      	nop
 8001918:	37b0      	adds	r7, #176	; 0xb0
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f912 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800197c:	2020      	movs	r0, #32
 800197e:	f000 fe19 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001982:	2040      	movs	r0, #64	; 0x40
 8001984:	f000 fe16 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001988:	2080      	movs	r0, #128	; 0x80
 800198a:	f000 fe13 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800198e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001992:	f000 fe0f 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800199e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019a2:	f000 fe07 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019aa:	f000 fe03 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019b2:	f000 fdff 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80019b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019ba:	f000 fdfb 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80019be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019c2:	f000 fdf7 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f005 ffca 	bl	8007994 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20018000 	.word	0x20018000
 8001a2c:	00000800 	.word	0x00000800
 8001a30:	2000054c 	.word	0x2000054c
 8001a34:	20000d00 	.word	0x20000d00

08001a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <SystemInit+0x5c>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <SystemInit+0x5c>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <SystemInit+0x60>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <SystemInit+0x60>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <SystemInit+0x60>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <SystemInit+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <SystemInit+0x60>)
 8001a64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <SystemInit+0x60>)
 8001a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <SystemInit+0x60>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <SystemInit+0x60>)
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SystemInit+0x60>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	40021000 	.word	0x40021000

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffca 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001aa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aa6:	e003      	b.n	8001ab0 <LoopCopyDataInit>

08001aa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001aac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aae:	3104      	adds	r1, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ab4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ab6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ab8:	d3f6      	bcc.n	8001aa8 <CopyDataInit>
	ldr	r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001abc:	e002      	b.n	8001ac4 <LoopFillZerobss>

08001abe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001abe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ac0:	f842 3b04 	str.w	r3, [r2], #4

08001ac4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <LoopForever+0x16>)
	cmp	r2, r3
 8001ac6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ac8:	d3f9      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f005 ff69 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff f89b 	bl	8000c08 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ad8:	08008fc8 	.word	0x08008fc8
	ldr	r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ae0:	2000052c 	.word	0x2000052c
	ldr	r2, =_sbss
 8001ae4:	2000052c 	.word	0x2000052c
	ldr	r3, = _ebss
 8001ae8:	20000cfc 	.word	0x20000cfc

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f961 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fc3a 	bl	8001388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_InitTick+0x6c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_InitTick+0x70>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_InitTick+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f96d 	bl	8001e2a <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d809      	bhi.n	8001b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f000 f937 	bl	8001dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_InitTick+0x74>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e004      	b.n	8001b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e001      	b.n	8001b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000ce8 	.word	0x20000ce8

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000ce8 	.word	0x20000ce8

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e054      	b.n	8001f00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f5b      	ldrb	r3, [r3, #29]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fab2 	bl	80013d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	791b      	ldrb	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_CRC_Init+0xc4>)
 8001e80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0218 	bic.w	r2, r2, #24
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	e00c      	b.n	8001eae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f834 	bl	8001f0c <HAL_CRCEx_Polynomial_Set>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e028      	b.n	8001f00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	795b      	ldrb	r3, [r3, #5]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	e004      	b.n	8001ecc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6912      	ldr	r2, [r2, #16]
 8001eca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	04c11db7 	.word	0x04c11db7

08001f0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f1c:	231f      	movs	r3, #31
 8001f1e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f20:	bf00      	nop
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	613a      	str	r2, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_CRCEx_Polynomial_Set+0x34>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_CRCEx_Polynomial_Set+0x16>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d846      	bhi.n	8001fd4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fdb 	.word	0x08001fdb
 8001f50:	08001fd5 	.word	0x08001fd5
 8001f54:	08001fd5 	.word	0x08001fd5
 8001f58:	08001fd5 	.word	0x08001fd5
 8001f5c:	08001fd5 	.word	0x08001fd5
 8001f60:	08001fd5 	.word	0x08001fd5
 8001f64:	08001fd5 	.word	0x08001fd5
 8001f68:	08001fd5 	.word	0x08001fd5
 8001f6c:	08001fc9 	.word	0x08001fc9
 8001f70:	08001fd5 	.word	0x08001fd5
 8001f74:	08001fd5 	.word	0x08001fd5
 8001f78:	08001fd5 	.word	0x08001fd5
 8001f7c:	08001fd5 	.word	0x08001fd5
 8001f80:	08001fd5 	.word	0x08001fd5
 8001f84:	08001fd5 	.word	0x08001fd5
 8001f88:	08001fd5 	.word	0x08001fd5
 8001f8c:	08001fbd 	.word	0x08001fbd
 8001f90:	08001fd5 	.word	0x08001fd5
 8001f94:	08001fd5 	.word	0x08001fd5
 8001f98:	08001fd5 	.word	0x08001fd5
 8001f9c:	08001fd5 	.word	0x08001fd5
 8001fa0:	08001fd5 	.word	0x08001fd5
 8001fa4:	08001fd5 	.word	0x08001fd5
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	08001fb1 	.word	0x08001fb1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d913      	bls.n	8001fde <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fba:	e010      	b.n	8001fde <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	d90f      	bls.n	8001fe2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fc6:	e00c      	b.n	8001fe2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0f      	cmp	r3, #15
 8001fcc:	d90b      	bls.n	8001fe6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fd2:	e008      	b.n	8001fe6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8001fd8:	e006      	b.n	8001fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fda:	bf00      	nop
 8001fdc:	e004      	b.n	8001fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fde:	bf00      	nop
 8001fe0:	e002      	b.n	8001fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fe6:	bf00      	nop
  }
  if (status == HAL_OK)
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 0118 	bic.w	r1, r3, #24
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	430a      	orrs	r2, r1
 8002008:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0ac      	b.n	8002184 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f8b2 	bl	8002198 <DFSDM_GetChannelFromInstance>
 8002034:	4603      	mov	r3, r0
 8002036:	4a55      	ldr	r2, [pc, #340]	; (800218c <HAL_DFSDM_ChannelInit+0x174>)
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e09f      	b.n	8002184 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff f9e3 	bl	8001410 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800204a:	4b51      	ldr	r3, [pc, #324]	; (8002190 <HAL_DFSDM_ChannelInit+0x178>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_DFSDM_ChannelInit+0x178>)
 8002052:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002054:	4b4e      	ldr	r3, [pc, #312]	; (8002190 <HAL_DFSDM_ChannelInit+0x178>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d125      	bne.n	80020a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800205c:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 8002062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002066:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002068:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4948      	ldr	r1, [pc, #288]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 800207c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002080:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	791b      	ldrb	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800208a:	4b42      	ldr	r3, [pc, #264]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	493f      	ldr	r1, [pc, #252]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80020b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80020cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 020f 	bic.w	r2, r2, #15
 80020e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800210c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 0207 	and.w	r2, r2, #7
 8002138:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002164:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f810 	bl	8002198 <DFSDM_GetChannelFromInstance>
 8002178:	4602      	mov	r2, r0
 800217a:	4904      	ldr	r1, [pc, #16]	; (800218c <HAL_DFSDM_ChannelInit+0x174>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000554 	.word	0x20000554
 8002190:	20000550 	.word	0x20000550
 8002194:	40016000 	.word	0x40016000

08002198 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <DFSDM_GetChannelFromInstance+0x7c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d102      	bne.n	80021ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e02b      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <DFSDM_GetChannelFromInstance+0x80>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d102      	bne.n	80021bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e024      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <DFSDM_GetChannelFromInstance+0x84>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e01d      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <DFSDM_GetChannelFromInstance+0x88>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d102      	bne.n	80021d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80021d2:	2304      	movs	r3, #4
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e016      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <DFSDM_GetChannelFromInstance+0x8c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80021e0:	2305      	movs	r3, #5
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e00f      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <DFSDM_GetChannelFromInstance+0x90>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d102      	bne.n	80021f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80021ee:	2306      	movs	r3, #6
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e008      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <DFSDM_GetChannelFromInstance+0x94>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d102      	bne.n	8002202 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80021fc:	2307      	movs	r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e001      	b.n	8002206 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002202:	2303      	movs	r3, #3
 8002204:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40016000 	.word	0x40016000
 8002218:	40016020 	.word	0x40016020
 800221c:	40016040 	.word	0x40016040
 8002220:	40016080 	.word	0x40016080
 8002224:	400160a0 	.word	0x400160a0
 8002228:	400160c0 	.word	0x400160c0
 800222c:	400160e0 	.word	0x400160e0

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e17f      	b.n	8002540 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8171 	beq.w	800253a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d00b      	beq.n	8002278 <HAL_GPIO_Init+0x48>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800226c:	2b11      	cmp	r3, #17
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b12      	cmp	r3, #18
 8002276:	d130      	bne.n	80022da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ae:	2201      	movs	r2, #1
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 0201 	and.w	r2, r3, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d118      	bne.n	8002318 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022ec:	2201      	movs	r2, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f003 0201 	and.w	r2, r3, #1
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x128>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b12      	cmp	r3, #18
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	6939      	ldr	r1, [r7, #16]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80ac 	beq.w	800253a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <HAL_GPIO_Init+0x330>)
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	4a5e      	ldr	r2, [pc, #376]	; (8002560 <HAL_GPIO_Init+0x330>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6613      	str	r3, [r2, #96]	; 0x60
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_GPIO_Init+0x330>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023fa:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <HAL_GPIO_Init+0x334>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002424:	d025      	beq.n	8002472 <HAL_GPIO_Init+0x242>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4f      	ldr	r2, [pc, #316]	; (8002568 <HAL_GPIO_Init+0x338>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01f      	beq.n	800246e <HAL_GPIO_Init+0x23e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4e      	ldr	r2, [pc, #312]	; (800256c <HAL_GPIO_Init+0x33c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x23a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4d      	ldr	r2, [pc, #308]	; (8002570 <HAL_GPIO_Init+0x340>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x236>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4c      	ldr	r2, [pc, #304]	; (8002574 <HAL_GPIO_Init+0x344>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x232>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4b      	ldr	r2, [pc, #300]	; (8002578 <HAL_GPIO_Init+0x348>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x22e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_GPIO_Init+0x34c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x22a>
 8002456:	2306      	movs	r3, #6
 8002458:	e00c      	b.n	8002474 <HAL_GPIO_Init+0x244>
 800245a:	2307      	movs	r3, #7
 800245c:	e00a      	b.n	8002474 <HAL_GPIO_Init+0x244>
 800245e:	2305      	movs	r3, #5
 8002460:	e008      	b.n	8002474 <HAL_GPIO_Init+0x244>
 8002462:	2304      	movs	r3, #4
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x244>
 8002466:	2303      	movs	r3, #3
 8002468:	e004      	b.n	8002474 <HAL_GPIO_Init+0x244>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x244>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x244>
 8002472:	2300      	movs	r3, #0
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	4093      	lsls	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002484:	4937      	ldr	r1, [pc, #220]	; (8002564 <HAL_GPIO_Init+0x334>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_GPIO_Init+0x350>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_GPIO_Init+0x350>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_GPIO_Init+0x350>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e0:	4a27      	ldr	r2, [pc, #156]	; (8002580 <HAL_GPIO_Init+0x350>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_GPIO_Init+0x350>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800250a:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_GPIO_Init+0x350>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_GPIO_Init+0x350>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <HAL_GPIO_Init+0x350>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f ae78 	bne.w	8002240 <HAL_GPIO_Init+0x10>
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	40010000 	.word	0x40010000
 8002568:	48000400 	.word	0x48000400
 800256c:	48000800 	.word	0x48000800
 8002570:	48000c00 	.word	0x48000c00
 8002574:	48001000 	.word	0x48001000
 8002578:	48001400 	.word	0x48001400
 800257c:	48001800 	.word	0x48001800
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f806 	bl	80025e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e081      	b.n	8002710 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe ff59 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2224      	movs	r2, #36	; 0x24
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800264a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e006      	b.n	8002682 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002680:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d104      	bne.n	8002694 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	ea42 0103 	orr.w	r1, r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69d9      	ldr	r1, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b20      	cmp	r3, #32
 800272c:	d138      	bne.n	80027a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002738:	2302      	movs	r3, #2
 800273a:	e032      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800276a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d139      	bne.n	8002838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e033      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	; 0x24
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002848:	b08f      	sub	sp, #60	; 0x3c
 800284a:	af0a      	add	r7, sp, #40	; 0x28
 800284c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e116      	b.n	8002a86 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe ffba 	bl	80017ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fab9 	bl	8004e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	687e      	ldr	r6, [r7, #4]
 80028a4:	466d      	mov	r5, sp
 80028a6:	f106 0410 	add.w	r4, r6, #16
 80028aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ba:	1d33      	adds	r3, r6, #4
 80028bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028be:	6838      	ldr	r0, [r7, #0]
 80028c0:	f002 fa79 	bl	8004db6 <USB_CoreInit>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0d7      	b.n	8002a86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 faa7 	bl	8004e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e04a      	b.n	800297e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	333d      	adds	r3, #61	; 0x3d
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	333c      	adds	r3, #60	; 0x3c
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	b298      	uxth	r0, r3
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3342      	adds	r3, #66	; 0x42
 8002924:	4602      	mov	r2, r0
 8002926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	333f      	adds	r3, #63	; 0x3f
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3344      	adds	r3, #68	; 0x44
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3348      	adds	r3, #72	; 0x48
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3350      	adds	r3, #80	; 0x50
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	3301      	adds	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d3af      	bcc.n	80028e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e044      	b.n	8002a18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	3301      	adds	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3b5      	bcc.n	800298e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	687e      	ldr	r6, [r7, #4]
 8002a2a:	466d      	mov	r5, sp
 8002a2c:	f106 0410 	add.w	r4, r6, #16
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a40:	1d33      	adds	r3, r6, #4
 8002a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f002 fa1d 	bl	8004e84 <USB_DevInit>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e014      	b.n	8002a86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f80a 	bl	8002a8e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fbad 	bl	80051de <USB_DevDisconnect>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	f043 0303 	orr.w	r3, r3, #3
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40007000 	.word	0x40007000

08002af8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <HAL_PWREx_GetVoltageRange+0x18>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40007000 	.word	0x40007000

08002b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b22:	d130      	bne.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b30:	d038      	beq.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b3a:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2232      	movs	r2, #50	; 0x32
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9b      	lsrs	r3, r3, #18
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b58:	e002      	b.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d102      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f2      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b80:	d110      	bne.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e00f      	b.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d007      	beq.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9c:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6053      	str	r3, [r2, #4]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40007000 	.word	0x40007000

08002be0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7fe ffea 	bl	8001bc0 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e063      	b.n	8002cc0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe fcc1 	bl	8001594 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c12:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f858 	bl	8002ccc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	021a      	lsls	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2120      	movs	r1, #32
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f850 	bl	8002ce8 <QSPI_WaitFlagStateUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d131      	bne.n	8002cb6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c5c:	f023 0310 	bic.w	r3, r3, #16
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6852      	ldr	r2, [r2, #4]
 8002c64:	0611      	lsls	r1, r2, #24
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d2      	ldr	r2, [r2, #12]
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_QSPI_Init+0xe8>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6912      	ldr	r2, [r2, #16]
 8002c82:	0411      	lsls	r1, r2, #16
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6952      	ldr	r2, [r2, #20]
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6992      	ldr	r2, [r2, #24]
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	ffe0f8fe 	.word	0xffe0f8fe

08002ccc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002cf8:	e01a      	b.n	8002d30 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d00:	d016      	beq.n	8002d30 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7fe ff5d 	bl	8001bc0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e00e      	b.n	8002d4e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1d6      	bne.n	8002cfa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e3d4      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6a:	4ba1      	ldr	r3, [pc, #644]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d74:	4b9e      	ldr	r3, [pc, #632]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80e4 	beq.w	8002f54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4a>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	f040 808b 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 8087 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da2:	4b93      	ldr	r3, [pc, #588]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x62>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e3ac      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x7c>
 8002dca:	4b89      	ldr	r3, [pc, #548]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd2:	e005      	b.n	8002de0 <HAL_RCC_OscConfig+0x88>
 8002dd4:	4b86      	ldr	r3, [pc, #536]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d223      	bcs.n	8002e2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd41 	bl	8003870 <RCC_SetFlashLatencyFromMSIRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e38d      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df8:	4b7d      	ldr	r3, [pc, #500]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7c      	ldr	r2, [pc, #496]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4977      	ldr	r1, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4972      	ldr	r1, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 8002e2a:	e025      	b.n	8002e78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6f      	ldr	r2, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	496a      	ldr	r1, [pc, #424]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	4965      	ldr	r1, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd01 	bl	8003870 <RCC_SetFlashLatencyFromMSIRange>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e34d      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e78:	f000 fc36 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	495a      	ldr	r1, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x29c>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_OscConfig+0x2a0>)
 8002e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e98:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <HAL_RCC_OscConfig+0x2a4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fe3f 	bl	8001b20 <HAL_InitTick>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d052      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	e331      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4c      	ldr	r2, [pc, #304]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fe7c 	bl	8001bc0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fe78 	bl	8001bc0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e31a      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ede:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	493b      	ldr	r1, [pc, #236]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	4936      	ldr	r1, [pc, #216]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e01a      	b.n	8002f54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f1e:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fe49 	bl	8001bc0 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f32:	f7fe fe45 	bl	8001bc0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e2e7      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x1da>
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d074      	beq.n	800304a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x21a>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d10e      	bne.n	8002f8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d064      	beq.n	8003048 <HAL_RCC_OscConfig+0x2f0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d160      	bne.n	8003048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e2c4      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x24a>
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e01d      	b.n	8002fde <HAL_RCC_OscConfig+0x286>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x26e>
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e00b      	b.n	8002fde <HAL_RCC_OscConfig+0x286>
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x298>)
 8002fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01c      	beq.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fdeb 	bl	8001bc0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fec:	e011      	b.n	8003012 <HAL_RCC_OscConfig+0x2ba>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08008c04 	.word	0x08008c04
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fdde 	bl	8001bc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e280      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	4baf      	ldr	r3, [pc, #700]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x2a8>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe fdce 	bl	8001bc0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fdca 	bl	8001bc0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e26c      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	4ba5      	ldr	r3, [pc, #660]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d0>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d060      	beq.n	8003118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x310>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d119      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d116      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003068:	4b99      	ldr	r3, [pc, #612]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x328>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e249      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b93      	ldr	r3, [pc, #588]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	4990      	ldr	r1, [pc, #576]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003094:	e040      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d023      	beq.n	80030e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309e:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a8b      	ldr	r2, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fd89 	bl	8001bc0 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fd85 	bl	8001bc0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e227      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	497c      	ldr	r1, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a79      	ldr	r2, [pc, #484]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fd65 	bl	8001bc0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe fd61 	bl	8001bc0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e203      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	4a67      	ldr	r2, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fd40 	bl	8001bc0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fd3c 	bl	8001bc0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1de      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003156:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x3ec>
 8003164:	e01b      	b.n	800319e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003166:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fd23 	bl	8001bc0 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe fd1f 	bl	8001bc0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1c1      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a6 	beq.w	80032f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a43      	ldr	r2, [pc, #268]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCC_OscConfig+0x57c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d118      	bne.n	8003216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_OscConfig+0x57c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3a      	ldr	r2, [pc, #232]	; (80032d4 <HAL_RCC_OscConfig+0x57c>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fce6 	bl	8001bc0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7fe fce2 	bl	8001bc0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e184      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <HAL_RCC_OscConfig+0x57c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x4d8>
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322e:	e024      	b.n	800327a <HAL_RCC_OscConfig+0x522>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d110      	bne.n	800325a <HAL_RCC_OscConfig+0x502>
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003258:	e00f      	b.n	800327a <HAL_RCC_OscConfig+0x522>
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 8003272:	f023 0304 	bic.w	r3, r3, #4
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fc9d 	bl	8001bc0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe fc99 	bl	8001bc0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e139      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x578>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ed      	beq.n	800328a <HAL_RCC_OscConfig+0x532>
 80032ae:	e01a      	b.n	80032e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe fc86 	bl	8001bc0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b6:	e00f      	b.n	80032d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe fc82 	bl	8001bc0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d906      	bls.n	80032d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e122      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d8:	4b90      	ldr	r3, [pc, #576]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e8      	bne.n	80032b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b8b      	ldr	r3, [pc, #556]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	4a8a      	ldr	r2, [pc, #552]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8108 	beq.w	8003512 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 80d0 	bne.w	80034ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800330c:	4b83      	ldr	r3, [pc, #524]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	429a      	cmp	r2, r3
 800331e:	d130      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	3b01      	subs	r3, #1
 800332c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d127      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11f      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800334c:	2a07      	cmp	r2, #7
 800334e:	bf14      	ite	ne
 8003350:	2201      	movne	r2, #1
 8003352:	2200      	moveq	r2, #0
 8003354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003356:	4293      	cmp	r3, r2
 8003358:	d113      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	3b01      	subs	r3, #1
 8003368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d109      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d06e      	beq.n	8003460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d069      	beq.n	800345c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b7      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033a4:	4b5d      	ldr	r3, [pc, #372]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80033aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b0:	f7fe fc06 	bl	8001bc0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe fc02 	bl	8001bc0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0a4      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ca:	4b54      	ldr	r3, [pc, #336]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d6:	4b51      	ldr	r3, [pc, #324]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4b51      	ldr	r3, [pc, #324]	; (8003520 <HAL_RCC_OscConfig+0x7c8>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033e6:	3a01      	subs	r2, #1
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	4311      	orrs	r1, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f0:	0212      	lsls	r2, r2, #8
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	0852      	lsrs	r2, r2, #1
 80033fa:	3a01      	subs	r2, #1
 80033fc:	0552      	lsls	r2, r2, #21
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0652      	lsls	r2, r2, #25
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003410:	0912      	lsrs	r2, r2, #4
 8003412:	0452      	lsls	r2, r2, #17
 8003414:	430a      	orrs	r2, r1
 8003416:	4941      	ldr	r1, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3e      	ldr	r2, [pc, #248]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003428:	4b3c      	ldr	r3, [pc, #240]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003434:	f7fe fbc4 	bl	8001bc0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe fbc0 	bl	8001bc0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e062      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b33      	ldr	r3, [pc, #204]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345a:	e05a      	b.n	8003512 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e059      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003460:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d152      	bne.n	8003512 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2a      	ldr	r2, [pc, #168]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003484:	f7fe fb9c 	bl	8001bc0 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fb98 	bl	8001bc0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e03a      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b1f      	ldr	r3, [pc, #124]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x734>
 80034aa:	e032      	b.n	8003512 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d02d      	beq.n	800350e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a19      	ldr	r2, [pc, #100]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034d0:	f023 0303 	bic.w	r3, r3, #3
 80034d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 80034dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe fb6b 	bl	8001bc0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fb67 	bl	8001bc0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e009      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_OscConfig+0x7c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x796>
 800350c:	e001      	b.n	8003512 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	f99d808c 	.word	0xf99d808c

08003524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0c8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d910      	bls.n	8003568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 0207 	bic.w	r2, r3, #7
 800354e:	4961      	ldr	r1, [pc, #388]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b0      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d04c      	beq.n	800360e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d107      	bne.n	800358c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	4b56      	ldr	r3, [pc, #344]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d121      	bne.n	80035cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e09e      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d115      	bne.n	80035cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e092      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ac:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e086      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e07e      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035cc:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 0203 	bic.w	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	493f      	ldr	r1, [pc, #252]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035de:	f7fe faef 	bl	8001bc0 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e6:	f7fe faeb 	bl	8001bc0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e066      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fc:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 020c 	and.w	r2, r3, #12
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	429a      	cmp	r2, r3
 800360c:	d1eb      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361a:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	492c      	ldr	r1, [pc, #176]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d210      	bcs.n	800365c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 0207 	bic.w	r2, r3, #7
 8003642:	4924      	ldr	r1, [pc, #144]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x1b0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e036      	b.n	80036ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4918      	ldr	r1, [pc, #96]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4910      	ldr	r1, [pc, #64]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800369a:	f000 f825 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <HAL_RCC_ClockConfig+0x1b4>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	490c      	ldr	r1, [pc, #48]	; (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	5ccb      	ldrb	r3, [r1, r3]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fa2e 	bl	8001b20 <HAL_InitTick>
 80036c4:	4603      	mov	r3, r0
 80036c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80036c8:	7afb      	ldrb	r3, [r7, #11]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08008c04 	.word	0x08008c04
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x34>
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d121      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d11e      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800371c:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003728:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e005      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003744:	4a2b      	ldr	r2, [pc, #172]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d102      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e004      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d101      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_RCC_GetSysClockFreq+0x114>)
 800376e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d134      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003776:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0xa6>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0xac>
 800378c:	e005      	b.n	800379a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003790:	617b      	str	r3, [r7, #20]
      break;
 8003792:	e005      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003796:	617b      	str	r3, [r7, #20]
      break;
 8003798:	e002      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	617b      	str	r3, [r7, #20]
      break;
 800379e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	3301      	adds	r3, #1
 80037ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	fb02 f203 	mul.w	r2, r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	0e5b      	lsrs	r3, r3, #25
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	3301      	adds	r3, #1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037e0:	69bb      	ldr	r3, [r7, #24]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08008c1c 	.word	0x08008c1c
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08008c14 	.word	0x08008c14

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003848:	f7ff ffda 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4904      	ldr	r1, [pc, #16]	; (800386c <HAL_RCC_GetPCLK2Freq+0x28>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	08008c14 	.word	0x08008c14

08003870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003888:	f7ff f936 	bl	8002af8 <HAL_PWREx_GetVoltageRange>
 800388c:	6178      	str	r0, [r7, #20]
 800388e:	e014      	b.n	80038ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	; 0x58
 800389c:	4b22      	ldr	r3, [pc, #136]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038a8:	f7ff f926 	bl	8002af8 <HAL_PWREx_GetVoltageRange>
 80038ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d10b      	bne.n	80038da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d919      	bls.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2ba0      	cmp	r3, #160	; 0xa0
 80038cc:	d902      	bls.n	80038d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ce:	2302      	movs	r3, #2
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e013      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d4:	2301      	movs	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e010      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d902      	bls.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038e0:	2303      	movs	r3, #3
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	e00a      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d102      	bne.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ec:	2302      	movs	r3, #2
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e004      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b70      	cmp	r3, #112	; 0x70
 80038f6:	d101      	bne.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f8:	2301      	movs	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 0207 	bic.w	r2, r3, #7
 8003904:	4909      	ldr	r1, [pc, #36]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	40022000 	.word	0x40022000

08003930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003938:	2300      	movs	r3, #0
 800393a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800393c:	2300      	movs	r3, #0
 800393e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003948:	2b00      	cmp	r3, #0
 800394a:	d041      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003950:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003954:	d02a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003956:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800395a:	d824      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800395c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003966:	d81e      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003970:	d010      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003972:	e018      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003974:	4b86      	ldr	r3, [pc, #536]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a85      	ldr	r2, [pc, #532]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003980:	e015      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 facb 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003992:	e00c      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3320      	adds	r3, #32
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fbb6 	bl	800410c <RCCEx_PLLSAI2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	74fb      	strb	r3, [r7, #19]
      break;
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b4:	4b76      	ldr	r3, [pc, #472]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c2:	4973      	ldr	r1, [pc, #460]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ca:	e001      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d041      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e4:	d02a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ea:	d824      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f6:	d81e      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a00:	d010      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a02:	e018      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a04:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a61      	ldr	r2, [pc, #388]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fa83 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3320      	adds	r3, #32
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb6e 	bl	800410c <RCCEx_PLLSAI2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a34:	e003      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	74fb      	strb	r3, [r7, #19]
      break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a44:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a52:	494f      	ldr	r1, [pc, #316]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a5a:	e001      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80a0 	beq.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6593      	str	r3, [r2, #88]	; 0x58
 8003a94:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3a      	ldr	r2, [pc, #232]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ab0:	f7fe f886 	bl	8001bc0 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7fe f882 	bl	8001bc0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d902      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	74fb      	strb	r3, [r7, #19]
        break;
 8003aca:	e005      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ef      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d15c      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01f      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d019      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b28:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe f841 	bl	8001bc0 <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b40:	e00b      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fe f83d 	bl	8001bc0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	74fb      	strb	r3, [r7, #19]
            break;
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ec      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b86:	e009      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9c:	7c7b      	ldrb	r3, [r7, #17]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4b9e      	ldr	r3, [pc, #632]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	4a9d      	ldr	r2, [pc, #628]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bba:	4b98      	ldr	r3, [pc, #608]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f023 0203 	bic.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	4994      	ldr	r1, [pc, #592]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bdc:	4b8f      	ldr	r3, [pc, #572]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 020c 	bic.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	498c      	ldr	r1, [pc, #560]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bfe:	4b87      	ldr	r3, [pc, #540]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	4983      	ldr	r1, [pc, #524]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	497b      	ldr	r1, [pc, #492]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c42:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	4972      	ldr	r1, [pc, #456]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c64:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	496a      	ldr	r1, [pc, #424]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c86:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	4961      	ldr	r1, [pc, #388]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	4959      	ldr	r1, [pc, #356]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cca:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	4950      	ldr	r1, [pc, #320]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	4948      	ldr	r1, [pc, #288]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	493f      	ldr	r1, [pc, #252]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d028      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d30:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3e:	4937      	ldr	r1, [pc, #220]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
 8003d5c:	e011      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f8d8 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	491f      	ldr	r1, [pc, #124]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db8:	60d3      	str	r3, [r2, #12]
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f8a9 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a02      	ldr	r2, [pc, #8]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e014      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f877 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02f      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5e:	4928      	ldr	r1, [pc, #160]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f854 	bl	8003f24 <RCCEx_PLLSAI1_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d014      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	74bb      	strb	r3, [r7, #18]
 8003e8a:	e011      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f935 	bl	800410c <RCCEx_PLLSAI2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eca:	490d      	ldr	r1, [pc, #52]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eee:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ef6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6013      	str	r3, [r2, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000

08003f24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f32:	4b75      	ldr	r3, [pc, #468]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d018      	beq.n	8003f70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f3e:	4b72      	ldr	r3, [pc, #456]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0203 	and.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d10d      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
       ||
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f56:	4b6c      	ldr	r3, [pc, #432]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
       ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d047      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	e044      	b.n	8003ffa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d018      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0x86>
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d825      	bhi.n	8003fc8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d002      	beq.n	8003f86 <RCCEx_PLLSAI1_Config+0x62>
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d009      	beq.n	8003f98 <RCCEx_PLLSAI1_Config+0x74>
 8003f84:	e020      	b.n	8003fc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f86:	4b60      	ldr	r3, [pc, #384]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11d      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f96:	e01a      	b.n	8003fce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f98:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d116      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa8:	e013      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003faa:	4b57      	ldr	r3, [pc, #348]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fb6:	4b54      	ldr	r3, [pc, #336]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fc6:	e006      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e004      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	4944      	ldr	r1, [pc, #272]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d17d      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004000:	4b41      	ldr	r3, [pc, #260]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a40      	ldr	r2, [pc, #256]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800400a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400c:	f7fd fdd8 	bl	8001bc0 <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004012:	e009      	b.n	8004028 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004014:	f7fd fdd4 	bl	8001bc0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	73fb      	strb	r3, [r7, #15]
        break;
 8004026:	e005      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004028:	4b37      	ldr	r3, [pc, #220]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ef      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d160      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d111      	bne.n	8004064 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b31      	ldr	r3, [pc, #196]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6892      	ldr	r2, [r2, #8]
 8004050:	0211      	lsls	r1, r2, #8
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	0912      	lsrs	r2, r2, #4
 8004058:	0452      	lsls	r2, r2, #17
 800405a:	430a      	orrs	r2, r1
 800405c:	492a      	ldr	r1, [pc, #168]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	610b      	str	r3, [r1, #16]
 8004062:	e027      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d112      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004072:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	0211      	lsls	r1, r2, #8
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6912      	ldr	r2, [r2, #16]
 8004080:	0852      	lsrs	r2, r2, #1
 8004082:	3a01      	subs	r2, #1
 8004084:	0552      	lsls	r2, r2, #21
 8004086:	430a      	orrs	r2, r1
 8004088:	491f      	ldr	r1, [pc, #124]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	610b      	str	r3, [r1, #16]
 800408e:	e011      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6952      	ldr	r2, [r2, #20]
 80040a6:	0852      	lsrs	r2, r2, #1
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0652      	lsls	r2, r2, #25
 80040ac:	430a      	orrs	r2, r1
 80040ae:	4916      	ldr	r1, [pc, #88]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a13      	ldr	r2, [pc, #76]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd fd7e 	bl	8001bc0 <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040c6:	e009      	b.n	80040dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c8:	f7fd fd7a 	bl	8001bc0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	73fb      	strb	r3, [r7, #15]
          break;
 80040da:	e005      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ef      	beq.n	80040c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	4904      	ldr	r1, [pc, #16]	; (8004108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000

0800410c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800411a:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d018      	beq.n	8004158 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004126:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d10d      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
       ||
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800413e:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
       ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d047      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e044      	b.n	80041e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d018      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0x86>
 8004160:	2b03      	cmp	r3, #3
 8004162:	d825      	bhi.n	80041b0 <RCCEx_PLLSAI2_Config+0xa4>
 8004164:	2b01      	cmp	r3, #1
 8004166:	d002      	beq.n	800416e <RCCEx_PLLSAI2_Config+0x62>
 8004168:	2b02      	cmp	r3, #2
 800416a:	d009      	beq.n	8004180 <RCCEx_PLLSAI2_Config+0x74>
 800416c:	e020      	b.n	80041b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800416e:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11d      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417e:	e01a      	b.n	80041b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e013      	b.n	80041ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004192:	4b4c      	ldr	r3, [pc, #304]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ae:	e006      	b.n	80041be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e004      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041b6:	bf00      	nop
 80041b8:	e002      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041be:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	430b      	orrs	r3, r1
 80041dc:	4939      	ldr	r1, [pc, #228]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d167      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041e8:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a35      	ldr	r2, [pc, #212]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fd fce4 	bl	8001bc0 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041fa:	e009      	b.n	8004210 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041fc:	f7fd fce0 	bl	8001bc0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	73fb      	strb	r3, [r7, #15]
        break;
 800420e:	e005      	b.n	800421c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004210:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ef      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d14a      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d111      	bne.n	800424c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004228:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	0211      	lsls	r1, r2, #8
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	0912      	lsrs	r2, r2, #4
 8004240:	0452      	lsls	r2, r2, #17
 8004242:	430a      	orrs	r2, r1
 8004244:	491f      	ldr	r1, [pc, #124]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	614b      	str	r3, [r1, #20]
 800424a:	e011      	b.n	8004270 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004254:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6892      	ldr	r2, [r2, #8]
 800425c:	0211      	lsls	r1, r2, #8
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6912      	ldr	r2, [r2, #16]
 8004262:	0852      	lsrs	r2, r2, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	0652      	lsls	r2, r2, #25
 8004268:	430a      	orrs	r2, r1
 800426a:	4916      	ldr	r1, [pc, #88]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426c:	4313      	orrs	r3, r2
 800426e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd fca0 	bl	8001bc0 <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004282:	e009      	b.n	8004298 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004284:	f7fd fc9c 	bl	8001bc0 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	73fb      	strb	r3, [r7, #15]
          break;
 8004296:	e005      	b.n	80042a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4904      	ldr	r1, [pc, #16]	; (80042c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000

080042c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e095      	b.n	8004406 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ea:	d009      	beq.n	8004300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
 80042f2:	e005      	b.n	8004300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fd f97e 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004340:	d902      	bls.n	8004348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e002      	b.n	800434e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800434c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004356:	d007      	beq.n	8004368 <HAL_SPI_Init+0xa0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	ea42 0103 	orr.w	r1, r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	f003 0204 	and.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043e4:	ea42 0103 	orr.w	r1, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e040      	b.n	80044a2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fd f937 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	; 0x24
 800443a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8c1 	bl	80045d4 <UART_SetConfig>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e022      	b.n	80044a2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fb3f 	bl	8004ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004478:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004488:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fbc6 	bl	8004c2c <UART_CheckIdleState>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b08a      	sub	sp, #40	; 0x28
 80044ae:	af02      	add	r7, sp, #8
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044be:	2b20      	cmp	r3, #32
 80044c0:	f040 8082 	bne.w	80045c8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_UART_Transmit+0x26>
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e07a      	b.n	80045ca <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Transmit+0x38>
 80044de:	2302      	movs	r3, #2
 80044e0:	e073      	b.n	80045ca <HAL_UART_Transmit+0x120>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2221      	movs	r2, #33	; 0x21
 80044f6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f8:	f7fd fb62 	bl	8001bc0 <HAL_GetTick>
 80044fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004516:	d108      	bne.n	800452a <HAL_UART_Transmit+0x80>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e003      	b.n	8004532 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800453a:	e02d      	b.n	8004598 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fbb9 	bl	8004cbe <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e039      	b.n	80045ca <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	881a      	ldrh	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004568:	b292      	uxth	r2, r2
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	3302      	adds	r3, #2
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	e008      	b.n	8004586 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	b292      	uxth	r2, r2
 800457e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	3301      	adds	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1cb      	bne.n	800453c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2140      	movs	r1, #64	; 0x40
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fb85 	bl	8004cbe <UART_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e005      	b.n	80045ca <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4bad      	ldr	r3, [pc, #692]	; (80048b4 <UART_SetConfig+0x2e0>)
 8004600:	4013      	ands	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	430b      	orrs	r3, r1
 800460a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4aa2      	ldr	r2, [pc, #648]	; (80048b8 <UART_SetConfig+0x2e4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	4313      	orrs	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a99      	ldr	r2, [pc, #612]	; (80048bc <UART_SetConfig+0x2e8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d121      	bne.n	800469e <UART_SetConfig+0xca>
 800465a:	4b99      	ldr	r3, [pc, #612]	; (80048c0 <UART_SetConfig+0x2ec>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b03      	cmp	r3, #3
 8004666:	d817      	bhi.n	8004698 <UART_SetConfig+0xc4>
 8004668:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x9c>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004681 	.word	0x08004681
 8004674:	0800468d 	.word	0x0800468d
 8004678:	08004687 	.word	0x08004687
 800467c:	08004693 	.word	0x08004693
 8004680:	2301      	movs	r3, #1
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	e0e7      	b.n	8004856 <UART_SetConfig+0x282>
 8004686:	2302      	movs	r3, #2
 8004688:	76fb      	strb	r3, [r7, #27]
 800468a:	e0e4      	b.n	8004856 <UART_SetConfig+0x282>
 800468c:	2304      	movs	r3, #4
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e0e1      	b.n	8004856 <UART_SetConfig+0x282>
 8004692:	2308      	movs	r3, #8
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e0de      	b.n	8004856 <UART_SetConfig+0x282>
 8004698:	2310      	movs	r3, #16
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	e0db      	b.n	8004856 <UART_SetConfig+0x282>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a88      	ldr	r2, [pc, #544]	; (80048c4 <UART_SetConfig+0x2f0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d132      	bne.n	800470e <UART_SetConfig+0x13a>
 80046a8:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <UART_SetConfig+0x2ec>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d828      	bhi.n	8004708 <UART_SetConfig+0x134>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <UART_SetConfig+0xe8>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	08004709 	.word	0x08004709
 80046c4:	08004709 	.word	0x08004709
 80046c8:	08004709 	.word	0x08004709
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	08004709 	.word	0x08004709
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004709 	.word	0x08004709
 80046dc:	080046f7 	.word	0x080046f7
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004703 	.word	0x08004703
 80046f0:	2300      	movs	r3, #0
 80046f2:	76fb      	strb	r3, [r7, #27]
 80046f4:	e0af      	b.n	8004856 <UART_SetConfig+0x282>
 80046f6:	2302      	movs	r3, #2
 80046f8:	76fb      	strb	r3, [r7, #27]
 80046fa:	e0ac      	b.n	8004856 <UART_SetConfig+0x282>
 80046fc:	2304      	movs	r3, #4
 80046fe:	76fb      	strb	r3, [r7, #27]
 8004700:	e0a9      	b.n	8004856 <UART_SetConfig+0x282>
 8004702:	2308      	movs	r3, #8
 8004704:	76fb      	strb	r3, [r7, #27]
 8004706:	e0a6      	b.n	8004856 <UART_SetConfig+0x282>
 8004708:	2310      	movs	r3, #16
 800470a:	76fb      	strb	r3, [r7, #27]
 800470c:	e0a3      	b.n	8004856 <UART_SetConfig+0x282>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6d      	ldr	r2, [pc, #436]	; (80048c8 <UART_SetConfig+0x2f4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d120      	bne.n	800475a <UART_SetConfig+0x186>
 8004718:	4b69      	ldr	r3, [pc, #420]	; (80048c0 <UART_SetConfig+0x2ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d013      	beq.n	800474e <UART_SetConfig+0x17a>
 8004726:	2b30      	cmp	r3, #48	; 0x30
 8004728:	d814      	bhi.n	8004754 <UART_SetConfig+0x180>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d009      	beq.n	8004742 <UART_SetConfig+0x16e>
 800472e:	2b20      	cmp	r3, #32
 8004730:	d810      	bhi.n	8004754 <UART_SetConfig+0x180>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <UART_SetConfig+0x168>
 8004736:	2b10      	cmp	r3, #16
 8004738:	d006      	beq.n	8004748 <UART_SetConfig+0x174>
 800473a:	e00b      	b.n	8004754 <UART_SetConfig+0x180>
 800473c:	2300      	movs	r3, #0
 800473e:	76fb      	strb	r3, [r7, #27]
 8004740:	e089      	b.n	8004856 <UART_SetConfig+0x282>
 8004742:	2302      	movs	r3, #2
 8004744:	76fb      	strb	r3, [r7, #27]
 8004746:	e086      	b.n	8004856 <UART_SetConfig+0x282>
 8004748:	2304      	movs	r3, #4
 800474a:	76fb      	strb	r3, [r7, #27]
 800474c:	e083      	b.n	8004856 <UART_SetConfig+0x282>
 800474e:	2308      	movs	r3, #8
 8004750:	76fb      	strb	r3, [r7, #27]
 8004752:	e080      	b.n	8004856 <UART_SetConfig+0x282>
 8004754:	2310      	movs	r3, #16
 8004756:	76fb      	strb	r3, [r7, #27]
 8004758:	e07d      	b.n	8004856 <UART_SetConfig+0x282>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a5b      	ldr	r2, [pc, #364]	; (80048cc <UART_SetConfig+0x2f8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d120      	bne.n	80047a6 <UART_SetConfig+0x1d2>
 8004764:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <UART_SetConfig+0x2ec>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800476e:	2bc0      	cmp	r3, #192	; 0xc0
 8004770:	d013      	beq.n	800479a <UART_SetConfig+0x1c6>
 8004772:	2bc0      	cmp	r3, #192	; 0xc0
 8004774:	d814      	bhi.n	80047a0 <UART_SetConfig+0x1cc>
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d009      	beq.n	800478e <UART_SetConfig+0x1ba>
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d810      	bhi.n	80047a0 <UART_SetConfig+0x1cc>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x1b4>
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d006      	beq.n	8004794 <UART_SetConfig+0x1c0>
 8004786:	e00b      	b.n	80047a0 <UART_SetConfig+0x1cc>
 8004788:	2300      	movs	r3, #0
 800478a:	76fb      	strb	r3, [r7, #27]
 800478c:	e063      	b.n	8004856 <UART_SetConfig+0x282>
 800478e:	2302      	movs	r3, #2
 8004790:	76fb      	strb	r3, [r7, #27]
 8004792:	e060      	b.n	8004856 <UART_SetConfig+0x282>
 8004794:	2304      	movs	r3, #4
 8004796:	76fb      	strb	r3, [r7, #27]
 8004798:	e05d      	b.n	8004856 <UART_SetConfig+0x282>
 800479a:	2308      	movs	r3, #8
 800479c:	76fb      	strb	r3, [r7, #27]
 800479e:	e05a      	b.n	8004856 <UART_SetConfig+0x282>
 80047a0:	2310      	movs	r3, #16
 80047a2:	76fb      	strb	r3, [r7, #27]
 80047a4:	e057      	b.n	8004856 <UART_SetConfig+0x282>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <UART_SetConfig+0x2fc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d125      	bne.n	80047fc <UART_SetConfig+0x228>
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <UART_SetConfig+0x2ec>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d017      	beq.n	80047f0 <UART_SetConfig+0x21c>
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d817      	bhi.n	80047f6 <UART_SetConfig+0x222>
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	d00b      	beq.n	80047e4 <UART_SetConfig+0x210>
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d811      	bhi.n	80047f6 <UART_SetConfig+0x222>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <UART_SetConfig+0x20a>
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047da:	d006      	beq.n	80047ea <UART_SetConfig+0x216>
 80047dc:	e00b      	b.n	80047f6 <UART_SetConfig+0x222>
 80047de:	2300      	movs	r3, #0
 80047e0:	76fb      	strb	r3, [r7, #27]
 80047e2:	e038      	b.n	8004856 <UART_SetConfig+0x282>
 80047e4:	2302      	movs	r3, #2
 80047e6:	76fb      	strb	r3, [r7, #27]
 80047e8:	e035      	b.n	8004856 <UART_SetConfig+0x282>
 80047ea:	2304      	movs	r3, #4
 80047ec:	76fb      	strb	r3, [r7, #27]
 80047ee:	e032      	b.n	8004856 <UART_SetConfig+0x282>
 80047f0:	2308      	movs	r3, #8
 80047f2:	76fb      	strb	r3, [r7, #27]
 80047f4:	e02f      	b.n	8004856 <UART_SetConfig+0x282>
 80047f6:	2310      	movs	r3, #16
 80047f8:	76fb      	strb	r3, [r7, #27]
 80047fa:	e02c      	b.n	8004856 <UART_SetConfig+0x282>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2d      	ldr	r2, [pc, #180]	; (80048b8 <UART_SetConfig+0x2e4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d125      	bne.n	8004852 <UART_SetConfig+0x27e>
 8004806:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <UART_SetConfig+0x2ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004814:	d017      	beq.n	8004846 <UART_SetConfig+0x272>
 8004816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800481a:	d817      	bhi.n	800484c <UART_SetConfig+0x278>
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d00b      	beq.n	800483a <UART_SetConfig+0x266>
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d811      	bhi.n	800484c <UART_SetConfig+0x278>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <UART_SetConfig+0x260>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d006      	beq.n	8004840 <UART_SetConfig+0x26c>
 8004832:	e00b      	b.n	800484c <UART_SetConfig+0x278>
 8004834:	2300      	movs	r3, #0
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	e00d      	b.n	8004856 <UART_SetConfig+0x282>
 800483a:	2302      	movs	r3, #2
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e00a      	b.n	8004856 <UART_SetConfig+0x282>
 8004840:	2304      	movs	r3, #4
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e007      	b.n	8004856 <UART_SetConfig+0x282>
 8004846:	2308      	movs	r3, #8
 8004848:	76fb      	strb	r3, [r7, #27]
 800484a:	e004      	b.n	8004856 <UART_SetConfig+0x282>
 800484c:	2310      	movs	r3, #16
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	e001      	b.n	8004856 <UART_SetConfig+0x282>
 8004852:	2310      	movs	r3, #16
 8004854:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <UART_SetConfig+0x2e4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	f040 8087 	bne.w	8004970 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004862:	7efb      	ldrb	r3, [r7, #27]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d837      	bhi.n	80048d8 <UART_SetConfig+0x304>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x29c>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004895 	.word	0x08004895
 8004874:	080048d9 	.word	0x080048d9
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048d9 	.word	0x080048d9
 8004880:	080048a3 	.word	0x080048a3
 8004884:	080048d9 	.word	0x080048d9
 8004888:	080048d9 	.word	0x080048d9
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7fe ffc0 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8004898:	6178      	str	r0, [r7, #20]
        break;
 800489a:	e022      	b.n	80048e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <UART_SetConfig+0x300>)
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e01f      	b.n	80048e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fe ff21 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80048a6:	6178      	str	r0, [r7, #20]
        break;
 80048a8:	e01b      	b.n	80048e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	617b      	str	r3, [r7, #20]
        break;
 80048b0:	e017      	b.n	80048e2 <UART_SetConfig+0x30e>
 80048b2:	bf00      	nop
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40008000 	.word	0x40008000
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40004400 	.word	0x40004400
 80048c8:	40004800 	.word	0x40004800
 80048cc:	40004c00 	.word	0x40004c00
 80048d0:	40005000 	.word	0x40005000
 80048d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	76bb      	strb	r3, [r7, #26]
        break;
 80048e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80f1 	beq.w	8004acc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d305      	bcc.n	8004906 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	429a      	cmp	r2, r3
 8004904:	d902      	bls.n	800490c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	76bb      	strb	r3, [r7, #26]
 800490a:	e0df      	b.n	8004acc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4618      	mov	r0, r3
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	020b      	lsls	r3, r1, #8
 800491e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004922:	0202      	lsls	r2, r0, #8
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	6849      	ldr	r1, [r1, #4]
 8004928:	0849      	lsrs	r1, r1, #1
 800492a:	4608      	mov	r0, r1
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	1814      	adds	r4, r2, r0
 8004932:	eb43 0501 	adc.w	r5, r3, r1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	4620      	mov	r0, r4
 8004942:	4629      	mov	r1, r5
 8004944:	f7fb fc94 	bl	8000270 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4613      	mov	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004956:	d308      	bcc.n	800496a <UART_SetConfig+0x396>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d204      	bcs.n	800496a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e0b0      	b.n	8004acc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	76bb      	strb	r3, [r7, #26]
 800496e:	e0ad      	b.n	8004acc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	d15c      	bne.n	8004a34 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800497a:	7efb      	ldrb	r3, [r7, #27]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d828      	bhi.n	80049d2 <UART_SetConfig+0x3fe>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <UART_SetConfig+0x3b4>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049bd 	.word	0x080049bd
 8004994:	080049d3 	.word	0x080049d3
 8004998:	080049c3 	.word	0x080049c3
 800499c:	080049d3 	.word	0x080049d3
 80049a0:	080049d3 	.word	0x080049d3
 80049a4:	080049d3 	.word	0x080049d3
 80049a8:	080049cb 	.word	0x080049cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7fe ff34 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80049b0:	6178      	str	r0, [r7, #20]
        break;
 80049b2:	e013      	b.n	80049dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b4:	f7fe ff46 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80049b8:	6178      	str	r0, [r7, #20]
        break;
 80049ba:	e00f      	b.n	80049dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049bc:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <UART_SetConfig+0x510>)
 80049be:	617b      	str	r3, [r7, #20]
        break;
 80049c0:	e00c      	b.n	80049dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c2:	f7fe fe91 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80049c6:	6178      	str	r0, [r7, #20]
        break;
 80049c8:	e008      	b.n	80049dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ce:	617b      	str	r3, [r7, #20]
        break;
 80049d0:	e004      	b.n	80049dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	76bb      	strb	r3, [r7, #26]
        break;
 80049da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d074      	beq.n	8004acc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	005a      	lsls	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	441a      	add	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b0f      	cmp	r3, #15
 80049fe:	d916      	bls.n	8004a2e <UART_SetConfig+0x45a>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d212      	bcs.n	8004a2e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f023 030f 	bic.w	r3, r3, #15
 8004a10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	89fb      	ldrh	r3, [r7, #14]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	89fa      	ldrh	r2, [r7, #14]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e04e      	b.n	8004acc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	76bb      	strb	r3, [r7, #26]
 8004a32:	e04b      	b.n	8004acc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a34:	7efb      	ldrb	r3, [r7, #27]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d827      	bhi.n	8004a8a <UART_SetConfig+0x4b6>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x46c>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a7b 	.word	0x08004a7b
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fe fed8 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8004a68:	6178      	str	r0, [r7, #20]
        break;
 8004a6a:	e013      	b.n	8004a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7fe feea 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8004a70:	6178      	str	r0, [r7, #20]
        break;
 8004a72:	e00f      	b.n	8004a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <UART_SetConfig+0x510>)
 8004a76:	617b      	str	r3, [r7, #20]
        break;
 8004a78:	e00c      	b.n	8004a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fe fe35 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8004a7e:	6178      	str	r0, [r7, #20]
        break;
 8004a80:	e008      	b.n	8004a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	617b      	str	r3, [r7, #20]
        break;
 8004a88:	e004      	b.n	8004a94 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	76bb      	strb	r3, [r7, #26]
        break;
 8004a92:	bf00      	nop
    }

    if (pclk != 0U)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085a      	lsrs	r2, r3, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d908      	bls.n	8004ac8 <UART_SetConfig+0x4f4>
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d204      	bcs.n	8004ac8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e001      	b.n	8004acc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ad8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	00f42400 	.word	0x00f42400

08004ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be6:	d10a      	bne.n	8004bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c3c:	f7fc ffc0 	bl	8001bc0 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d10e      	bne.n	8004c6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f82d 	bl	8004cbe <UART_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e023      	b.n	8004cb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d10e      	bne.n	8004c9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f817 	bl	8004cbe <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00d      	b.n	8004cb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cce:	e05e      	b.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd6:	d05a      	beq.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd8:	f7fc ff72 	bl	8001bc0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11b      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cfc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e043      	b.n	8004dae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d02c      	beq.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d42:	d124      	bne.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d4c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d5c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e00f      	b.n	8004dae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d091      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db6:	b084      	sub	sp, #16
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	f107 001c 	add.w	r0, r7, #28
 8004dc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa23 	bl	8005220 <USB_CoreReset>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
 8004df0:	e005      	b.n	8004dfe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e0a:	b004      	add	sp, #16
 8004e0c:	4770      	bx	lr

08004e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d106      	bne.n	8004e5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]
 8004e5a:	e00b      	b.n	8004e74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e001      	b.n	8004e74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e003      	b.n	8004e7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e74:	2032      	movs	r0, #50	; 0x32
 8004e76:	f7fc feaf 	bl	8001bd8 <HAL_Delay>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e84:	b084      	sub	sp, #16
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b086      	sub	sp, #24
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e009      	b.n	8004eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3340      	adds	r3, #64	; 0x40
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b0e      	cmp	r3, #14
 8004ebc:	d9f2      	bls.n	8004ea4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11c      	bne.n	8004efe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed2:	f043 0302 	orr.w	r3, r3, #2
 8004ed6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e005      	b.n	8004f0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	461a      	mov	r2, r3
 8004f26:	680b      	ldr	r3, [r1, #0]
 8004f28:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f2a:	2103      	movs	r1, #3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f93d 	bl	80051ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f32:	2110      	movs	r1, #16
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8f1 	bl	800511c <USB_FlushTxFifo>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f90f 	bl	8005168 <USB_FlushRxFifo>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	461a      	mov	r2, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	461a      	mov	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e043      	b.n	8005006 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f94:	d118      	bne.n	8004fc8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e013      	b.n	8004fda <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e008      	b.n	8004fda <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d3b7      	bcc.n	8004f7e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e043      	b.n	800509c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502a:	d118      	bne.n	800505e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e013      	b.n	8005070 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e008      	b.n	8005070 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	461a      	mov	r2, r3
 800507e:	2300      	movs	r3, #0
 8005080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	461a      	mov	r2, r3
 8005090:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005094:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3301      	adds	r3, #1
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d3b7      	bcc.n	8005014 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f043 0210 	orr.w	r2, r3, #16
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <USB_DevInit+0x294>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f043 0208 	orr.w	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005106:	7dfb      	ldrb	r3, [r7, #23]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005112:	b004      	add	sp, #16
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	803c3800 	.word	0x803c3800

0800511c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <USB_FlushTxFifo+0x48>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e006      	b.n	8005156 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b20      	cmp	r3, #32
 8005152:	d0f0      	beq.n	8005136 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	00030d40 	.word	0x00030d40

08005168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2210      	movs	r2, #16
 8005178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3301      	adds	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <USB_FlushRxFifo+0x40>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e006      	b.n	800519a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b10      	cmp	r3, #16
 8005196:	d0f0      	beq.n	800517a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	00030d40 	.word	0x00030d40

080051ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051f8:	f023 0303 	bic.w	r3, r3, #3
 80051fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <USB_CoreReset+0x64>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e01b      	b.n	8005276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	daf2      	bge.n	800522c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f043 0201 	orr.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <USB_CoreReset+0x64>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e006      	b.n	8005276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d0f0      	beq.n	8005256 <USB_CoreReset+0x36>

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	00030d40 	.word	0x00030d40

08005288 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_SINEWAVE_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005298:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800529a:	461a      	mov	r2, r3
        err.type, err.code);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	4806      	ldr	r0, [pc, #24]	; (80052c0 <ai_log_err+0x38>)
 80052a6:	f002 fc5f 	bl	8007b68 <iprintf>
 80052aa:	e008      	b.n	80052be <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80052ac:	793b      	ldrb	r3, [r7, #4]
 80052ae:	4619      	mov	r1, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80052b6:	461a      	mov	r2, r3
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <ai_log_err+0x3c>)
 80052ba:	f002 fc55 	bl	8007b68 <iprintf>

  do {} while (1);
 80052be:	e7fe      	b.n	80052be <ai_log_err+0x36>
 80052c0:	08008a20 	.word	0x08008a20
 80052c4:	08008a54 	.word	0x08008a54

080052c8 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b090      	sub	sp, #64	; 0x40
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_sinewave_create(&sinewave, AI_SINEWAVE_DATA_CONFIG);
 80052d2:	2100      	movs	r1, #0
 80052d4:	4837      	ldr	r0, [pc, #220]	; (80053b4 <ai_boostrap+0xec>)
 80052d6:	f000 fa8d 	bl	80057f4 <ai_sinewave_create>
 80052da:	4603      	mov	r3, r0
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80052de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d006      	beq.n	80052f4 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_sinewave_create");
 80052e6:	4934      	ldr	r1, [pc, #208]	; (80053b8 <ai_boostrap+0xf0>)
 80052e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052ea:	f7ff ffcd 	bl	8005288 <ai_log_err>
    return -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f2:	e05b      	b.n	80053ac <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80052f4:	4b31      	ldr	r3, [pc, #196]	; (80053bc <ai_boostrap+0xf4>)
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	2301      	movs	r3, #1
 80052fa:	823b      	strh	r3, [r7, #16]
 80052fc:	2301      	movs	r3, #1
 80052fe:	827b      	strh	r3, [r7, #18]
 8005300:	2301      	movs	r3, #1
 8005302:	82bb      	strh	r3, [r7, #20]
 8005304:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	2300      	movs	r3, #0
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <ai_boostrap+0xf8>)
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	2301      	movs	r3, #1
 8005318:	853b      	strh	r3, [r7, #40]	; 0x28
 800531a:	2301      	movs	r3, #1
 800531c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800531e:	2301      	movs	r3, #1
 8005320:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005322:	2320      	movs	r3, #32
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	2300      	movs	r3, #0
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_SINEWAVE_DATA_WEIGHTS(w_addr),
      AI_SINEWAVE_DATA_ACTIVATIONS(act_addr) );

  if (!ai_sinewave_init(sinewave, &params)) {
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <ai_boostrap+0xec>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f107 020c 	add.w	r2, r7, #12
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fa7d 	bl	8005838 <ai_sinewave_init>
 800533e:	4603      	mov	r3, r0
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <ai_boostrap+0x9e>
      err = ai_sinewave_get_error(sinewave);
 800534a:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <ai_boostrap+0xec>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fa44 	bl	80057dc <ai_sinewave_get_error>
 8005354:	4603      	mov	r3, r0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_sinewave_init");
 8005358:	491a      	ldr	r1, [pc, #104]	; (80053c4 <ai_boostrap+0xfc>)
 800535a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800535c:	f7ff ff94 	bl	8005288 <ai_log_err>
      return -1;
 8005360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005364:	e022      	b.n	80053ac <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_sinewave_get_info(sinewave, &sinewave_info)) {
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <ai_boostrap+0xec>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4917      	ldr	r1, [pc, #92]	; (80053c8 <ai_boostrap+0x100>)
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f9d7 	bl	8005720 <ai_sinewave_get_info>
 8005372:	4603      	mov	r3, r0
 8005374:	f083 0301 	eor.w	r3, r3, #1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d015      	beq.n	80053aa <ai_boostrap+0xe2>
    err = ai_sinewave_get_error(sinewave);
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <ai_boostrap+0xec>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa2a 	bl	80057dc <ai_sinewave_get_error>
 8005388:	4603      	mov	r3, r0
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_sinewave_get_error");
 800538c:	490f      	ldr	r1, [pc, #60]	; (80053cc <ai_boostrap+0x104>)
 800538e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005390:	f7ff ff7a 	bl	8005288 <ai_log_err>
    ai_sinewave_destroy(sinewave);
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <ai_boostrap+0xec>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fa41 	bl	8005820 <ai_sinewave_destroy>
    sinewave = AI_HANDLE_NULL;
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <ai_boostrap+0xec>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
    return -3;
 80053a4:	f06f 0302 	mvn.w	r3, #2
 80053a8:	e000      	b.n	80053ac <ai_boostrap+0xe4>
  }

  return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3740      	adds	r7, #64	; 0x40
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000574 	.word	0x20000574
 80053b8:	08008a84 	.word	0x08008a84
 80053bc:	40040440 	.word	0x40040440
 80053c0:	00040440 	.word	0x00040440
 80053c4:	08008a98 	.word	0x08008a98
 80053c8:	20000578 	.word	0x20000578
 80053cc:	08008aac 	.word	0x08008aac

080053d0 <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = sinewave_info.inputs;
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <ai_run+0x5c>)
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = sinewave_info.outputs;
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <ai_run+0x5c>)
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	611a      	str	r2, [r3, #16]

  batch = ai_sinewave_run(sinewave, ai_input, ai_output);
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <ai_run+0x60>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa58 	bl	80058b0 <ai_sinewave_run>
 8005400:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d00c      	beq.n	8005422 <ai_run+0x52>
    ai_log_err(ai_sinewave_get_error(sinewave),
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <ai_run+0x60>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 f9e5 	bl	80057dc <ai_sinewave_get_error>
 8005412:	4603      	mov	r3, r0
 8005414:	4907      	ldr	r1, [pc, #28]	; (8005434 <ai_run+0x64>)
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff36 	bl	8005288 <ai_log_err>
        "ai_sinewave_run");
    return -1;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005420:	e000      	b.n	8005424 <ai_run+0x54>
  }

  return 0;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000578 	.word	0x20000578
 8005430:	20000574 	.word	0x20000574
 8005434:	08008ac4 	.word	0x08008ac4

08005438 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void * data)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	static uint8_t position = 0;
	uint8_t *Value = data;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

	*Value = position;
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <acquire_and_process_data+0x30>)
 8005446:	781a      	ldrb	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]

	position++;
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <acquire_and_process_data+0x30>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <acquire_and_process_data+0x30>)
 8005456:	701a      	strb	r2, [r3, #0]

  return 0;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000611 	.word	0x20000611

0800546c <post_process>:

int post_process(void * data)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	uint8_t * Value = data;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]

	if(*Value >= 128)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b25b      	sxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	da06      	bge.n	8005490 <post_process+0x24>
	{
		*Value -= 128;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	3b80      	subs	r3, #128	; 0x80
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e005      	b.n	800549c <post_process+0x30>
	}
	else
	{
		*Value += 128;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	3b80      	subs	r3, #128	; 0x80
 8005496:	b2da      	uxtb	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	701a      	strb	r2, [r3, #0]
	}

  return 0;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <MX_X_CUBE_AI_Init+0x1c>)
 80054b2:	f002 fbdf 	bl	8007c74 <puts>

  ai_boostrap(ai_sinewave_data_weights_get(), activations);
 80054b6:	f000 fa0b 	bl	80058d0 <ai_sinewave_data_weights_get>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4903      	ldr	r1, [pc, #12]	; (80054cc <MX_X_CUBE_AI_Init+0x20>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ff02 	bl	80052c8 <ai_boostrap>
    /* USER CODE END 5 */
}
 80054c4:	bf00      	nop
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	08008ad4 	.word	0x08008ad4
 80054cc:	200005ec 	.word	0x200005ec

080054d0 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054da:	617b      	str	r3, [r7, #20]
  uint8_t *in_data = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  uint8_t *out_data = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

  printf("TEMPLATE - run - main loop\r\n");
 80054e4:	482a      	ldr	r0, [pc, #168]	; (8005590 <MX_X_CUBE_AI_Process+0xc0>)
 80054e6:	f002 fbc5 	bl	8007c74 <puts>

  if (sinewave) {
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <MX_X_CUBE_AI_Process+0xc4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d03d      	beq.n	800556e <MX_X_CUBE_AI_Process+0x9e>

    if ((sinewave_info.n_inputs != 1) || (sinewave_info.n_outputs != 1)) {
 80054f2:	4b29      	ldr	r3, [pc, #164]	; (8005598 <MX_X_CUBE_AI_Process+0xc8>)
 80054f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d103      	bne.n	8005502 <MX_X_CUBE_AI_Process+0x32>
 80054fa:	4b27      	ldr	r3, [pc, #156]	; (8005598 <MX_X_CUBE_AI_Process+0xc8>)
 80054fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d00b      	beq.n	800551a <MX_X_CUBE_AI_Process+0x4a>
      ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 8005502:	2314      	movs	r3, #20
 8005504:	723b      	strb	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2220      	movs	r2, #32
 800550a:	f362 231f 	bfi	r3, r2, #8, #24
 800550e:	60bb      	str	r3, [r7, #8]
      ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 8005510:	4922      	ldr	r1, [pc, #136]	; (800559c <MX_X_CUBE_AI_Process+0xcc>)
 8005512:	68b8      	ldr	r0, [r7, #8]
 8005514:	f7ff feb8 	bl	8005288 <ai_log_err>
 8005518:	e037      	b.n	800558a <MX_X_CUBE_AI_Process+0xba>
    /* 1 - Set the I/O data buffer */

#if AI_SINEWAVE_INPUTS_IN_ACTIVATIONS
    in_data = sinewave_info.inputs[0].data;
#else
    in_data = in_data_s;
 800551a:	4b21      	ldr	r3, [pc, #132]	; (80055a0 <MX_X_CUBE_AI_Process+0xd0>)
 800551c:	613b      	str	r3, [r7, #16]
#endif

#if AI_SINEWAVE_OUTPUTS_IN_ACTIVATIONS
    out_data = sinewave_info.outputs[0].data;
#else
    out_data = out_data_s;
 800551e:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <MX_X_CUBE_AI_Process+0xd4>)
 8005520:	60fb      	str	r3, [r7, #12]
#endif

    if ((!in_data) || (!out_data)) {
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <MX_X_CUBE_AI_Process+0x5e>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <MX_X_CUBE_AI_Process+0x66>
      printf("TEMPLATE - I/O buffers are invalid\r\n");
 800552e:	481e      	ldr	r0, [pc, #120]	; (80055a8 <MX_X_CUBE_AI_Process+0xd8>)
 8005530:	f002 fba0 	bl	8007c74 <puts>
      return;
 8005534:	e029      	b.n	800558a <MX_X_CUBE_AI_Process+0xba>
    }

    /* 2 - main loop */
    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(in_data);
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f7ff ff7e 	bl	8005438 <acquire_and_process_data>
 800553c:	6178      	str	r0, [r7, #20]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <MX_X_CUBE_AI_Process+0x7e>
        res = ai_run(in_data, out_data);
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f7ff ff42 	bl	80053d0 <ai_run>
 800554c:	6178      	str	r0, [r7, #20]
      /* 3- post-process the predictions */
      if (res == 0)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <MX_X_CUBE_AI_Process+0x98>
      {
        res = post_process(out_data);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff ff89 	bl	800546c <post_process>
 800555a:	6178      	str	r0, [r7, #20]
        printf("%d\r\n", *out_data);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	4812      	ldr	r0, [pc, #72]	; (80055ac <MX_X_CUBE_AI_Process+0xdc>)
 8005564:	f002 fb00 	bl	8007b68 <iprintf>
      }
    } while (res==0);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0e3      	beq.n	8005536 <MX_X_CUBE_AI_Process+0x66>
  }

  if (res) {
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <MX_X_CUBE_AI_Process+0xba>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8005574:	2311      	movs	r3, #17
 8005576:	713b      	strb	r3, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2210      	movs	r2, #16
 800557c:	f362 231f 	bfi	r3, r2, #8, #24
 8005580:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 8005582:	490b      	ldr	r1, [pc, #44]	; (80055b0 <MX_X_CUBE_AI_Process+0xe0>)
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fe7f 	bl	8005288 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	08008af4 	.word	0x08008af4
 8005594:	20000574 	.word	0x20000574
 8005598:	20000578 	.word	0x20000578
 800559c:	08008b10 	.word	0x08008b10
 80055a0:	2000060c 	.word	0x2000060c
 80055a4:	20000610 	.word	0x20000610
 80055a8:	08008b58 	.word	0x08008b58
 80055ac:	08008b7c 	.word	0x08008b7c
 80055b0:	08008b84 	.word	0x08008b84

080055b4 <sinewave_configure_activations>:


AI_DECLARE_STATIC
ai_bool sinewave_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	2101      	movs	r1, #1
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f9c2 	bl	8005954 <ai_platform_get_activations_map>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01b      	beq.n	800560e <sinewave_configure_activations+0x5a>
    /* Updating activations (byte) offsets */
    serving_default_dense_2_input0_int8_output_array.data = AI_PTR(NULL);
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <sinewave_configure_activations+0x64>)
 80055d8:	2200      	movs	r2, #0
 80055da:	609a      	str	r2, [r3, #8]
    serving_default_dense_2_input0_int8_output_array.data_start = AI_PTR(NULL);
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <sinewave_configure_activations+0x64>)
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations_map[0] + 0);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a0d      	ldr	r2, [pc, #52]	; (800561c <sinewave_configure_activations+0x68>)
 80055e6:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <sinewave_configure_activations+0x68>)
 80055ec:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 16);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3310      	adds	r3, #16
 80055f2:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <sinewave_configure_activations+0x6c>)
 80055f4:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 16);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3310      	adds	r3, #16
 80055fa:	4a09      	ldr	r2, [pc, #36]	; (8005620 <sinewave_configure_activations+0x6c>)
 80055fc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <sinewave_configure_activations+0x70>)
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <sinewave_configure_activations+0x70>)
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
    
    return true;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <sinewave_configure_activations+0x5c>
  }
  return false;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	2000000c 	.word	0x2000000c
 800561c:	2000001c 	.word	0x2000001c
 8005620:	2000002c 	.word	0x2000002c
 8005624:	2000003c 	.word	0x2000003c

08005628 <sinewave_configure_weights>:


AI_DECLARE_STATIC
ai_bool sinewave_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	2101      	movs	r1, #1
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f954 	bl	80058ec <ai_platform_get_weights_map>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d059      	beq.n	80056fe <sinewave_configure_weights+0xd6>
    /* Updating weights with array addresses */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800564a:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <sinewave_configure_weights+0xe0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <sinewave_configure_weights+0xe0>)
 8005654:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a2b      	ldr	r2, [pc, #172]	; (8005708 <sinewave_configure_weights+0xe0>)
 800565a:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <sinewave_configure_weights+0xe0>)
 8005660:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005662:	4b2a      	ldr	r3, [pc, #168]	; (800570c <sinewave_configure_weights+0xe4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <sinewave_configure_weights+0xe4>)
 800566c:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights_map[0] + 16);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3310      	adds	r3, #16
 8005672:	4a26      	ldr	r2, [pc, #152]	; (800570c <sinewave_configure_weights+0xe4>)
 8005674:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights_map[0] + 16);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3310      	adds	r3, #16
 800567a:	4a24      	ldr	r2, [pc, #144]	; (800570c <sinewave_configure_weights+0xe4>)
 800567c:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800567e:	4b24      	ldr	r3, [pc, #144]	; (8005710 <sinewave_configure_weights+0xe8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005686:	4a22      	ldr	r2, [pc, #136]	; (8005710 <sinewave_configure_weights+0xe8>)
 8005688:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 80);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3350      	adds	r3, #80	; 0x50
 800568e:	4a20      	ldr	r2, [pc, #128]	; (8005710 <sinewave_configure_weights+0xe8>)
 8005690:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 80);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3350      	adds	r3, #80	; 0x50
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <sinewave_configure_weights+0xe8>)
 8005698:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <sinewave_configure_weights+0xec>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <sinewave_configure_weights+0xec>)
 80056a4:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 336);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <sinewave_configure_weights+0xec>)
 80056ae:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 336);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056b6:	4a17      	ldr	r2, [pc, #92]	; (8005714 <sinewave_configure_weights+0xec>)
 80056b8:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80056ba:	4b17      	ldr	r3, [pc, #92]	; (8005718 <sinewave_configure_weights+0xf0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <sinewave_configure_weights+0xf0>)
 80056c4:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights_map[0] + 400);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80056cc:	4a12      	ldr	r2, [pc, #72]	; (8005718 <sinewave_configure_weights+0xf0>)
 80056ce:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights_map[0] + 400);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <sinewave_configure_weights+0xf0>)
 80056d8:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <sinewave_configure_weights+0xf4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056e2:	4a0e      	ldr	r2, [pc, #56]	; (800571c <sinewave_configure_weights+0xf4>)
 80056e4:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights_map[0] + 416);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80056ec:	4a0b      	ldr	r2, [pc, #44]	; (800571c <sinewave_configure_weights+0xf4>)
 80056ee:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights_map[0] + 416);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <sinewave_configure_weights+0xf4>)
 80056f8:	60d3      	str	r3, [r2, #12]
    return true;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <sinewave_configure_weights+0xd8>
  }
  return false;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000004c 	.word	0x2000004c
 800570c:	2000005c 	.word	0x2000005c
 8005710:	2000006c 	.word	0x2000006c
 8005714:	2000007c 	.word	0x2000007c
 8005718:	2000008c 	.word	0x2000008c
 800571c:	2000009c 	.word	0x2000009c

08005720 <ai_sinewave_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_sinewave_get_info(
  ai_handle network, ai_network_report* report)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b0a0      	sub	sp, #128	; 0x80
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa72 	bl	8005c14 <ai_platform_context_acquire>
 8005730:	67f8      	str	r0, [r7, #124]	; 0x7c

  if (report && net_ctx)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d041      	beq.n	80057bc <ai_sinewave_get_info+0x9c>
 8005738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03e      	beq.n	80057bc <ai_sinewave_get_info+0x9c>
  {
    ai_network_report r = {
 800573e:	f107 0308 	add.w	r3, r7, #8
 8005742:	2274      	movs	r2, #116	; 0x74
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f002 f95c 	bl	8007a04 <memset>
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <ai_sinewave_get_info+0xa8>)
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <ai_sinewave_get_info+0xac>)
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <ai_sinewave_get_info+0xb0>)
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <ai_sinewave_get_info+0xb4>)
 800575a:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_SINEWAVE_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800575c:	f000 f92e 	bl	80059bc <ai_platform_runtime_get_revision>
 8005760:	4603      	mov	r3, r0
    ai_network_report r = {
 8005762:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005764:	f000 f96c 	bl	8005a40 <ai_platform_runtime_get_version>
 8005768:	4603      	mov	r3, r0
 800576a:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <ai_sinewave_get_info+0xb8>)
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	2307      	movs	r3, #7
 8005772:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005776:	f000 f9a5 	bl	8005ac4 <ai_platform_api_get_version>
 800577a:	4603      	mov	r3, r0
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800577e:	f000 f9f5 	bl	8005b6c <ai_platform_interface_api_get_version>
 8005782:	4603      	mov	r3, r0
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8005786:	f240 1341 	movw	r3, #321	; 0x141
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800578c:	f107 0308 	add.w	r3, r7, #8
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fb00 	bl	8005d98 <ai_platform_api_get_network_report>
 8005798:	4603      	mov	r3, r0
 800579a:	f083 0301 	eor.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <ai_sinewave_get_info+0x88>
 80057a4:	2300      	movs	r3, #0
 80057a6:	e00a      	b.n	80057be <ai_sinewave_get_info+0x9e>

    *report = r;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f107 0308 	add.w	r3, r7, #8
 80057b0:	2274      	movs	r2, #116	; 0x74
 80057b2:	4619      	mov	r1, r3
 80057b4:	f002 f918 	bl	80079e8 <memcpy>
    return true;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <ai_sinewave_get_info+0x9e>
  }
  return false;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3780      	adds	r7, #128	; 0x80
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	08008b98 	.word	0x08008b98
 80057cc:	08008ba4 	.word	0x08008ba4
 80057d0:	08008bc8 	.word	0x08008bc8
 80057d4:	08008be4 	.word	0x08008be4
 80057d8:	08008bfc 	.word	0x08008bfc

080057dc <ai_sinewave_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_sinewave_get_error(ai_handle network)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa5d 	bl	8005ca4 <ai_platform_network_get_error>
 80057ea:	4603      	mov	r3, r0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <ai_sinewave_create>:

AI_API_ENTRY
ai_error ai_sinewave_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80057fe:	2300      	movs	r3, #0
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	2304      	movs	r3, #4
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2301      	movs	r3, #1
 8005808:	4a04      	ldr	r2, [pc, #16]	; (800581c <ai_sinewave_create+0x28>)
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fd65 	bl	80062dc <ai_platform_network_create>
 8005812:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000480 	.word	0x20000480

08005820 <ai_sinewave_destroy>:

AI_API_ENTRY
ai_handle ai_sinewave_destroy(ai_handle network)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fe2d 	bl	8006488 <ai_platform_network_destroy>
 800582e:	4603      	mov	r3, r0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <ai_sinewave_init>:

AI_API_ENTRY
ai_bool ai_sinewave_init(
  ai_handle network, const ai_network_params* params)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fe97 	bl	8006578 <ai_platform_network_init>
 800584a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <ai_sinewave_init+0x1e>
 8005852:	2300      	movs	r3, #0
 8005854:	e028      	b.n	80058a8 <ai_sinewave_init+0x70>

  ai_bool ok = true;
 8005856:	2301      	movs	r3, #1
 8005858:	72fb      	strb	r3, [r7, #11]
  ok &= sinewave_configure_weights(net_ctx, params);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fee3 	bl	8005628 <sinewave_configure_weights>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	7afb      	ldrb	r3, [r7, #11]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	bf14      	ite	ne
 800586e:	2301      	movne	r3, #1
 8005870:	2300      	moveq	r3, #0
 8005872:	72fb      	strb	r3, [r7, #11]
  ok &= sinewave_configure_activations(net_ctx, params);
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fe9c 	bl	80055b4 <sinewave_configure_activations>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 ff84 	bl	800679c <ai_platform_network_post_init>
 8005894:	4603      	mov	r3, r0
 8005896:	461a      	mov	r2, r3
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <ai_sinewave_run>:


AI_API_ENTRY
ai_i32 ai_sinewave_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 ffff 	bl	80068c4 <ai_platform_network_process>
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <ai_sinewave_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sinewave_data_weights_get(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_sinewave_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_sinewave_weights_map);
 80058d4:	4b02      	ldr	r3, [pc, #8]	; (80058e0 <ai_sinewave_data_weights_get+0x10>)

}
 80058d6:	4618      	mov	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	08008f08 	.word	0x08008f08

080058e4 <_ai_platform_acquire_crc>:
 80058e4:	2001      	movs	r0, #1
 80058e6:	4770      	bx	lr

080058e8 <_ai_platform_release_crc>:
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop

080058ec <ai_platform_get_weights_map>:
 80058ec:	b132      	cbz	r2, 80058fc <ai_platform_get_weights_map+0x10>
 80058ee:	6912      	ldr	r2, [r2, #16]
 80058f0:	b122      	cbz	r2, 80058fc <ai_platform_get_weights_map+0x10>
 80058f2:	b110      	cbz	r0, 80058fa <ai_platform_get_weights_map+0xe>
 80058f4:	b921      	cbnz	r1, 8005900 <ai_platform_get_weights_map+0x14>
 80058f6:	4608      	mov	r0, r1
 80058f8:	4770      	bx	lr
 80058fa:	4770      	bx	lr
 80058fc:	4610      	mov	r0, r2
 80058fe:	4770      	bx	lr
 8005900:	b470      	push	{r4, r5, r6}
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <ai_platform_get_weights_map+0x64>)
 8005904:	6815      	ldr	r5, [r2, #0]
 8005906:	429d      	cmp	r5, r3
 8005908:	d007      	beq.n	800591a <ai_platform_get_weights_map+0x2e>
 800590a:	6002      	str	r2, [r0, #0]
 800590c:	f1a1 0001 	sub.w	r0, r1, #1
 8005910:	fab0 f080 	clz	r0, r0
 8005914:	0940      	lsrs	r0, r0, #5
 8005916:	bc70      	pop	{r4, r5, r6}
 8005918:	4770      	bx	lr
 800591a:	6854      	ldr	r4, [r2, #4]
 800591c:	42ac      	cmp	r4, r5
 800591e:	f102 0204 	add.w	r2, r2, #4
 8005922:	d011      	beq.n	8005948 <ai_platform_get_weights_map+0x5c>
 8005924:	1f03      	subs	r3, r0, #4
 8005926:	4616      	mov	r6, r2
 8005928:	2000      	movs	r0, #0
 800592a:	e003      	b.n	8005934 <ai_platform_get_weights_map+0x48>
 800592c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8005930:	42ac      	cmp	r4, r5
 8005932:	d009      	beq.n	8005948 <ai_platform_get_weights_map+0x5c>
 8005934:	3001      	adds	r0, #1
 8005936:	4281      	cmp	r1, r0
 8005938:	f843 4f04 	str.w	r4, [r3, #4]!
 800593c:	d1f6      	bne.n	800592c <ai_platform_get_weights_map+0x40>
 800593e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <ai_platform_get_weights_map+0x64>)
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <ai_platform_get_weights_map+0x60>
 8005948:	2000      	movs	r0, #0
 800594a:	e7e4      	b.n	8005916 <ai_platform_get_weights_map+0x2a>
 800594c:	2001      	movs	r0, #1
 800594e:	e7e2      	b.n	8005916 <ai_platform_get_weights_map+0x2a>
 8005950:	a1facade 	.word	0xa1facade

08005954 <ai_platform_get_activations_map>:
 8005954:	b132      	cbz	r2, 8005964 <ai_platform_get_activations_map+0x10>
 8005956:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005958:	b122      	cbz	r2, 8005964 <ai_platform_get_activations_map+0x10>
 800595a:	b110      	cbz	r0, 8005962 <ai_platform_get_activations_map+0xe>
 800595c:	b921      	cbnz	r1, 8005968 <ai_platform_get_activations_map+0x14>
 800595e:	4608      	mov	r0, r1
 8005960:	4770      	bx	lr
 8005962:	4770      	bx	lr
 8005964:	4610      	mov	r0, r2
 8005966:	4770      	bx	lr
 8005968:	b470      	push	{r4, r5, r6}
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <ai_platform_get_activations_map+0x64>)
 800596c:	6815      	ldr	r5, [r2, #0]
 800596e:	429d      	cmp	r5, r3
 8005970:	d007      	beq.n	8005982 <ai_platform_get_activations_map+0x2e>
 8005972:	6002      	str	r2, [r0, #0]
 8005974:	f1a1 0001 	sub.w	r0, r1, #1
 8005978:	fab0 f080 	clz	r0, r0
 800597c:	0940      	lsrs	r0, r0, #5
 800597e:	bc70      	pop	{r4, r5, r6}
 8005980:	4770      	bx	lr
 8005982:	6854      	ldr	r4, [r2, #4]
 8005984:	42ac      	cmp	r4, r5
 8005986:	f102 0204 	add.w	r2, r2, #4
 800598a:	d011      	beq.n	80059b0 <ai_platform_get_activations_map+0x5c>
 800598c:	1f03      	subs	r3, r0, #4
 800598e:	4616      	mov	r6, r2
 8005990:	2000      	movs	r0, #0
 8005992:	e003      	b.n	800599c <ai_platform_get_activations_map+0x48>
 8005994:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8005998:	42ac      	cmp	r4, r5
 800599a:	d009      	beq.n	80059b0 <ai_platform_get_activations_map+0x5c>
 800599c:	3001      	adds	r0, #1
 800599e:	4281      	cmp	r1, r0
 80059a0:	f843 4f04 	str.w	r4, [r3, #4]!
 80059a4:	d1f6      	bne.n	8005994 <ai_platform_get_activations_map+0x40>
 80059a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80059aa:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <ai_platform_get_activations_map+0x64>)
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <ai_platform_get_activations_map+0x60>
 80059b0:	2000      	movs	r0, #0
 80059b2:	e7e4      	b.n	800597e <ai_platform_get_activations_map+0x2a>
 80059b4:	2001      	movs	r0, #1
 80059b6:	e7e2      	b.n	800597e <ai_platform_get_activations_map+0x2a>
 80059b8:	a1facade 	.word	0xa1facade

080059bc <ai_platform_runtime_get_revision>:
 80059bc:	b508      	push	{r3, lr}
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <ai_platform_runtime_get_revision+0x60>)
 80059c0:	6813      	ldr	r3, [r2, #0]
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	f7ff ff8c 	bl	80058e4 <_ai_platform_acquire_crc>
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <ai_platform_runtime_get_revision+0x64>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d8:	d00d      	beq.n	80059f6 <ai_platform_runtime_get_revision+0x3a>
 80059da:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <ai_platform_runtime_get_revision+0x68>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	d1fc      	bne.n	80059e0 <ai_platform_runtime_get_revision+0x24>
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <ai_platform_runtime_get_revision+0x6c>)
 80059e8:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <ai_platform_runtime_get_revision+0x70>)
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <ai_platform_runtime_get_revision+0x74>)
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d00e      	beq.n	8005a12 <ai_platform_runtime_get_revision+0x56>
 80059f4:	e7fe      	b.n	80059f4 <ai_platform_runtime_get_revision+0x38>
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <ai_platform_runtime_get_revision+0x78>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d1fc      	bne.n	80059fc <ai_platform_runtime_get_revision+0x40>
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <ai_platform_runtime_get_revision+0x7c>)
 8005a04:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <ai_platform_runtime_get_revision+0x70>)
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <ai_platform_runtime_get_revision+0x74>)
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d000      	beq.n	8005a12 <ai_platform_runtime_get_revision+0x56>
 8005a10:	e7fe      	b.n	8005a10 <ai_platform_runtime_get_revision+0x54>
 8005a12:	f7ff ff69 	bl	80058e8 <_ai_platform_release_crc>
 8005a16:	4809      	ldr	r0, [pc, #36]	; (8005a3c <ai_platform_runtime_get_revision+0x80>)
 8005a18:	bd08      	pop	{r3, pc}
 8005a1a:	bf00      	nop
 8005a1c:	e0002000 	.word	0xe0002000
 8005a20:	e0042000 	.word	0xe0042000
 8005a24:	58024c08 	.word	0x58024c08
 8005a28:	58024c00 	.word	0x58024c00
 8005a2c:	f407a5c2 	.word	0xf407a5c2
 8005a30:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a34:	40023008 	.word	0x40023008
 8005a38:	40023000 	.word	0x40023000
 8005a3c:	08008f14 	.word	0x08008f14

08005a40 <ai_platform_runtime_get_version>:
 8005a40:	b500      	push	{lr}
 8005a42:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <ai_platform_runtime_get_version+0x64>)
 8005a44:	6813      	ldr	r3, [r2, #0]
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	f7ff ff49 	bl	80058e4 <_ai_platform_acquire_crc>
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <ai_platform_runtime_get_version+0x68>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5e:	d00d      	beq.n	8005a7c <ai_platform_runtime_get_version+0x3c>
 8005a60:	4b12      	ldr	r3, [pc, #72]	; (8005aac <ai_platform_runtime_get_version+0x6c>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	d1fc      	bne.n	8005a66 <ai_platform_runtime_get_version+0x26>
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <ai_platform_runtime_get_version+0x70>)
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <ai_platform_runtime_get_version+0x74>)
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <ai_platform_runtime_get_version+0x78>)
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00e      	beq.n	8005a98 <ai_platform_runtime_get_version+0x58>
 8005a7a:	e7fe      	b.n	8005a7a <ai_platform_runtime_get_version+0x3a>
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <ai_platform_runtime_get_version+0x7c>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d1fc      	bne.n	8005a82 <ai_platform_runtime_get_version+0x42>
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <ai_platform_runtime_get_version+0x80>)
 8005a8a:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <ai_platform_runtime_get_version+0x74>)
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <ai_platform_runtime_get_version+0x78>)
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d000      	beq.n	8005a98 <ai_platform_runtime_get_version+0x58>
 8005a96:	e7fe      	b.n	8005a96 <ai_platform_runtime_get_version+0x56>
 8005a98:	f7ff ff26 	bl	80058e8 <_ai_platform_release_crc>
 8005a9c:	2007      	movs	r0, #7
 8005a9e:	b003      	add	sp, #12
 8005aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aa4:	e0002000 	.word	0xe0002000
 8005aa8:	e0042000 	.word	0xe0042000
 8005aac:	58024c08 	.word	0x58024c08
 8005ab0:	58024c00 	.word	0x58024c00
 8005ab4:	f407a5c2 	.word	0xf407a5c2
 8005ab8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005abc:	40023008 	.word	0x40023008
 8005ac0:	40023000 	.word	0x40023000

08005ac4 <ai_platform_api_get_version>:
 8005ac4:	b500      	push	{lr}
 8005ac6:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <ai_platform_api_get_version+0x84>)
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	f7ff ff07 	bl	80058e4 <_ai_platform_acquire_crc>
 8005ad6:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <ai_platform_api_get_version+0x88>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d00d      	beq.n	8005b00 <ai_platform_api_get_version+0x3c>
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <ai_platform_api_get_version+0x8c>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	d1fc      	bne.n	8005aea <ai_platform_api_get_version+0x26>
 8005af0:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <ai_platform_api_get_version+0x90>)
 8005af2:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <ai_platform_api_get_version+0x94>)
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b18      	ldr	r3, [pc, #96]	; (8005b5c <ai_platform_api_get_version+0x98>)
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d00e      	beq.n	8005b1c <ai_platform_api_get_version+0x58>
 8005afe:	e7fe      	b.n	8005afe <ai_platform_api_get_version+0x3a>
 8005b00:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <ai_platform_api_get_version+0x9c>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2a00      	cmp	r2, #0
 8005b0a:	d1fc      	bne.n	8005b06 <ai_platform_api_get_version+0x42>
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <ai_platform_api_get_version+0xa0>)
 8005b0e:	4a12      	ldr	r2, [pc, #72]	; (8005b58 <ai_platform_api_get_version+0x94>)
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <ai_platform_api_get_version+0x98>)
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d000      	beq.n	8005b1c <ai_platform_api_get_version+0x58>
 8005b1a:	e7fe      	b.n	8005b1a <ai_platform_api_get_version+0x56>
 8005b1c:	f7ff fee4 	bl	80058e8 <_ai_platform_release_crc>
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <ai_platform_api_get_version+0xa4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2000      	movs	r0, #0
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	f362 0007 	bfi	r0, r2, #0, #8
 8005b2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005b30:	f362 200f 	bfi	r0, r2, #8, #8
 8005b34:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005b38:	f362 4017 	bfi	r0, r2, #16, #8
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	f363 601f 	bfi	r0, r3, #24, #8
 8005b42:	b003      	add	sp, #12
 8005b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b48:	e0002000 	.word	0xe0002000
 8005b4c:	e0042000 	.word	0xe0042000
 8005b50:	58024c08 	.word	0x58024c08
 8005b54:	58024c00 	.word	0x58024c00
 8005b58:	f407a5c2 	.word	0xf407a5c2
 8005b5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b60:	40023008 	.word	0x40023008
 8005b64:	40023000 	.word	0x40023000
 8005b68:	08008f18 	.word	0x08008f18

08005b6c <ai_platform_interface_api_get_version>:
 8005b6c:	b500      	push	{lr}
 8005b6e:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <ai_platform_interface_api_get_version+0x84>)
 8005b70:	6813      	ldr	r3, [r2, #0]
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	b083      	sub	sp, #12
 8005b7a:	f7ff feb3 	bl	80058e4 <_ai_platform_acquire_crc>
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <ai_platform_interface_api_get_version+0x88>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8a:	d00d      	beq.n	8005ba8 <ai_platform_interface_api_get_version+0x3c>
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <ai_platform_interface_api_get_version+0x8c>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	d1fc      	bne.n	8005b92 <ai_platform_interface_api_get_version+0x26>
 8005b98:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <ai_platform_interface_api_get_version+0x90>)
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <ai_platform_interface_api_get_version+0x94>)
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <ai_platform_interface_api_get_version+0x98>)
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d00e      	beq.n	8005bc4 <ai_platform_interface_api_get_version+0x58>
 8005ba6:	e7fe      	b.n	8005ba6 <ai_platform_interface_api_get_version+0x3a>
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <ai_platform_interface_api_get_version+0x9c>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d1fc      	bne.n	8005bae <ai_platform_interface_api_get_version+0x42>
 8005bb4:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <ai_platform_interface_api_get_version+0xa0>)
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <ai_platform_interface_api_get_version+0x94>)
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <ai_platform_interface_api_get_version+0x98>)
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d000      	beq.n	8005bc4 <ai_platform_interface_api_get_version+0x58>
 8005bc2:	e7fe      	b.n	8005bc2 <ai_platform_interface_api_get_version+0x56>
 8005bc4:	f7ff fe90 	bl	80058e8 <_ai_platform_release_crc>
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <ai_platform_interface_api_get_version+0xa4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2000      	movs	r0, #0
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	f362 0007 	bfi	r0, r2, #0, #8
 8005bd4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005bd8:	f362 200f 	bfi	r0, r2, #8, #8
 8005bdc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005be0:	f362 4017 	bfi	r0, r2, #16, #8
 8005be4:	0e1b      	lsrs	r3, r3, #24
 8005be6:	f363 601f 	bfi	r0, r3, #24, #8
 8005bea:	b003      	add	sp, #12
 8005bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bf0:	e0002000 	.word	0xe0002000
 8005bf4:	e0042000 	.word	0xe0042000
 8005bf8:	58024c08 	.word	0x58024c08
 8005bfc:	58024c00 	.word	0x58024c00
 8005c00:	f407a5c2 	.word	0xf407a5c2
 8005c04:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c08:	40023008 	.word	0x40023008
 8005c0c:	40023000 	.word	0x40023000
 8005c10:	08008f1c 	.word	0x08008f1c

08005c14 <ai_platform_context_acquire>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4604      	mov	r4, r0
 8005c18:	b120      	cbz	r0, 8005c24 <ai_platform_context_acquire+0x10>
 8005c1a:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <ai_platform_context_acquire+0x6c>)
 8005c1c:	6802      	ldr	r2, [r0, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	bf18      	it	ne
 8005c22:	2400      	movne	r4, #0
 8005c24:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <ai_platform_context_acquire+0x70>)
 8005c26:	6813      	ldr	r3, [r2, #0]
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	f7ff fe59 	bl	80058e4 <_ai_platform_acquire_crc>
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <ai_platform_context_acquire+0x74>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d00d      	beq.n	8005c5c <ai_platform_context_acquire+0x48>
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <ai_platform_context_acquire+0x78>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2a00      	cmp	r2, #0
 8005c4a:	d1fc      	bne.n	8005c46 <ai_platform_context_acquire+0x32>
 8005c4c:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <ai_platform_context_acquire+0x7c>)
 8005c4e:	4a11      	ldr	r2, [pc, #68]	; (8005c94 <ai_platform_context_acquire+0x80>)
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <ai_platform_context_acquire+0x84>)
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d00e      	beq.n	8005c78 <ai_platform_context_acquire+0x64>
 8005c5a:	e7fe      	b.n	8005c5a <ai_platform_context_acquire+0x46>
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <ai_platform_context_acquire+0x88>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d1fc      	bne.n	8005c62 <ai_platform_context_acquire+0x4e>
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <ai_platform_context_acquire+0x8c>)
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <ai_platform_context_acquire+0x80>)
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <ai_platform_context_acquire+0x84>)
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d000      	beq.n	8005c78 <ai_platform_context_acquire+0x64>
 8005c76:	e7fe      	b.n	8005c76 <ai_platform_context_acquire+0x62>
 8005c78:	f7ff fe36 	bl	80058e8 <_ai_platform_release_crc>
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	a1c00100 	.word	0xa1c00100
 8005c84:	e0002000 	.word	0xe0002000
 8005c88:	e0042000 	.word	0xe0042000
 8005c8c:	58024c08 	.word	0x58024c08
 8005c90:	58024c00 	.word	0x58024c00
 8005c94:	f407a5c2 	.word	0xf407a5c2
 8005c98:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c9c:	40023008 	.word	0x40023008
 8005ca0:	40023000 	.word	0x40023000

08005ca4 <ai_platform_network_get_error>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	b120      	cbz	r0, 8005cb2 <ai_platform_network_get_error+0xe>
 8005ca8:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <ai_platform_network_get_error+0xd0>)
 8005caa:	6802      	ldr	r2, [r0, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	4604      	mov	r4, r0
 8005cb0:	d02e      	beq.n	8005d10 <ai_platform_network_get_error+0x6c>
 8005cb2:	4a31      	ldr	r2, [pc, #196]	; (8005d78 <ai_platform_network_get_error+0xd4>)
 8005cb4:	6813      	ldr	r3, [r2, #0]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	f7ff fe12 	bl	80058e4 <_ai_platform_acquire_crc>
 8005cc0:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <ai_platform_network_get_error+0xd8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ccc:	d00d      	beq.n	8005cea <ai_platform_network_get_error+0x46>
 8005cce:	4b2c      	ldr	r3, [pc, #176]	; (8005d80 <ai_platform_network_get_error+0xdc>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	d1fc      	bne.n	8005cd4 <ai_platform_network_get_error+0x30>
 8005cda:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <ai_platform_network_get_error+0xe0>)
 8005cdc:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <ai_platform_network_get_error+0xe4>)
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <ai_platform_network_get_error+0xe8>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d00d      	beq.n	8005d04 <ai_platform_network_get_error+0x60>
 8005ce8:	e7fe      	b.n	8005ce8 <ai_platform_network_get_error+0x44>
 8005cea:	4b29      	ldr	r3, [pc, #164]	; (8005d90 <ai_platform_network_get_error+0xec>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d1fc      	bne.n	8005cf0 <ai_platform_network_get_error+0x4c>
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <ai_platform_network_get_error+0xf0>)
 8005cf8:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <ai_platform_network_get_error+0xe4>)
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <ai_platform_network_get_error+0xe8>)
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d104      	bne.n	8005d0e <ai_platform_network_get_error+0x6a>
 8005d04:	f7ff fdf0 	bl	80058e8 <_ai_platform_release_crc>
 8005d08:	f241 0010 	movw	r0, #4112	; 0x1010
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	e7fe      	b.n	8005d0e <ai_platform_network_get_error+0x6a>
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <ai_platform_network_get_error+0xd4>)
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	f7ff fde3 	bl	80058e4 <_ai_platform_acquire_crc>
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <ai_platform_network_get_error+0xd8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d00d      	beq.n	8005d48 <ai_platform_network_get_error+0xa4>
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <ai_platform_network_get_error+0xdc>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	2a00      	cmp	r2, #0
 8005d36:	d1fc      	bne.n	8005d32 <ai_platform_network_get_error+0x8e>
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <ai_platform_network_get_error+0xe0>)
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <ai_platform_network_get_error+0xe4>)
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <ai_platform_network_get_error+0xe8>)
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d00e      	beq.n	8005d64 <ai_platform_network_get_error+0xc0>
 8005d46:	e7fe      	b.n	8005d46 <ai_platform_network_get_error+0xa2>
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <ai_platform_network_get_error+0xec>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d1fc      	bne.n	8005d4e <ai_platform_network_get_error+0xaa>
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <ai_platform_network_get_error+0xf0>)
 8005d56:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <ai_platform_network_get_error+0xe4>)
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <ai_platform_network_get_error+0xe8>)
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d000      	beq.n	8005d64 <ai_platform_network_get_error+0xc0>
 8005d62:	e7fe      	b.n	8005d62 <ai_platform_network_get_error+0xbe>
 8005d64:	f7ff fdc0 	bl	80058e8 <_ai_platform_release_crc>
 8005d68:	f104 0010 	add.w	r0, r4, #16
 8005d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d70:	f001 b828 	b.w	8006dc4 <core_get_error>
 8005d74:	a1c00100 	.word	0xa1c00100
 8005d78:	e0002000 	.word	0xe0002000
 8005d7c:	e0042000 	.word	0xe0042000
 8005d80:	58024c08 	.word	0x58024c08
 8005d84:	58024c00 	.word	0x58024c00
 8005d88:	f407a5c2 	.word	0xf407a5c2
 8005d8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d90:	40023008 	.word	0x40023008
 8005d94:	40023000 	.word	0x40023000

08005d98 <ai_platform_api_get_network_report>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	b120      	cbz	r0, 8005daa <ai_platform_api_get_network_report+0x12>
 8005da0:	4ba1      	ldr	r3, [pc, #644]	; (8006028 <ai_platform_api_get_network_report+0x290>)
 8005da2:	6802      	ldr	r2, [r0, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	4605      	mov	r5, r0
 8005da8:	d030      	beq.n	8005e0c <ai_platform_api_get_network_report+0x74>
 8005daa:	4aa0      	ldr	r2, [pc, #640]	; (800602c <ai_platform_api_get_network_report+0x294>)
 8005dac:	6813      	ldr	r3, [r2, #0]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	f7ff fd96 	bl	80058e4 <_ai_platform_acquire_crc>
 8005db8:	4b9d      	ldr	r3, [pc, #628]	; (8006030 <ai_platform_api_get_network_report+0x298>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc4:	d00d      	beq.n	8005de2 <ai_platform_api_get_network_report+0x4a>
 8005dc6:	4b9b      	ldr	r3, [pc, #620]	; (8006034 <ai_platform_api_get_network_report+0x29c>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d1fc      	bne.n	8005dcc <ai_platform_api_get_network_report+0x34>
 8005dd2:	4b99      	ldr	r3, [pc, #612]	; (8006038 <ai_platform_api_get_network_report+0x2a0>)
 8005dd4:	4a99      	ldr	r2, [pc, #612]	; (800603c <ai_platform_api_get_network_report+0x2a4>)
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b99      	ldr	r3, [pc, #612]	; (8006040 <ai_platform_api_get_network_report+0x2a8>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d00d      	beq.n	8005dfc <ai_platform_api_get_network_report+0x64>
 8005de0:	e7fe      	b.n	8005de0 <ai_platform_api_get_network_report+0x48>
 8005de2:	4b98      	ldr	r3, [pc, #608]	; (8006044 <ai_platform_api_get_network_report+0x2ac>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d1fc      	bne.n	8005de8 <ai_platform_api_get_network_report+0x50>
 8005dee:	4b96      	ldr	r3, [pc, #600]	; (8006048 <ai_platform_api_get_network_report+0x2b0>)
 8005df0:	4a92      	ldr	r2, [pc, #584]	; (800603c <ai_platform_api_get_network_report+0x2a4>)
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b92      	ldr	r3, [pc, #584]	; (8006040 <ai_platform_api_get_network_report+0x2a8>)
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d106      	bne.n	8005e0a <ai_platform_api_get_network_report+0x72>
 8005dfc:	f7ff fd74 	bl	80058e8 <_ai_platform_release_crc>
 8005e00:	2600      	movs	r6, #0
 8005e02:	4630      	mov	r0, r6
 8005e04:	b003      	add	sp, #12
 8005e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0a:	e7fe      	b.n	8005e0a <ai_platform_api_get_network_report+0x72>
 8005e0c:	4a87      	ldr	r2, [pc, #540]	; (800602c <ai_platform_api_get_network_report+0x294>)
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	460c      	mov	r4, r1
 8005e18:	f7ff fd64 	bl	80058e4 <_ai_platform_acquire_crc>
 8005e1c:	4b84      	ldr	r3, [pc, #528]	; (8006030 <ai_platform_api_get_network_report+0x298>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e28:	d00d      	beq.n	8005e46 <ai_platform_api_get_network_report+0xae>
 8005e2a:	4b82      	ldr	r3, [pc, #520]	; (8006034 <ai_platform_api_get_network_report+0x29c>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	d1fc      	bne.n	8005e30 <ai_platform_api_get_network_report+0x98>
 8005e36:	4b80      	ldr	r3, [pc, #512]	; (8006038 <ai_platform_api_get_network_report+0x2a0>)
 8005e38:	4a80      	ldr	r2, [pc, #512]	; (800603c <ai_platform_api_get_network_report+0x2a4>)
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b80      	ldr	r3, [pc, #512]	; (8006040 <ai_platform_api_get_network_report+0x2a8>)
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d00e      	beq.n	8005e62 <ai_platform_api_get_network_report+0xca>
 8005e44:	e7fe      	b.n	8005e44 <ai_platform_api_get_network_report+0xac>
 8005e46:	4b7f      	ldr	r3, [pc, #508]	; (8006044 <ai_platform_api_get_network_report+0x2ac>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	d1fc      	bne.n	8005e4c <ai_platform_api_get_network_report+0xb4>
 8005e52:	4b7d      	ldr	r3, [pc, #500]	; (8006048 <ai_platform_api_get_network_report+0x2b0>)
 8005e54:	4a79      	ldr	r2, [pc, #484]	; (800603c <ai_platform_api_get_network_report+0x2a4>)
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b79      	ldr	r3, [pc, #484]	; (8006040 <ai_platform_api_get_network_report+0x2a8>)
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d000      	beq.n	8005e62 <ai_platform_api_get_network_report+0xca>
 8005e60:	e7fe      	b.n	8005e60 <ai_platform_api_get_network_report+0xc8>
 8005e62:	f7ff fd41 	bl	80058e8 <_ai_platform_release_crc>
 8005e66:	2c00      	cmp	r4, #0
 8005e68:	d07c      	beq.n	8005f64 <ai_platform_api_get_network_report+0x1cc>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005e6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	d079      	beq.n	8005f68 <ai_platform_api_get_network_report+0x1d0>
 8005e74:	2301      	movs	r3, #1
 8005e76:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005e78:	6913      	ldr	r3, [r2, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d00c      	beq.n	8005e98 <ai_platform_api_get_network_report+0x100>
 8005e7e:	b15b      	cbz	r3, 8005e98 <ai_platform_api_get_network_report+0x100>
 8005e80:	2202      	movs	r2, #2
 8005e82:	e003      	b.n	8005e8c <ai_platform_api_get_network_report+0xf4>
 8005e84:	1c50      	adds	r0, r2, #1
 8005e86:	460b      	mov	r3, r1
 8005e88:	b121      	cbz	r1, 8005e94 <ai_platform_api_get_network_report+0xfc>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8005e8e:	6919      	ldr	r1, [r3, #16]
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d1f7      	bne.n	8005e84 <ai_platform_api_get_network_report+0xec>
 8005e94:	2a00      	cmp	r2, #0
 8005e96:	d067      	beq.n	8005f68 <ai_platform_api_get_network_report+0x1d0>
 8005e98:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80d6 	beq.w	800604c <ai_platform_api_get_network_report+0x2b4>
 8005ea0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8005ea2:	2f00      	cmp	r7, #0
 8005ea4:	f000 80d2 	beq.w	800604c <ai_platform_api_get_network_report+0x2b4>
 8005ea8:	883b      	ldrh	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80ce 	beq.w	800604c <ai_platform_api_get_network_report+0x2b4>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80ca 	beq.w	800604c <ai_platform_api_get_network_report+0x2b4>
 8005eb8:	681e      	ldr	r6, [r3, #0]
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	f000 80c6 	beq.w	800604c <ai_platform_api_get_network_report+0x2b4>
 8005ec0:	f04f 0800 	mov.w	r8, #0
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	f04f 0b18 	mov.w	fp, #24
 8005eca:	f04f 0a01 	mov.w	sl, #1
 8005ece:	e019      	b.n	8005f04 <ai_platform_api_get_network_report+0x16c>
 8005ed0:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 8005ed4:	6830      	ldr	r0, [r6, #0]
 8005ed6:	6050      	str	r0, [r2, #4]
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d039      	beq.n	8005f50 <ai_platform_api_get_network_report+0x1b8>
 8005edc:	8840      	ldrh	r0, [r0, #2]
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d036      	beq.n	8005f50 <ai_platform_api_get_network_report+0x1b8>
 8005ee2:	f849 a00c 	str.w	sl, [r9, ip]
 8005ee6:	615a      	str	r2, [r3, #20]
 8005ee8:	8838      	ldrh	r0, [r7, #0]
 8005eea:	f108 0301 	add.w	r3, r8, #1
 8005eee:	4283      	cmp	r3, r0
 8005ef0:	4698      	mov	r8, r3
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	d240      	bcs.n	8005f78 <ai_platform_api_get_network_report+0x1e0>
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d03d      	beq.n	8005f78 <ai_platform_api_get_network_report+0x1e0>
 8005efc:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	d039      	beq.n	8005f78 <ai_platform_api_get_network_report+0x1e0>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	69b2      	ldr	r2, [r6, #24]
 8005f08:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8005f0c:	6810      	ldr	r0, [r2, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	9101      	str	r1, [sp, #4]
 8005f12:	9200      	str	r2, [sp, #0]
 8005f14:	f001 fcc4 	bl	80078a0 <ai_array_to_buffer_fmt>
 8005f18:	9a00      	ldr	r2, [sp, #0]
 8005f1a:	9901      	ldr	r1, [sp, #4]
 8005f1c:	fb0b fc08 	mul.w	ip, fp, r8
 8005f20:	eb02 030c 	add.w	r3, r2, ip
 8005f24:	f842 000c 	str.w	r0, [r2, ip]
 8005f28:	f8a3 a004 	strh.w	sl, [r3, #4]
 8005f2c:	68f2      	ldr	r2, [r6, #12]
 8005f2e:	68d2      	ldr	r2, [r2, #12]
 8005f30:	80da      	strh	r2, [r3, #6]
 8005f32:	68f2      	ldr	r2, [r6, #12]
 8005f34:	6892      	ldr	r2, [r2, #8]
 8005f36:	811a      	strh	r2, [r3, #8]
 8005f38:	68f2      	ldr	r2, [r6, #12]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	69b2      	ldr	r2, [r6, #24]
 8005f40:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8005f44:	6892      	ldr	r2, [r2, #8]
 8005f46:	611a      	str	r2, [r3, #16]
 8005f48:	eb09 020c 	add.w	r2, r9, ip
 8005f4c:	2a00      	cmp	r2, #0
 8005f4e:	d1bf      	bne.n	8005ed0 <ai_platform_api_get_network_report+0x138>
 8005f50:	2200      	movs	r2, #0
 8005f52:	e7c8      	b.n	8005ee6 <ai_platform_api_get_network_report+0x14e>
 8005f54:	2300      	movs	r3, #0
 8005f56:	8663      	strh	r3, [r4, #50]	; 0x32
 8005f58:	f105 0010 	add.w	r0, r5, #16
 8005f5c:	2218      	movs	r2, #24
 8005f5e:	2113      	movs	r1, #19
 8005f60:	f000 ff36 	bl	8006dd0 <core_set_error>
 8005f64:	2600      	movs	r6, #0
 8005f66:	e74c      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 8005f68:	f105 0010 	add.w	r0, r5, #16
 8005f6c:	2218      	movs	r2, #24
 8005f6e:	2111      	movs	r1, #17
 8005f70:	f000 ff2e 	bl	8006dd0 <core_set_error>
 8005f74:	2600      	movs	r6, #0
 8005f76:	e744      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	d067      	beq.n	800604c <ai_platform_api_get_network_report+0x2b4>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6363      	str	r3, [r4, #52]	; 0x34
 8005f82:	8622      	strh	r2, [r4, #48]	; 0x30
 8005f84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d9e4      	bls.n	8005f54 <ai_platform_api_get_network_report+0x1bc>
 8005f8a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8005f8e:	2600      	movs	r6, #0
 8005f90:	f108 0a0c 	add.w	sl, r8, #12
 8005f94:	4631      	mov	r1, r6
 8005f96:	f04f 0b01 	mov.w	fp, #1
 8005f9a:	b2b3      	uxth	r3, r6
 8005f9c:	f1ba 0f00 	cmp.w	sl, #0
 8005fa0:	d05f      	beq.n	8006062 <ai_platform_api_get_network_report+0x2ca>
 8005fa2:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 8005fa6:	4286      	cmp	r6, r0
 8005fa8:	d25b      	bcs.n	8006062 <ai_platform_api_get_network_report+0x2ca>
 8005faa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d057      	beq.n	8006062 <ai_platform_api_get_network_report+0x2ca>
 8005fb2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005fb6:	2f00      	cmp	r7, #0
 8005fb8:	d053      	beq.n	8006062 <ai_platform_api_get_network_report+0x2ca>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	6853      	ldr	r3, [r2, #4]
 8005fc4:	9101      	str	r1, [sp, #4]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8005fcc:	f001 fc68 	bl	80078a0 <ai_array_to_buffer_fmt>
 8005fd0:	2318      	movs	r3, #24
 8005fd2:	fb03 fe06 	mul.w	lr, r3, r6
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	9901      	ldr	r1, [sp, #4]
 8005fda:	f843 000e 	str.w	r0, [r3, lr]
 8005fde:	eb03 0c0e 	add.w	ip, r3, lr
 8005fe2:	00f0      	lsls	r0, r6, #3
 8005fe4:	f8ac b004 	strh.w	fp, [ip, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f8ac 3006 	strh.w	r3, [ip, #6]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f8ac 3008 	strh.w	r3, [ip, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f8cc 300c 	str.w	r3, [ip, #12]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f8cc 3010 	str.w	r3, [ip, #16]
 8006008:	eb09 0300 	add.w	r3, r9, r0
 800600c:	b33b      	cbz	r3, 800605e <ai_platform_api_get_network_report+0x2c6>
 800600e:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 8006012:	683f      	ldr	r7, [r7, #0]
 8006014:	605f      	str	r7, [r3, #4]
 8006016:	b317      	cbz	r7, 800605e <ai_platform_api_get_network_report+0x2c6>
 8006018:	887f      	ldrh	r7, [r7, #2]
 800601a:	b307      	cbz	r7, 800605e <ai_platform_api_get_network_report+0x2c6>
 800601c:	f849 b000 	str.w	fp, [r9, r0]
 8006020:	f8cc 3014 	str.w	r3, [ip, #20]
 8006024:	3601      	adds	r6, #1
 8006026:	e7b8      	b.n	8005f9a <ai_platform_api_get_network_report+0x202>
 8006028:	a1c00100 	.word	0xa1c00100
 800602c:	e0002000 	.word	0xe0002000
 8006030:	e0042000 	.word	0xe0042000
 8006034:	58024c08 	.word	0x58024c08
 8006038:	58024c00 	.word	0x58024c00
 800603c:	f407a5c2 	.word	0xf407a5c2
 8006040:	b5e8b5cd 	.word	0xb5e8b5cd
 8006044:	40023008 	.word	0x40023008
 8006048:	40023000 	.word	0x40023000
 800604c:	2600      	movs	r6, #0
 800604e:	f105 0010 	add.w	r0, r5, #16
 8006052:	8626      	strh	r6, [r4, #48]	; 0x30
 8006054:	2218      	movs	r2, #24
 8006056:	2112      	movs	r1, #18
 8006058:	f000 feba 	bl	8006dd0 <core_set_error>
 800605c:	e6d1      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 800605e:	2300      	movs	r3, #0
 8006060:	e7de      	b.n	8006020 <ai_platform_api_get_network_report+0x288>
 8006062:	2b00      	cmp	r3, #0
 8006064:	f43f af77 	beq.w	8005f56 <ai_platform_api_get_network_report+0x1be>
 8006068:	f8da 2008 	ldr.w	r2, [sl, #8]
 800606c:	6852      	ldr	r2, [r2, #4]
 800606e:	63a2      	str	r2, [r4, #56]	; 0x38
 8006070:	8663      	strh	r3, [r4, #50]	; 0x32
 8006072:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006074:	b16b      	cbz	r3, 8006092 <ai_platform_api_get_network_report+0x2fa>
 8006076:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006078:	b15b      	cbz	r3, 8006092 <ai_platform_api_get_network_report+0x2fa>
 800607a:	6a2b      	ldr	r3, [r5, #32]
 800607c:	b10b      	cbz	r3, 8006082 <ai_platform_api_get_network_report+0x2ea>
 800607e:	8beb      	ldrh	r3, [r5, #30]
 8006080:	b97b      	cbnz	r3, 80060a2 <ai_platform_api_get_network_report+0x30a>
 8006082:	f105 0010 	add.w	r0, r5, #16
 8006086:	2212      	movs	r2, #18
 8006088:	2111      	movs	r1, #17
 800608a:	f000 fea1 	bl	8006dd0 <core_set_error>
 800608e:	2600      	movs	r6, #0
 8006090:	e6b7      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 8006092:	f105 0010 	add.w	r0, r5, #16
 8006096:	2213      	movs	r2, #19
 8006098:	2111      	movs	r1, #17
 800609a:	f000 fe99 	bl	8006dd0 <core_set_error>
 800609e:	2600      	movs	r6, #0
 80060a0:	e6af      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 80060a2:	686b      	ldr	r3, [r5, #4]
 80060a4:	4a83      	ldr	r2, [pc, #524]	; (80062b4 <ai_platform_api_get_network_report+0x51c>)
 80060a6:	6723      	str	r3, [r4, #112]	; 0x70
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	f7ff fc18 	bl	80058e4 <_ai_platform_acquire_crc>
 80060b4:	4b80      	ldr	r3, [pc, #512]	; (80062b8 <ai_platform_api_get_network_report+0x520>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c0:	d00d      	beq.n	80060de <ai_platform_api_get_network_report+0x346>
 80060c2:	4b7e      	ldr	r3, [pc, #504]	; (80062bc <ai_platform_api_get_network_report+0x524>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	d1fc      	bne.n	80060c8 <ai_platform_api_get_network_report+0x330>
 80060ce:	4b7c      	ldr	r3, [pc, #496]	; (80062c0 <ai_platform_api_get_network_report+0x528>)
 80060d0:	4a7c      	ldr	r2, [pc, #496]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b7c      	ldr	r3, [pc, #496]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d00e      	beq.n	80060fa <ai_platform_api_get_network_report+0x362>
 80060dc:	e7fe      	b.n	80060dc <ai_platform_api_get_network_report+0x344>
 80060de:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <ai_platform_api_get_network_report+0x534>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	d1fc      	bne.n	80060e4 <ai_platform_api_get_network_report+0x34c>
 80060ea:	4b79      	ldr	r3, [pc, #484]	; (80062d0 <ai_platform_api_get_network_report+0x538>)
 80060ec:	4a75      	ldr	r2, [pc, #468]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b75      	ldr	r3, [pc, #468]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d000      	beq.n	80060fa <ai_platform_api_get_network_report+0x362>
 80060f8:	e7fe      	b.n	80060f8 <ai_platform_api_get_network_report+0x360>
 80060fa:	f7ff fbf5 	bl	80058e8 <_ai_platform_release_crc>
 80060fe:	4a6d      	ldr	r2, [pc, #436]	; (80062b4 <ai_platform_api_get_network_report+0x51c>)
 8006100:	4b74      	ldr	r3, [pc, #464]	; (80062d4 <ai_platform_api_get_network_report+0x53c>)
 8006102:	6123      	str	r3, [r4, #16]
 8006104:	6813      	ldr	r3, [r2, #0]
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	f7ff fbea 	bl	80058e4 <_ai_platform_acquire_crc>
 8006110:	4b69      	ldr	r3, [pc, #420]	; (80062b8 <ai_platform_api_get_network_report+0x520>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d00d      	beq.n	800613a <ai_platform_api_get_network_report+0x3a2>
 800611e:	4b67      	ldr	r3, [pc, #412]	; (80062bc <ai_platform_api_get_network_report+0x524>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	2a00      	cmp	r2, #0
 8006128:	d1fc      	bne.n	8006124 <ai_platform_api_get_network_report+0x38c>
 800612a:	4b65      	ldr	r3, [pc, #404]	; (80062c0 <ai_platform_api_get_network_report+0x528>)
 800612c:	4a65      	ldr	r2, [pc, #404]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b65      	ldr	r3, [pc, #404]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 8006134:	429a      	cmp	r2, r3
 8006136:	d00e      	beq.n	8006156 <ai_platform_api_get_network_report+0x3be>
 8006138:	e7fe      	b.n	8006138 <ai_platform_api_get_network_report+0x3a0>
 800613a:	4b64      	ldr	r3, [pc, #400]	; (80062cc <ai_platform_api_get_network_report+0x534>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	2a00      	cmp	r2, #0
 8006144:	d1fc      	bne.n	8006140 <ai_platform_api_get_network_report+0x3a8>
 8006146:	4b62      	ldr	r3, [pc, #392]	; (80062d0 <ai_platform_api_get_network_report+0x538>)
 8006148:	4a5e      	ldr	r2, [pc, #376]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 8006150:	429a      	cmp	r2, r3
 8006152:	d000      	beq.n	8006156 <ai_platform_api_get_network_report+0x3be>
 8006154:	e7fe      	b.n	8006154 <ai_platform_api_get_network_report+0x3bc>
 8006156:	f7ff fbc7 	bl	80058e8 <_ai_platform_release_crc>
 800615a:	4a56      	ldr	r2, [pc, #344]	; (80062b4 <ai_platform_api_get_network_report+0x51c>)
 800615c:	2307      	movs	r3, #7
 800615e:	6163      	str	r3, [r4, #20]
 8006160:	6813      	ldr	r3, [r2, #0]
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	f7ff fbbc 	bl	80058e4 <_ai_platform_acquire_crc>
 800616c:	4b52      	ldr	r3, [pc, #328]	; (80062b8 <ai_platform_api_get_network_report+0x520>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006178:	d00d      	beq.n	8006196 <ai_platform_api_get_network_report+0x3fe>
 800617a:	4b50      	ldr	r3, [pc, #320]	; (80062bc <ai_platform_api_get_network_report+0x524>)
 800617c:	2201      	movs	r2, #1
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	2a00      	cmp	r2, #0
 8006184:	d1fc      	bne.n	8006180 <ai_platform_api_get_network_report+0x3e8>
 8006186:	4b4e      	ldr	r3, [pc, #312]	; (80062c0 <ai_platform_api_get_network_report+0x528>)
 8006188:	4a4e      	ldr	r2, [pc, #312]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b4e      	ldr	r3, [pc, #312]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 8006190:	429a      	cmp	r2, r3
 8006192:	d00e      	beq.n	80061b2 <ai_platform_api_get_network_report+0x41a>
 8006194:	e7fe      	b.n	8006194 <ai_platform_api_get_network_report+0x3fc>
 8006196:	4b4d      	ldr	r3, [pc, #308]	; (80062cc <ai_platform_api_get_network_report+0x534>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	2a00      	cmp	r2, #0
 80061a0:	d1fc      	bne.n	800619c <ai_platform_api_get_network_report+0x404>
 80061a2:	4b4b      	ldr	r3, [pc, #300]	; (80062d0 <ai_platform_api_get_network_report+0x538>)
 80061a4:	4a47      	ldr	r2, [pc, #284]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d000      	beq.n	80061b2 <ai_platform_api_get_network_report+0x41a>
 80061b0:	e7fe      	b.n	80061b0 <ai_platform_api_get_network_report+0x418>
 80061b2:	f7ff fb99 	bl	80058e8 <_ai_platform_release_crc>
 80061b6:	4a3f      	ldr	r2, [pc, #252]	; (80062b4 <ai_platform_api_get_network_report+0x51c>)
 80061b8:	f240 1301 	movw	r3, #257	; 0x101
 80061bc:	6263      	str	r3, [r4, #36]	; 0x24
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	f7ff fb8d 	bl	80058e4 <_ai_platform_acquire_crc>
 80061ca:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <ai_platform_api_get_network_report+0x520>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d6:	d00d      	beq.n	80061f4 <ai_platform_api_get_network_report+0x45c>
 80061d8:	4b38      	ldr	r3, [pc, #224]	; (80062bc <ai_platform_api_get_network_report+0x524>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d1fc      	bne.n	80061de <ai_platform_api_get_network_report+0x446>
 80061e4:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <ai_platform_api_get_network_report+0x528>)
 80061e6:	4a37      	ldr	r2, [pc, #220]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b36      	ldr	r3, [pc, #216]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d00e      	beq.n	8006210 <ai_platform_api_get_network_report+0x478>
 80061f2:	e7fe      	b.n	80061f2 <ai_platform_api_get_network_report+0x45a>
 80061f4:	4b35      	ldr	r3, [pc, #212]	; (80062cc <ai_platform_api_get_network_report+0x534>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d1fc      	bne.n	80061fa <ai_platform_api_get_network_report+0x462>
 8006200:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <ai_platform_api_get_network_report+0x538>)
 8006202:	4a30      	ldr	r2, [pc, #192]	; (80062c4 <ai_platform_api_get_network_report+0x52c>)
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <ai_platform_api_get_network_report+0x530>)
 800620a:	429a      	cmp	r2, r3
 800620c:	d000      	beq.n	8006210 <ai_platform_api_get_network_report+0x478>
 800620e:	e7fe      	b.n	800620e <ai_platform_api_get_network_report+0x476>
 8006210:	f7ff fb6a 	bl	80058e8 <_ai_platform_release_crc>
 8006214:	f240 4301 	movw	r3, #1025	; 0x401
 8006218:	62a3      	str	r3, [r4, #40]	; 0x28
 800621a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800621c:	4a2e      	ldr	r2, [pc, #184]	; (80062d8 <ai_platform_api_get_network_report+0x540>)
 800621e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006220:	0e18      	lsrs	r0, r3, #24
 8006222:	f884 0020 	strb.w	r0, [r4, #32]
 8006226:	0c18      	lsrs	r0, r3, #16
 8006228:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	2000      	movs	r0, #0
 8006230:	4291      	cmp	r1, r2
 8006232:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8006236:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800623a:	d019      	beq.n	8006270 <ai_platform_api_get_network_report+0x4d8>
 800623c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800623e:	b386      	cbz	r6, 80062a2 <ai_platform_api_get_network_report+0x50a>
 8006240:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006242:	b373      	cbz	r3, 80062a2 <ai_platform_api_get_network_report+0x50a>
 8006244:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006246:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800624a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800624c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006250:	e887 0003 	stmia.w	r7, {r0, r1}
 8006254:	6a2b      	ldr	r3, [r5, #32]
 8006256:	b1db      	cbz	r3, 8006290 <ai_platform_api_get_network_report+0x4f8>
 8006258:	8bea      	ldrh	r2, [r5, #30]
 800625a:	b1ca      	cbz	r2, 8006290 <ai_platform_api_get_network_report+0x4f8>
 800625c:	461d      	mov	r5, r3
 800625e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006260:	343c      	adds	r4, #60	; 0x3c
 8006262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006264:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006268:	2601      	movs	r6, #1
 800626a:	e884 0003 	stmia.w	r4, {r0, r1}
 800626e:	e5c8      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 8006270:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8006274:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006278:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800627c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006280:	351c      	adds	r5, #28
 8006282:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006286:	3440      	adds	r4, #64	; 0x40
 8006288:	e884 0003 	stmia.w	r4, {r0, r1}
 800628c:	2601      	movs	r6, #1
 800628e:	e5b8      	b.n	8005e02 <ai_platform_api_get_network_report+0x6a>
 8006290:	2500      	movs	r5, #0
 8006292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006294:	343c      	adds	r4, #60	; 0x3c
 8006296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006298:	e895 0003 	ldmia.w	r5, {r0, r1}
 800629c:	e884 0003 	stmia.w	r4, {r0, r1}
 80062a0:	deff      	udf	#255	; 0xff
 80062a2:	2500      	movs	r5, #0
 80062a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a6:	3454      	adds	r4, #84	; 0x54
 80062a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80062ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80062b2:	deff      	udf	#255	; 0xff
 80062b4:	e0002000 	.word	0xe0002000
 80062b8:	e0042000 	.word	0xe0042000
 80062bc:	58024c08 	.word	0x58024c08
 80062c0:	58024c00 	.word	0x58024c00
 80062c4:	f407a5c2 	.word	0xf407a5c2
 80062c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80062cc:	40023008 	.word	0x40023008
 80062d0:	40023000 	.word	0x40023000
 80062d4:	08008f14 	.word	0x08008f14
 80062d8:	a1facade 	.word	0xa1facade

080062dc <ai_platform_network_create>:
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	4607      	mov	r7, r0
 80062e4:	4616      	mov	r6, r2
 80062e6:	461d      	mov	r5, r3
 80062e8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80062ec:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80062f0:	f7ff faf8 	bl	80058e4 <_ai_platform_acquire_crc>
 80062f4:	b178      	cbz	r0, 8006316 <ai_platform_network_create+0x3a>
 80062f6:	4b5a      	ldr	r3, [pc, #360]	; (8006460 <ai_platform_network_create+0x184>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	4602      	mov	r2, r0
 8006304:	d00c      	beq.n	8006320 <ai_platform_network_create+0x44>
 8006306:	4b57      	ldr	r3, [pc, #348]	; (8006464 <ai_platform_network_create+0x188>)
 8006308:	2118      	movs	r1, #24
 800630a:	6019      	str	r1, [r3, #0]
 800630c:	6819      	ldr	r1, [r3, #0]
 800630e:	2918      	cmp	r1, #24
 8006310:	d034      	beq.n	800637c <ai_platform_network_create+0xa0>
 8006312:	f7ff fae9 	bl	80058e8 <_ai_platform_release_crc>
 8006316:	f241 0033 	movw	r0, #4147	; 0x1033
 800631a:	b002      	add	sp, #8
 800631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006320:	4b51      	ldr	r3, [pc, #324]	; (8006468 <ai_platform_network_create+0x18c>)
 8006322:	2101      	movs	r1, #1
 8006324:	6019      	str	r1, [r3, #0]
 8006326:	2114      	movs	r1, #20
 8006328:	e001      	b.n	800632e <ai_platform_network_create+0x52>
 800632a:	3901      	subs	r1, #1
 800632c:	d002      	beq.n	8006334 <ai_platform_network_create+0x58>
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	2800      	cmp	r0, #0
 8006332:	d1fa      	bne.n	800632a <ai_platform_network_create+0x4e>
 8006334:	4b4c      	ldr	r3, [pc, #304]	; (8006468 <ai_platform_network_create+0x18c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b9f3      	cbnz	r3, 8006378 <ai_platform_network_create+0x9c>
 800633a:	4610      	mov	r0, r2
 800633c:	f7ff fad4 	bl	80058e8 <_ai_platform_release_crc>
 8006340:	4a4a      	ldr	r2, [pc, #296]	; (800646c <ai_platform_network_create+0x190>)
 8006342:	6813      	ldr	r3, [r2, #0]
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	f7ff facb 	bl	80058e4 <_ai_platform_acquire_crc>
 800634e:	4b44      	ldr	r3, [pc, #272]	; (8006460 <ai_platform_network_create+0x184>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635a:	d015      	beq.n	8006388 <ai_platform_network_create+0xac>
 800635c:	4b41      	ldr	r3, [pc, #260]	; (8006464 <ai_platform_network_create+0x188>)
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	2a00      	cmp	r2, #0
 8006366:	d1fc      	bne.n	8006362 <ai_platform_network_create+0x86>
 8006368:	4b41      	ldr	r3, [pc, #260]	; (8006470 <ai_platform_network_create+0x194>)
 800636a:	4a42      	ldr	r2, [pc, #264]	; (8006474 <ai_platform_network_create+0x198>)
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4b41      	ldr	r3, [pc, #260]	; (8006478 <ai_platform_network_create+0x19c>)
 8006372:	429a      	cmp	r2, r3
 8006374:	d016      	beq.n	80063a4 <ai_platform_network_create+0xc8>
 8006376:	e7fe      	b.n	8006376 <ai_platform_network_create+0x9a>
 8006378:	4610      	mov	r0, r2
 800637a:	e7ca      	b.n	8006312 <ai_platform_network_create+0x36>
 800637c:	2101      	movs	r1, #1
 800637e:	6019      	str	r1, [r3, #0]
 8006380:	6819      	ldr	r1, [r3, #0]
 8006382:	2900      	cmp	r1, #0
 8006384:	d1fc      	bne.n	8006380 <ai_platform_network_create+0xa4>
 8006386:	e7d8      	b.n	800633a <ai_platform_network_create+0x5e>
 8006388:	4b37      	ldr	r3, [pc, #220]	; (8006468 <ai_platform_network_create+0x18c>)
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2a00      	cmp	r2, #0
 8006392:	d1fc      	bne.n	800638e <ai_platform_network_create+0xb2>
 8006394:	4b39      	ldr	r3, [pc, #228]	; (800647c <ai_platform_network_create+0x1a0>)
 8006396:	4a37      	ldr	r2, [pc, #220]	; (8006474 <ai_platform_network_create+0x198>)
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4b36      	ldr	r3, [pc, #216]	; (8006478 <ai_platform_network_create+0x19c>)
 800639e:	429a      	cmp	r2, r3
 80063a0:	d000      	beq.n	80063a4 <ai_platform_network_create+0xc8>
 80063a2:	e7fe      	b.n	80063a2 <ai_platform_network_create+0xc6>
 80063a4:	f7ff faa0 	bl	80058e8 <_ai_platform_release_crc>
 80063a8:	b1af      	cbz	r7, 80063d6 <ai_platform_network_create+0xfa>
 80063aa:	4b35      	ldr	r3, [pc, #212]	; (8006480 <ai_platform_network_create+0x1a4>)
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	603e      	str	r6, [r7, #0]
 80063b0:	f000 fd06 	bl	8006dc0 <core_init>
 80063b4:	b990      	cbnz	r0, 80063dc <ai_platform_network_create+0x100>
 80063b6:	062d      	lsls	r5, r5, #24
 80063b8:	0424      	lsls	r4, r4, #16
 80063ba:	2230      	movs	r2, #48	; 0x30
 80063bc:	2300      	movs	r3, #0
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	2110      	movs	r1, #16
 80063c2:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 80063c6:	2000      	movs	r0, #0
 80063c8:	432b      	orrs	r3, r5
 80063ca:	f362 0007 	bfi	r0, r2, #0, #8
 80063ce:	6473      	str	r3, [r6, #68]	; 0x44
 80063d0:	f361 201f 	bfi	r0, r1, #8, #24
 80063d4:	e7a1      	b.n	800631a <ai_platform_network_create+0x3e>
 80063d6:	f241 0010 	movw	r0, #4112	; 0x1010
 80063da:	e79e      	b.n	800631a <ai_platform_network_create+0x3e>
 80063dc:	4a23      	ldr	r2, [pc, #140]	; (800646c <ai_platform_network_create+0x190>)
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	f7ff fa7d 	bl	80058e4 <_ai_platform_acquire_crc>
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <ai_platform_network_create+0x184>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f6:	d00d      	beq.n	8006414 <ai_platform_network_create+0x138>
 80063f8:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <ai_platform_network_create+0x188>)
 80063fa:	2201      	movs	r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	2a00      	cmp	r2, #0
 8006402:	d1fc      	bne.n	80063fe <ai_platform_network_create+0x122>
 8006404:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <ai_platform_network_create+0x194>)
 8006406:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <ai_platform_network_create+0x198>)
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <ai_platform_network_create+0x19c>)
 800640e:	429a      	cmp	r2, r3
 8006410:	d00e      	beq.n	8006430 <ai_platform_network_create+0x154>
 8006412:	e7fe      	b.n	8006412 <ai_platform_network_create+0x136>
 8006414:	4b14      	ldr	r3, [pc, #80]	; (8006468 <ai_platform_network_create+0x18c>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2a00      	cmp	r2, #0
 800641e:	d1fc      	bne.n	800641a <ai_platform_network_create+0x13e>
 8006420:	4b16      	ldr	r3, [pc, #88]	; (800647c <ai_platform_network_create+0x1a0>)
 8006422:	4a14      	ldr	r2, [pc, #80]	; (8006474 <ai_platform_network_create+0x198>)
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <ai_platform_network_create+0x19c>)
 800642a:	429a      	cmp	r2, r3
 800642c:	d000      	beq.n	8006430 <ai_platform_network_create+0x154>
 800642e:	e7fe      	b.n	800642e <ai_platform_network_create+0x152>
 8006430:	062d      	lsls	r5, r5, #24
 8006432:	0424      	lsls	r4, r4, #16
 8006434:	f7ff fa58 	bl	80058e8 <_ai_platform_release_crc>
 8006438:	ea45 0304 	orr.w	r3, r5, r4
 800643c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006440:	d001      	beq.n	8006446 <ai_platform_network_create+0x16a>
 8006442:	2201      	movs	r2, #1
 8006444:	e7ba      	b.n	80063bc <ai_platform_network_create+0xe0>
 8006446:	a802      	add	r0, sp, #8
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <ai_platform_network_create+0x1a8>)
 800644a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800644e:	f000 fde9 	bl	8007024 <ai_check_custom_types>
 8006452:	b110      	cbz	r0, 800645a <ai_platform_network_create+0x17e>
 8006454:	2100      	movs	r1, #0
 8006456:	460a      	mov	r2, r1
 8006458:	e7b3      	b.n	80063c2 <ai_platform_network_create+0xe6>
 800645a:	2202      	movs	r2, #2
 800645c:	e7ae      	b.n	80063bc <ai_platform_network_create+0xe0>
 800645e:	bf00      	nop
 8006460:	e0042000 	.word	0xe0042000
 8006464:	58024c08 	.word	0x58024c08
 8006468:	40023008 	.word	0x40023008
 800646c:	e0002000 	.word	0xe0002000
 8006470:	58024c00 	.word	0x58024c00
 8006474:	f407a5c2 	.word	0xf407a5c2
 8006478:	b5e8b5cd 	.word	0xb5e8b5cd
 800647c:	40023000 	.word	0x40023000
 8006480:	a1c00100 	.word	0xa1c00100
 8006484:	84048403 	.word	0x84048403

08006488 <ai_platform_network_destroy>:
 8006488:	b510      	push	{r4, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	b118      	cbz	r0, 8006496 <ai_platform_network_destroy+0xe>
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <ai_platform_network_destroy+0xcc>)
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d02d      	beq.n	80064f2 <ai_platform_network_destroy+0x6a>
 8006496:	4a30      	ldr	r2, [pc, #192]	; (8006558 <ai_platform_network_destroy+0xd0>)
 8006498:	6813      	ldr	r3, [r2, #0]
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	f7ff fa20 	bl	80058e4 <_ai_platform_acquire_crc>
 80064a4:	4b2d      	ldr	r3, [pc, #180]	; (800655c <ai_platform_network_destroy+0xd4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b0:	d00d      	beq.n	80064ce <ai_platform_network_destroy+0x46>
 80064b2:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <ai_platform_network_destroy+0xd8>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d1fc      	bne.n	80064b8 <ai_platform_network_destroy+0x30>
 80064be:	4b29      	ldr	r3, [pc, #164]	; (8006564 <ai_platform_network_destroy+0xdc>)
 80064c0:	4a29      	ldr	r2, [pc, #164]	; (8006568 <ai_platform_network_destroy+0xe0>)
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b29      	ldr	r3, [pc, #164]	; (800656c <ai_platform_network_destroy+0xe4>)
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d00e      	beq.n	80064ea <ai_platform_network_destroy+0x62>
 80064cc:	e7fe      	b.n	80064cc <ai_platform_network_destroy+0x44>
 80064ce:	4b28      	ldr	r3, [pc, #160]	; (8006570 <ai_platform_network_destroy+0xe8>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d1fc      	bne.n	80064d4 <ai_platform_network_destroy+0x4c>
 80064da:	4b26      	ldr	r3, [pc, #152]	; (8006574 <ai_platform_network_destroy+0xec>)
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <ai_platform_network_destroy+0xe0>)
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <ai_platform_network_destroy+0xe4>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d000      	beq.n	80064ea <ai_platform_network_destroy+0x62>
 80064e8:	e7fe      	b.n	80064e8 <ai_platform_network_destroy+0x60>
 80064ea:	f7ff f9fd 	bl	80058e8 <_ai_platform_release_crc>
 80064ee:	4620      	mov	r0, r4
 80064f0:	bd10      	pop	{r4, pc}
 80064f2:	4a19      	ldr	r2, [pc, #100]	; (8006558 <ai_platform_network_destroy+0xd0>)
 80064f4:	6813      	ldr	r3, [r2, #0]
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	f7ff f9f2 	bl	80058e4 <_ai_platform_acquire_crc>
 8006500:	4b16      	ldr	r3, [pc, #88]	; (800655c <ai_platform_network_destroy+0xd4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650c:	d00d      	beq.n	800652a <ai_platform_network_destroy+0xa2>
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <ai_platform_network_destroy+0xd8>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	2a00      	cmp	r2, #0
 8006518:	d1fc      	bne.n	8006514 <ai_platform_network_destroy+0x8c>
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <ai_platform_network_destroy+0xdc>)
 800651c:	4a12      	ldr	r2, [pc, #72]	; (8006568 <ai_platform_network_destroy+0xe0>)
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <ai_platform_network_destroy+0xe4>)
 8006524:	429a      	cmp	r2, r3
 8006526:	d00e      	beq.n	8006546 <ai_platform_network_destroy+0xbe>
 8006528:	e7fe      	b.n	8006528 <ai_platform_network_destroy+0xa0>
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <ai_platform_network_destroy+0xe8>)
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	2a00      	cmp	r2, #0
 8006534:	d1fc      	bne.n	8006530 <ai_platform_network_destroy+0xa8>
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <ai_platform_network_destroy+0xec>)
 8006538:	4a0b      	ldr	r2, [pc, #44]	; (8006568 <ai_platform_network_destroy+0xe0>)
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <ai_platform_network_destroy+0xe4>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d000      	beq.n	8006546 <ai_platform_network_destroy+0xbe>
 8006544:	e7fe      	b.n	8006544 <ai_platform_network_destroy+0xbc>
 8006546:	f7ff f9cf 	bl	80058e8 <_ai_platform_release_crc>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fe0e 	bl	800716c <ai_layers_destroy_all>
 8006550:	2400      	movs	r4, #0
 8006552:	e7cc      	b.n	80064ee <ai_platform_network_destroy+0x66>
 8006554:	a1c00100 	.word	0xa1c00100
 8006558:	e0002000 	.word	0xe0002000
 800655c:	e0042000 	.word	0xe0042000
 8006560:	58024c08 	.word	0x58024c08
 8006564:	58024c00 	.word	0x58024c00
 8006568:	f407a5c2 	.word	0xf407a5c2
 800656c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006570:	40023008 	.word	0x40023008
 8006574:	40023000 	.word	0x40023000

08006578 <ai_platform_network_init>:
 8006578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	2800      	cmp	r0, #0
 800657e:	d04d      	beq.n	800661c <ai_platform_network_init+0xa4>
 8006580:	4b7c      	ldr	r3, [pc, #496]	; (8006774 <ai_platform_network_init+0x1fc>)
 8006582:	6802      	ldr	r2, [r0, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	4604      	mov	r4, r0
 8006588:	d148      	bne.n	800661c <ai_platform_network_init+0xa4>
 800658a:	4a7b      	ldr	r2, [pc, #492]	; (8006778 <ai_platform_network_init+0x200>)
 800658c:	6813      	ldr	r3, [r2, #0]
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	460d      	mov	r5, r1
 8006596:	f7ff f9a5 	bl	80058e4 <_ai_platform_acquire_crc>
 800659a:	4b78      	ldr	r3, [pc, #480]	; (800677c <ai_platform_network_init+0x204>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a6:	d00d      	beq.n	80065c4 <ai_platform_network_init+0x4c>
 80065a8:	4b75      	ldr	r3, [pc, #468]	; (8006780 <ai_platform_network_init+0x208>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d1fc      	bne.n	80065ae <ai_platform_network_init+0x36>
 80065b4:	4b73      	ldr	r3, [pc, #460]	; (8006784 <ai_platform_network_init+0x20c>)
 80065b6:	4a74      	ldr	r2, [pc, #464]	; (8006788 <ai_platform_network_init+0x210>)
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b73      	ldr	r3, [pc, #460]	; (800678c <ai_platform_network_init+0x214>)
 80065be:	429a      	cmp	r2, r3
 80065c0:	d00d      	beq.n	80065de <ai_platform_network_init+0x66>
 80065c2:	e7fe      	b.n	80065c2 <ai_platform_network_init+0x4a>
 80065c4:	4b72      	ldr	r3, [pc, #456]	; (8006790 <ai_platform_network_init+0x218>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	d1fc      	bne.n	80065ca <ai_platform_network_init+0x52>
 80065d0:	4b70      	ldr	r3, [pc, #448]	; (8006794 <ai_platform_network_init+0x21c>)
 80065d2:	4a6d      	ldr	r2, [pc, #436]	; (8006788 <ai_platform_network_init+0x210>)
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b6c      	ldr	r3, [pc, #432]	; (800678c <ai_platform_network_init+0x214>)
 80065da:	429a      	cmp	r2, r3
 80065dc:	d11d      	bne.n	800661a <ai_platform_network_init+0xa2>
 80065de:	f7ff f983 	bl	80058e8 <_ai_platform_release_crc>
 80065e2:	2d00      	cmp	r5, #0
 80065e4:	d076      	beq.n	80066d4 <ai_platform_network_init+0x15c>
 80065e6:	4b6c      	ldr	r3, [pc, #432]	; (8006798 <ai_platform_network_init+0x220>)
 80065e8:	682a      	ldr	r2, [r5, #0]
 80065ea:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d030      	beq.n	8006654 <ai_platform_network_init+0xdc>
 80065f2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80065f4:	46a9      	mov	r9, r5
 80065f6:	f105 0118 	add.w	r1, r5, #24
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	f000 8095 	beq.w	800672a <ai_platform_network_init+0x1b2>
 8006600:	f1bc 0f00 	cmp.w	ip, #0
 8006604:	f000 80a4 	beq.w	8006750 <ai_platform_network_init+0x1d8>
 8006608:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800660c:	f1b8 0f01 	cmp.w	r8, #1
 8006610:	d16a      	bne.n	80066e8 <ai_platform_network_init+0x170>
 8006612:	2700      	movs	r7, #0
 8006614:	468c      	mov	ip, r1
 8006616:	83a7      	strh	r7, [r4, #28]
 8006618:	e028      	b.n	800666c <ai_platform_network_init+0xf4>
 800661a:	e7fe      	b.n	800661a <ai_platform_network_init+0xa2>
 800661c:	4a56      	ldr	r2, [pc, #344]	; (8006778 <ai_platform_network_init+0x200>)
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	f7ff f95d 	bl	80058e4 <_ai_platform_acquire_crc>
 800662a:	4b54      	ldr	r3, [pc, #336]	; (800677c <ai_platform_network_init+0x204>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006636:	d067      	beq.n	8006708 <ai_platform_network_init+0x190>
 8006638:	4b51      	ldr	r3, [pc, #324]	; (8006780 <ai_platform_network_init+0x208>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	2a00      	cmp	r2, #0
 8006642:	d1fc      	bne.n	800663e <ai_platform_network_init+0xc6>
 8006644:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <ai_platform_network_init+0x20c>)
 8006646:	4a50      	ldr	r2, [pc, #320]	; (8006788 <ai_platform_network_init+0x210>)
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4b4f      	ldr	r3, [pc, #316]	; (800678c <ai_platform_network_init+0x214>)
 800664e:	429a      	cmp	r2, r3
 8006650:	d067      	beq.n	8006722 <ai_platform_network_init+0x1aa>
 8006652:	e7fe      	b.n	8006652 <ai_platform_network_init+0xda>
 8006654:	8be1      	ldrh	r1, [r4, #30]
 8006656:	88eb      	ldrh	r3, [r5, #6]
 8006658:	89af      	ldrh	r7, [r5, #12]
 800665a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800665e:	88aa      	ldrh	r2, [r5, #4]
 8006660:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006664:	428b      	cmp	r3, r1
 8006666:	d13f      	bne.n	80066e8 <ai_platform_network_init+0x170>
 8006668:	83a2      	strh	r2, [r4, #28]
 800666a:	b19b      	cbz	r3, 8006694 <ai_platform_network_init+0x11c>
 800666c:	f04f 0e00 	mov.w	lr, #0
 8006670:	46f2      	mov	sl, lr
 8006672:	eb09 060e 	add.w	r6, r9, lr
 8006676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006678:	6a25      	ldr	r5, [r4, #32]
 800667a:	4475      	add	r5, lr
 800667c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800667e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006682:	e885 0003 	stmia.w	r5, {r0, r1}
 8006686:	8be3      	ldrh	r3, [r4, #30]
 8006688:	f10a 0a01 	add.w	sl, sl, #1
 800668c:	459a      	cmp	sl, r3
 800668e:	f10e 0e18 	add.w	lr, lr, #24
 8006692:	d3ee      	bcc.n	8006672 <ai_platform_network_init+0xfa>
 8006694:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006696:	4598      	cmp	r8, r3
 8006698:	d12e      	bne.n	80066f8 <ai_platform_network_init+0x180>
 800669a:	84a7      	strh	r7, [r4, #36]	; 0x24
 800669c:	f1b8 0f00 	cmp.w	r8, #0
 80066a0:	d012      	beq.n	80066c8 <ai_platform_network_init+0x150>
 80066a2:	2700      	movs	r7, #0
 80066a4:	46be      	mov	lr, r7
 80066a6:	eb0c 0607 	add.w	r6, ip, r7
 80066aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80066ac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80066ae:	443d      	add	r5, r7
 80066b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80066b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80066ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80066bc:	f10e 0e01 	add.w	lr, lr, #1
 80066c0:	459e      	cmp	lr, r3
 80066c2:	f107 0718 	add.w	r7, r7, #24
 80066c6:	d3ee      	bcc.n	80066a6 <ai_platform_network_init+0x12e>
 80066c8:	2303      	movs	r3, #3
 80066ca:	60e3      	str	r3, [r4, #12]
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fcd3 	bl	8007078 <ai_layers_init_all>
 80066d2:	e006      	b.n	80066e2 <ai_platform_network_init+0x16a>
 80066d4:	f104 0010 	add.w	r0, r4, #16
 80066d8:	2211      	movs	r2, #17
 80066da:	2110      	movs	r1, #16
 80066dc:	462c      	mov	r4, r5
 80066de:	f000 fb77 	bl	8006dd0 <core_set_error>
 80066e2:	4620      	mov	r0, r4
 80066e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e8:	f104 0010 	add.w	r0, r4, #16
 80066ec:	2212      	movs	r2, #18
 80066ee:	2116      	movs	r1, #22
 80066f0:	f000 fb6e 	bl	8006dd0 <core_set_error>
 80066f4:	2400      	movs	r4, #0
 80066f6:	e7f4      	b.n	80066e2 <ai_platform_network_init+0x16a>
 80066f8:	f104 0010 	add.w	r0, r4, #16
 80066fc:	2213      	movs	r2, #19
 80066fe:	2116      	movs	r1, #22
 8006700:	f000 fb66 	bl	8006dd0 <core_set_error>
 8006704:	2400      	movs	r4, #0
 8006706:	e7ec      	b.n	80066e2 <ai_platform_network_init+0x16a>
 8006708:	4b21      	ldr	r3, [pc, #132]	; (8006790 <ai_platform_network_init+0x218>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	2a00      	cmp	r2, #0
 8006712:	d1fc      	bne.n	800670e <ai_platform_network_init+0x196>
 8006714:	4b1f      	ldr	r3, [pc, #124]	; (8006794 <ai_platform_network_init+0x21c>)
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <ai_platform_network_init+0x210>)
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4b1b      	ldr	r3, [pc, #108]	; (800678c <ai_platform_network_init+0x214>)
 800671e:	429a      	cmp	r2, r3
 8006720:	d115      	bne.n	800674e <ai_platform_network_init+0x1d6>
 8006722:	f7ff f8e1 	bl	80058e8 <_ai_platform_release_crc>
 8006726:	2400      	movs	r4, #0
 8006728:	e7db      	b.n	80066e2 <ai_platform_network_init+0x16a>
 800672a:	8c28      	ldrh	r0, [r5, #32]
 800672c:	8bea      	ldrh	r2, [r5, #30]
 800672e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006730:	fb02 f200 	mul.w	r2, r2, r0
 8006734:	fb03 f302 	mul.w	r3, r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	f43f af61 	beq.w	8006600 <ai_platform_network_init+0x88>
 800673e:	f104 0010 	add.w	r0, r4, #16
 8006742:	2213      	movs	r2, #19
 8006744:	2110      	movs	r1, #16
 8006746:	4634      	mov	r4, r6
 8006748:	f000 fb42 	bl	8006dd0 <core_set_error>
 800674c:	e7c9      	b.n	80066e2 <ai_platform_network_init+0x16a>
 800674e:	e7fe      	b.n	800674e <ai_platform_network_init+0x1d6>
 8006750:	8928      	ldrh	r0, [r5, #8]
 8006752:	88ea      	ldrh	r2, [r5, #6]
 8006754:	68eb      	ldr	r3, [r5, #12]
 8006756:	fb02 f200 	mul.w	r2, r2, r0
 800675a:	fb03 f302 	mul.w	r3, r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	f43f af52 	beq.w	8006608 <ai_platform_network_init+0x90>
 8006764:	f104 0010 	add.w	r0, r4, #16
 8006768:	2212      	movs	r2, #18
 800676a:	2110      	movs	r1, #16
 800676c:	4664      	mov	r4, ip
 800676e:	f000 fb2f 	bl	8006dd0 <core_set_error>
 8006772:	e7b6      	b.n	80066e2 <ai_platform_network_init+0x16a>
 8006774:	a1c00100 	.word	0xa1c00100
 8006778:	e0002000 	.word	0xe0002000
 800677c:	e0042000 	.word	0xe0042000
 8006780:	58024c08 	.word	0x58024c08
 8006784:	58024c00 	.word	0x58024c00
 8006788:	f407a5c2 	.word	0xf407a5c2
 800678c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006790:	40023008 	.word	0x40023008
 8006794:	40023000 	.word	0x40023000
 8006798:	a1facade 	.word	0xa1facade

0800679c <ai_platform_network_post_init>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	b120      	cbz	r0, 80067aa <ai_platform_network_post_init+0xe>
 80067a0:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <ai_platform_network_post_init+0x104>)
 80067a2:	6802      	ldr	r2, [r0, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	4604      	mov	r4, r0
 80067a8:	d02d      	beq.n	8006806 <ai_platform_network_post_init+0x6a>
 80067aa:	4a3e      	ldr	r2, [pc, #248]	; (80068a4 <ai_platform_network_post_init+0x108>)
 80067ac:	6813      	ldr	r3, [r2, #0]
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	f7ff f896 	bl	80058e4 <_ai_platform_acquire_crc>
 80067b8:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <ai_platform_network_post_init+0x10c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c4:	d00d      	beq.n	80067e2 <ai_platform_network_post_init+0x46>
 80067c6:	4b39      	ldr	r3, [pc, #228]	; (80068ac <ai_platform_network_post_init+0x110>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	d1fc      	bne.n	80067cc <ai_platform_network_post_init+0x30>
 80067d2:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <ai_platform_network_post_init+0x114>)
 80067d4:	4a37      	ldr	r2, [pc, #220]	; (80068b4 <ai_platform_network_post_init+0x118>)
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b37      	ldr	r3, [pc, #220]	; (80068b8 <ai_platform_network_post_init+0x11c>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	d00d      	beq.n	80067fc <ai_platform_network_post_init+0x60>
 80067e0:	e7fe      	b.n	80067e0 <ai_platform_network_post_init+0x44>
 80067e2:	4b36      	ldr	r3, [pc, #216]	; (80068bc <ai_platform_network_post_init+0x120>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	2a00      	cmp	r2, #0
 80067ec:	d1fc      	bne.n	80067e8 <ai_platform_network_post_init+0x4c>
 80067ee:	4b34      	ldr	r3, [pc, #208]	; (80068c0 <ai_platform_network_post_init+0x124>)
 80067f0:	4a30      	ldr	r2, [pc, #192]	; (80068b4 <ai_platform_network_post_init+0x118>)
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b30      	ldr	r3, [pc, #192]	; (80068b8 <ai_platform_network_post_init+0x11c>)
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d103      	bne.n	8006804 <ai_platform_network_post_init+0x68>
 80067fc:	f7ff f874 	bl	80058e8 <_ai_platform_release_crc>
 8006800:	2000      	movs	r0, #0
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	e7fe      	b.n	8006804 <ai_platform_network_post_init+0x68>
 8006806:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <ai_platform_network_post_init+0x108>)
 8006808:	6813      	ldr	r3, [r2, #0]
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	f7ff f868 	bl	80058e4 <_ai_platform_acquire_crc>
 8006814:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <ai_platform_network_post_init+0x10c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800681c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006820:	d00d      	beq.n	800683e <ai_platform_network_post_init+0xa2>
 8006822:	4b22      	ldr	r3, [pc, #136]	; (80068ac <ai_platform_network_post_init+0x110>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	2a00      	cmp	r2, #0
 800682c:	d1fc      	bne.n	8006828 <ai_platform_network_post_init+0x8c>
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <ai_platform_network_post_init+0x114>)
 8006830:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <ai_platform_network_post_init+0x118>)
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <ai_platform_network_post_init+0x11c>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d00e      	beq.n	800685a <ai_platform_network_post_init+0xbe>
 800683c:	e7fe      	b.n	800683c <ai_platform_network_post_init+0xa0>
 800683e:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <ai_platform_network_post_init+0x120>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	2a00      	cmp	r2, #0
 8006848:	d1fc      	bne.n	8006844 <ai_platform_network_post_init+0xa8>
 800684a:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <ai_platform_network_post_init+0x124>)
 800684c:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <ai_platform_network_post_init+0x118>)
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <ai_platform_network_post_init+0x11c>)
 8006854:	429a      	cmp	r2, r3
 8006856:	d000      	beq.n	800685a <ai_platform_network_post_init+0xbe>
 8006858:	e7fe      	b.n	8006858 <ai_platform_network_post_init+0xbc>
 800685a:	f7ff f845 	bl	80058e8 <_ai_platform_release_crc>
 800685e:	68e3      	ldr	r3, [r4, #12]
 8006860:	f013 0502 	ands.w	r5, r3, #2
 8006864:	d011      	beq.n	800688a <ai_platform_network_post_init+0xee>
 8006866:	4620      	mov	r0, r4
 8006868:	f000 fc1a 	bl	80070a0 <ai_layers_post_init_all>
 800686c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800686e:	b1a3      	cbz	r3, 800689a <ai_platform_network_post_init+0xfe>
 8006870:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006872:	b195      	cbz	r5, 800689a <ai_platform_network_post_init+0xfe>
 8006874:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006876:	4629      	mov	r1, r5
 8006878:	2000      	movs	r0, #0
 800687a:	4798      	blx	r3
 800687c:	692b      	ldr	r3, [r5, #16]
 800687e:	42ab      	cmp	r3, r5
 8006880:	d00b      	beq.n	800689a <ai_platform_network_post_init+0xfe>
 8006882:	461d      	mov	r5, r3
 8006884:	b14b      	cbz	r3, 800689a <ai_platform_network_post_init+0xfe>
 8006886:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006888:	e7f4      	b.n	8006874 <ai_platform_network_post_init+0xd8>
 800688a:	f104 0010 	add.w	r0, r4, #16
 800688e:	2210      	movs	r2, #16
 8006890:	2111      	movs	r1, #17
 8006892:	f000 fa9d 	bl	8006dd0 <core_set_error>
 8006896:	4628      	mov	r0, r5
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	2001      	movs	r0, #1
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	a1c00100 	.word	0xa1c00100
 80068a4:	e0002000 	.word	0xe0002000
 80068a8:	e0042000 	.word	0xe0042000
 80068ac:	58024c08 	.word	0x58024c08
 80068b0:	58024c00 	.word	0x58024c00
 80068b4:	f407a5c2 	.word	0xf407a5c2
 80068b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80068bc:	40023008 	.word	0x40023008
 80068c0:	40023000 	.word	0x40023000

080068c4 <ai_platform_network_process>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	b085      	sub	sp, #20
 80068ca:	460d      	mov	r5, r1
 80068cc:	9202      	str	r2, [sp, #8]
 80068ce:	4604      	mov	r4, r0
 80068d0:	b120      	cbz	r0, 80068dc <ai_platform_network_process+0x18>
 80068d2:	4b7b      	ldr	r3, [pc, #492]	; (8006ac0 <ai_platform_network_process+0x1fc>)
 80068d4:	6802      	ldr	r2, [r0, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bf18      	it	ne
 80068da:	2400      	movne	r4, #0
 80068dc:	4a79      	ldr	r2, [pc, #484]	; (8006ac4 <ai_platform_network_process+0x200>)
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	f7fe fffd 	bl	80058e4 <_ai_platform_acquire_crc>
 80068ea:	4b77      	ldr	r3, [pc, #476]	; (8006ac8 <ai_platform_network_process+0x204>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f6:	d00d      	beq.n	8006914 <ai_platform_network_process+0x50>
 80068f8:	4b74      	ldr	r3, [pc, #464]	; (8006acc <ai_platform_network_process+0x208>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	2a00      	cmp	r2, #0
 8006902:	d1fc      	bne.n	80068fe <ai_platform_network_process+0x3a>
 8006904:	4b72      	ldr	r3, [pc, #456]	; (8006ad0 <ai_platform_network_process+0x20c>)
 8006906:	4a73      	ldr	r2, [pc, #460]	; (8006ad4 <ai_platform_network_process+0x210>)
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b72      	ldr	r3, [pc, #456]	; (8006ad8 <ai_platform_network_process+0x214>)
 800690e:	429a      	cmp	r2, r3
 8006910:	d00e      	beq.n	8006930 <ai_platform_network_process+0x6c>
 8006912:	e7fe      	b.n	8006912 <ai_platform_network_process+0x4e>
 8006914:	4b71      	ldr	r3, [pc, #452]	; (8006adc <ai_platform_network_process+0x218>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	2a00      	cmp	r2, #0
 800691e:	d1fc      	bne.n	800691a <ai_platform_network_process+0x56>
 8006920:	4b6f      	ldr	r3, [pc, #444]	; (8006ae0 <ai_platform_network_process+0x21c>)
 8006922:	4a6c      	ldr	r2, [pc, #432]	; (8006ad4 <ai_platform_network_process+0x210>)
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b6b      	ldr	r3, [pc, #428]	; (8006ad8 <ai_platform_network_process+0x214>)
 800692a:	429a      	cmp	r2, r3
 800692c:	d000      	beq.n	8006930 <ai_platform_network_process+0x6c>
 800692e:	e7fe      	b.n	800692e <ai_platform_network_process+0x6a>
 8006930:	f7fe ffda 	bl	80058e8 <_ai_platform_release_crc>
 8006934:	2c00      	cmp	r4, #0
 8006936:	f000 808e 	beq.w	8006a56 <ai_platform_network_process+0x192>
 800693a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800693c:	2f00      	cmp	r7, #0
 800693e:	f040 823c 	bne.w	8006dba <ai_platform_network_process+0x4f6>
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	f04f 0b00 	mov.w	fp, #0
 800694c:	2b03      	cmp	r3, #3
 800694e:	f8c4 b014 	str.w	fp, [r4, #20]
 8006952:	f040 822b 	bne.w	8006dac <ai_platform_network_process+0x4e8>
 8006956:	2d00      	cmp	r5, #0
 8006958:	f000 80a8 	beq.w	8006aac <ai_platform_network_process+0x1e8>
 800695c:	2f00      	cmp	r7, #0
 800695e:	f000 80a5 	beq.w	8006aac <ai_platform_network_process+0x1e8>
 8006962:	883b      	ldrh	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80a1 	beq.w	8006aac <ai_platform_network_process+0x1e8>
 800696a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800696e:	9401      	str	r4, [sp, #4]
 8006970:	46d8      	mov	r8, fp
 8006972:	4598      	cmp	r8, r3
 8006974:	f080 80b6 	bcs.w	8006ae4 <ai_platform_network_process+0x220>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80b2 	beq.w	8006ae4 <ai_platform_network_process+0x220>
 8006980:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006984:	2e00      	cmp	r6, #0
 8006986:	f000 80ad 	beq.w	8006ae4 <ai_platform_network_process+0x220>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006994:	eb13 0a04 	adds.w	sl, r3, r4
 8006998:	f000 8087 	beq.w	8006aaa <ai_platform_network_process+0x1e6>
 800699c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80069a0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80069a4:	69b0      	ldr	r0, [r6, #24]
 80069a6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80069aa:	6841      	ldr	r1, [r0, #4]
 80069ac:	fb0b f30e 	mul.w	r3, fp, lr
 80069b0:	fb0c f303 	mul.w	r3, ip, r3
 80069b4:	4299      	cmp	r1, r3
 80069b6:	d36e      	bcc.n	8006a96 <ai_platform_network_process+0x1d2>
 80069b8:	68f3      	ldr	r3, [r6, #12]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	455a      	cmp	r2, fp
 80069be:	d16a      	bne.n	8006a96 <ai_platform_network_process+0x1d2>
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	4572      	cmp	r2, lr
 80069c4:	d167      	bne.n	8006a96 <ai_platform_network_process+0x1d2>
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	459c      	cmp	ip, r3
 80069ca:	d164      	bne.n	8006a96 <ai_platform_network_process+0x1d2>
 80069cc:	6800      	ldr	r0, [r0, #0]
 80069ce:	f000 ffbf 	bl	8007950 <ai_array_get_byte_size>
 80069d2:	68f2      	ldr	r2, [r6, #12]
 80069d4:	6973      	ldr	r3, [r6, #20]
 80069d6:	68d2      	ldr	r2, [r2, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	fb03 f302 	mul.w	r3, r3, r2
 80069de:	4298      	cmp	r0, r3
 80069e0:	d359      	bcc.n	8006a96 <ai_platform_network_process+0x1d2>
 80069e2:	69b3      	ldr	r3, [r6, #24]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	f000 ff5b 	bl	80078a0 <ai_array_to_buffer_fmt>
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	4043      	eors	r3, r0
 80069ee:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80069f2:	d146      	bne.n	8006a82 <ai_platform_network_process+0x1be>
 80069f4:	692b      	ldr	r3, [r5, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03a      	beq.n	8006a70 <ai_platform_network_process+0x1ac>
 80069fa:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80069fe:	f1bb 0f00 	cmp.w	fp, #0
 8006a02:	d02d      	beq.n	8006a60 <ai_platform_network_process+0x19c>
 8006a04:	68f2      	ldr	r2, [r6, #12]
 8006a06:	6973      	ldr	r3, [r6, #20]
 8006a08:	68d1      	ldr	r1, [r2, #12]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	fb02 f201 	mul.w	r2, r2, r1
 8006a10:	f8ca 2008 	str.w	r2, [sl, #8]
 8006a14:	88ab      	ldrh	r3, [r5, #4]
 8006a16:	fb02 f203 	mul.w	r2, r2, r3
 8006a1a:	f8ca 200c 	str.w	r2, [sl, #12]
 8006a1e:	6929      	ldr	r1, [r5, #16]
 8006a20:	f8ca 1004 	str.w	r1, [sl, #4]
 8006a24:	692b      	ldr	r3, [r5, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	9a03      	ldr	r2, [sp, #12]
 8006a2a:	5113      	str	r3, [r2, r4]
 8006a2c:	69b0      	ldr	r0, [r6, #24]
 8006a2e:	6803      	ldr	r3, [r0, #0]
 8006a30:	45d9      	cmp	r9, fp
 8006a32:	bf38      	it	cc
 8006a34:	46d9      	movcc	r9, fp
 8006a36:	009a      	lsls	r2, r3, #2
 8006a38:	d408      	bmi.n	8006a4c <ai_platform_network_process+0x188>
 8006a3a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	4419      	add	r1, r3
 8006a42:	6081      	str	r1, [r0, #8]
 8006a44:	69b3      	ldr	r3, [r6, #24]
 8006a46:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006a4a:	60da      	str	r2, [r3, #12]
 8006a4c:	883b      	ldrh	r3, [r7, #0]
 8006a4e:	f108 0801 	add.w	r8, r8, #1
 8006a52:	3518      	adds	r5, #24
 8006a54:	e78d      	b.n	8006972 <ai_platform_network_process+0xae>
 8006a56:	46a3      	mov	fp, r4
 8006a58:	4658      	mov	r0, fp
 8006a5a:	b005      	add	sp, #20
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	9c01      	ldr	r4, [sp, #4]
 8006a62:	2221      	movs	r2, #33	; 0x21
 8006a64:	f104 0010 	add.w	r0, r4, #16
 8006a68:	2112      	movs	r1, #18
 8006a6a:	f000 f9b1 	bl	8006dd0 <core_set_error>
 8006a6e:	e7f3      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006a70:	9c01      	ldr	r4, [sp, #4]
 8006a72:	2217      	movs	r2, #23
 8006a74:	f104 0010 	add.w	r0, r4, #16
 8006a78:	2112      	movs	r1, #18
 8006a7a:	469b      	mov	fp, r3
 8006a7c:	f000 f9a8 	bl	8006dd0 <core_set_error>
 8006a80:	e7ea      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006a82:	9c01      	ldr	r4, [sp, #4]
 8006a84:	2219      	movs	r2, #25
 8006a86:	f104 0010 	add.w	r0, r4, #16
 8006a8a:	2112      	movs	r1, #18
 8006a8c:	f000 f9a0 	bl	8006dd0 <core_set_error>
 8006a90:	f04f 0b00 	mov.w	fp, #0
 8006a94:	e7e0      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006a96:	9c01      	ldr	r4, [sp, #4]
 8006a98:	2218      	movs	r2, #24
 8006a9a:	f104 0010 	add.w	r0, r4, #16
 8006a9e:	2112      	movs	r1, #18
 8006aa0:	f000 f996 	bl	8006dd0 <core_set_error>
 8006aa4:	f04f 0b00 	mov.w	fp, #0
 8006aa8:	e7d6      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006aaa:	9c01      	ldr	r4, [sp, #4]
 8006aac:	f104 0010 	add.w	r0, r4, #16
 8006ab0:	2217      	movs	r2, #23
 8006ab2:	2112      	movs	r1, #18
 8006ab4:	f000 f98c 	bl	8006dd0 <core_set_error>
 8006ab8:	f04f 0b00 	mov.w	fp, #0
 8006abc:	e7cc      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006abe:	bf00      	nop
 8006ac0:	a1c00100 	.word	0xa1c00100
 8006ac4:	e0002000 	.word	0xe0002000
 8006ac8:	e0042000 	.word	0xe0042000
 8006acc:	58024c08 	.word	0x58024c08
 8006ad0:	58024c00 	.word	0x58024c00
 8006ad4:	f407a5c2 	.word	0xf407a5c2
 8006ad8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006adc:	40023008 	.word	0x40023008
 8006ae0:	40023000 	.word	0x40023000
 8006ae4:	9c01      	ldr	r4, [sp, #4]
 8006ae6:	9a02      	ldr	r2, [sp, #8]
 8006ae8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	f000 80a9 	beq.w	8006c42 <ai_platform_network_process+0x37e>
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f240 809b 	bls.w	8006c2c <ai_platform_network_process+0x368>
 8006af6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8006afa:	f11a 0f0c 	cmn.w	sl, #12
 8006afe:	f000 8095 	beq.w	8006c2c <ai_platform_network_process+0x368>
 8006b02:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8090 	beq.w	8006c2c <ai_platform_network_process+0x368>
 8006b0c:	9d02      	ldr	r5, [sp, #8]
 8006b0e:	9401      	str	r4, [sp, #4]
 8006b10:	f04f 0800 	mov.w	r8, #0
 8006b14:	4598      	cmp	r8, r3
 8006b16:	f080 8092 	bcs.w	8006c3e <ai_platform_network_process+0x37a>
 8006b1a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 808d 	beq.w	8006c3e <ai_platform_network_process+0x37a>
 8006b24:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006b28:	2e00      	cmp	r6, #0
 8006b2a:	f000 8088 	beq.w	8006c3e <ai_platform_network_process+0x37a>
 8006b2e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006b3a:	191f      	adds	r7, r3, r4
 8006b3c:	f000 812d 	beq.w	8006d9a <ai_platform_network_process+0x4d6>
 8006b40:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006b44:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006b48:	69b0      	ldr	r0, [r6, #24]
 8006b4a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006b4e:	6841      	ldr	r1, [r0, #4]
 8006b50:	fb0b f30e 	mul.w	r3, fp, lr
 8006b54:	fb0c f303 	mul.w	r3, ip, r3
 8006b58:	4299      	cmp	r1, r3
 8006b5a:	d366      	bcc.n	8006c2a <ai_platform_network_process+0x366>
 8006b5c:	68f3      	ldr	r3, [r6, #12]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	455a      	cmp	r2, fp
 8006b62:	d162      	bne.n	8006c2a <ai_platform_network_process+0x366>
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	4572      	cmp	r2, lr
 8006b68:	d15f      	bne.n	8006c2a <ai_platform_network_process+0x366>
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	459c      	cmp	ip, r3
 8006b6e:	d15c      	bne.n	8006c2a <ai_platform_network_process+0x366>
 8006b70:	6800      	ldr	r0, [r0, #0]
 8006b72:	f000 feed 	bl	8007950 <ai_array_get_byte_size>
 8006b76:	68f2      	ldr	r2, [r6, #12]
 8006b78:	6973      	ldr	r3, [r6, #20]
 8006b7a:	68d2      	ldr	r2, [r2, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	fb03 f302 	mul.w	r3, r3, r2
 8006b82:	4298      	cmp	r0, r3
 8006b84:	d351      	bcc.n	8006c2a <ai_platform_network_process+0x366>
 8006b86:	69b3      	ldr	r3, [r6, #24]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f000 fe89 	bl	80078a0 <ai_array_to_buffer_fmt>
 8006b8e:	682b      	ldr	r3, [r5, #0]
 8006b90:	4043      	eors	r3, r0
 8006b92:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006b96:	d13e      	bne.n	8006c16 <ai_platform_network_process+0x352>
 8006b98:	692b      	ldr	r3, [r5, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d032      	beq.n	8006c04 <ai_platform_network_process+0x340>
 8006b9e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006ba2:	f1bb 0f00 	cmp.w	fp, #0
 8006ba6:	d025      	beq.n	8006bf4 <ai_platform_network_process+0x330>
 8006ba8:	68f2      	ldr	r2, [r6, #12]
 8006baa:	6973      	ldr	r3, [r6, #20]
 8006bac:	68d1      	ldr	r1, [r2, #12]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	fb02 f201 	mul.w	r2, r2, r1
 8006bb4:	60ba      	str	r2, [r7, #8]
 8006bb6:	88ab      	ldrh	r3, [r5, #4]
 8006bb8:	fb02 f203 	mul.w	r2, r2, r3
 8006bbc:	60fa      	str	r2, [r7, #12]
 8006bbe:	6929      	ldr	r1, [r5, #16]
 8006bc0:	6079      	str	r1, [r7, #4]
 8006bc2:	692b      	ldr	r3, [r5, #16]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	9a02      	ldr	r2, [sp, #8]
 8006bc8:	5113      	str	r3, [r2, r4]
 8006bca:	69b0      	ldr	r0, [r6, #24]
 8006bcc:	6803      	ldr	r3, [r0, #0]
 8006bce:	45d9      	cmp	r9, fp
 8006bd0:	bf38      	it	cc
 8006bd2:	46d9      	movcc	r9, fp
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	d407      	bmi.n	8006be8 <ai_platform_network_process+0x324>
 8006bd8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	4419      	add	r1, r3
 8006be0:	6081      	str	r1, [r0, #8]
 8006be2:	69b3      	ldr	r3, [r6, #24]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]
 8006be8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006bec:	f108 0801 	add.w	r8, r8, #1
 8006bf0:	3518      	adds	r5, #24
 8006bf2:	e78f      	b.n	8006b14 <ai_platform_network_process+0x250>
 8006bf4:	9c01      	ldr	r4, [sp, #4]
 8006bf6:	2221      	movs	r2, #33	; 0x21
 8006bf8:	f104 0010 	add.w	r0, r4, #16
 8006bfc:	2113      	movs	r1, #19
 8006bfe:	f000 f8e7 	bl	8006dd0 <core_set_error>
 8006c02:	e729      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006c04:	9c01      	ldr	r4, [sp, #4]
 8006c06:	2217      	movs	r2, #23
 8006c08:	f104 0010 	add.w	r0, r4, #16
 8006c0c:	2113      	movs	r1, #19
 8006c0e:	469b      	mov	fp, r3
 8006c10:	f000 f8de 	bl	8006dd0 <core_set_error>
 8006c14:	e720      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006c16:	9c01      	ldr	r4, [sp, #4]
 8006c18:	2219      	movs	r2, #25
 8006c1a:	f104 0010 	add.w	r0, r4, #16
 8006c1e:	2113      	movs	r1, #19
 8006c20:	f000 f8d6 	bl	8006dd0 <core_set_error>
 8006c24:	f04f 0b00 	mov.w	fp, #0
 8006c28:	e716      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006c2a:	9c01      	ldr	r4, [sp, #4]
 8006c2c:	f104 0010 	add.w	r0, r4, #16
 8006c30:	2218      	movs	r2, #24
 8006c32:	2113      	movs	r1, #19
 8006c34:	f000 f8cc 	bl	8006dd0 <core_set_error>
 8006c38:	f04f 0b00 	mov.w	fp, #0
 8006c3c:	e70c      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006c3e:	9c01      	ldr	r4, [sp, #4]
 8006c40:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006c42:	f8a4 9014 	strh.w	r9, [r4, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80a4 	beq.w	8006d94 <ai_platform_network_process+0x4d0>
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006c50:	f240 809e 	bls.w	8006d90 <ai_platform_network_process+0x4cc>
 8006c54:	f105 070c 	add.w	r7, r5, #12
 8006c58:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8006c5c:	8aa3      	ldrh	r3, [r4, #20]
 8006c5e:	455b      	cmp	r3, fp
 8006c60:	f67f aefa 	bls.w	8006a58 <ai_platform_network_process+0x194>
 8006c64:	9401      	str	r4, [sp, #4]
 8006c66:	2d00      	cmp	r5, #0
 8006c68:	d036      	beq.n	8006cd8 <ai_platform_network_process+0x414>
 8006c6a:	882b      	ldrh	r3, [r5, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d033      	beq.n	8006cd8 <ai_platform_network_process+0x414>
 8006c70:	686b      	ldr	r3, [r5, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d030      	beq.n	8006cd8 <ai_platform_network_process+0x414>
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f04f 0800 	mov.w	r8, #0
 8006c7c:	b9db      	cbnz	r3, 8006cb6 <ai_platform_network_process+0x3f2>
 8006c7e:	e02b      	b.n	8006cd8 <ai_platform_network_process+0x414>
 8006c80:	68d4      	ldr	r4, [r2, #12]
 8006c82:	1b00      	subs	r0, r0, r4
 8006c84:	4401      	add	r1, r0
 8006c86:	6091      	str	r1, [r2, #8]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	6872      	ldr	r2, [r6, #4]
 8006c8c:	60da      	str	r2, [r3, #12]
 8006c8e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006c92:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006c96:	440b      	add	r3, r1
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	bf24      	itt	cs
 8006c9c:	68f3      	ldrcs	r3, [r6, #12]
 8006c9e:	1ad3      	subcs	r3, r2, r3
 8006ca0:	6073      	str	r3, [r6, #4]
 8006ca2:	882b      	ldrh	r3, [r5, #0]
 8006ca4:	f108 0801 	add.w	r8, r8, #1
 8006ca8:	4598      	cmp	r8, r3
 8006caa:	d215      	bcs.n	8006cd8 <ai_platform_network_process+0x414>
 8006cac:	686b      	ldr	r3, [r5, #4]
 8006cae:	b19b      	cbz	r3, 8006cd8 <ai_platform_network_process+0x414>
 8006cb0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006cb4:	b183      	cbz	r3, 8006cd8 <ai_platform_network_process+0x414>
 8006cb6:	68a9      	ldr	r1, [r5, #8]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	f8d1 a000 	ldr.w	sl, [r1]
 8006cbe:	6814      	ldr	r4, [r2, #0]
 8006cc0:	6890      	ldr	r0, [r2, #8]
 8006cc2:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006cc6:	eb0a 0609 	add.w	r6, sl, r9
 8006cca:	00a4      	lsls	r4, r4, #2
 8006ccc:	6871      	ldr	r1, [r6, #4]
 8006cce:	d5d7      	bpl.n	8006c80 <ai_platform_network_process+0x3bc>
 8006cd0:	68b2      	ldr	r2, [r6, #8]
 8006cd2:	f000 fe89 	bl	80079e8 <memcpy>
 8006cd6:	e7da      	b.n	8006c8e <ai_platform_network_process+0x3ca>
 8006cd8:	9801      	ldr	r0, [sp, #4]
 8006cda:	f000 f9f9 	bl	80070d0 <ai_layers_forward_all>
 8006cde:	2f00      	cmp	r7, #0
 8006ce0:	d047      	beq.n	8006d72 <ai_platform_network_process+0x4ae>
 8006ce2:	883b      	ldrh	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d044      	beq.n	8006d72 <ai_platform_network_process+0x4ae>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d041      	beq.n	8006d72 <ai_platform_network_process+0x4ae>
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d03e      	beq.n	8006d72 <ai_platform_network_process+0x4ae>
 8006cf4:	f04f 0800 	mov.w	r8, #0
 8006cf8:	e019      	b.n	8006d2e <ai_platform_network_process+0x46a>
 8006cfa:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	bf24      	itt	cs
 8006d02:	68f3      	ldrcs	r3, [r6, #12]
 8006d04:	1ad3      	subcs	r3, r2, r3
 8006d06:	6073      	str	r3, [r6, #4]
 8006d08:	6981      	ldr	r1, [r0, #24]
 8006d0a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006d0e:	1b12      	subs	r2, r2, r4
 8006d10:	4413      	add	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]
 8006d14:	6983      	ldr	r3, [r0, #24]
 8006d16:	6872      	ldr	r2, [r6, #4]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	883b      	ldrh	r3, [r7, #0]
 8006d1c:	f108 0801 	add.w	r8, r8, #1
 8006d20:	4598      	cmp	r8, r3
 8006d22:	d226      	bcs.n	8006d72 <ai_platform_network_process+0x4ae>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	b323      	cbz	r3, 8006d72 <ai_platform_network_process+0x4ae>
 8006d28:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006d2c:	b308      	cbz	r0, 8006d72 <ai_platform_network_process+0x4ae>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6981      	ldr	r1, [r0, #24]
 8006d32:	f8d3 a000 	ldr.w	sl, [r3]
 8006d36:	680c      	ldr	r4, [r1, #0]
 8006d38:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006d3c:	eb0a 0609 	add.w	r6, sl, r9
 8006d40:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8006d44:	00a4      	lsls	r4, r4, #2
 8006d46:	eb0c 0302 	add.w	r3, ip, r2
 8006d4a:	d5d6      	bpl.n	8006cfa <ai_platform_network_process+0x436>
 8006d4c:	6889      	ldr	r1, [r1, #8]
 8006d4e:	4660      	mov	r0, ip
 8006d50:	f000 fe4a 	bl	80079e8 <memcpy>
 8006d54:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006d58:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006d5c:	440b      	add	r3, r1
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	bf24      	itt	cs
 8006d62:	68f3      	ldrcs	r3, [r6, #12]
 8006d64:	1ad3      	subcs	r3, r2, r3
 8006d66:	6073      	str	r3, [r6, #4]
 8006d68:	883b      	ldrh	r3, [r7, #0]
 8006d6a:	f108 0801 	add.w	r8, r8, #1
 8006d6e:	4598      	cmp	r8, r3
 8006d70:	d3d8      	bcc.n	8006d24 <ai_platform_network_process+0x460>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f10b 0b01 	add.w	fp, fp, #1
 8006d7e:	8a9b      	ldrh	r3, [r3, #20]
 8006d80:	fa1f fb8b 	uxth.w	fp, fp
 8006d84:	455b      	cmp	r3, fp
 8006d86:	f8a2 b016 	strh.w	fp, [r2, #22]
 8006d8a:	f63f af6c 	bhi.w	8006c66 <ai_platform_network_process+0x3a2>
 8006d8e:	e663      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006d90:	2700      	movs	r7, #0
 8006d92:	e761      	b.n	8006c58 <ai_platform_network_process+0x394>
 8006d94:	461d      	mov	r5, r3
 8006d96:	461f      	mov	r7, r3
 8006d98:	e75e      	b.n	8006c58 <ai_platform_network_process+0x394>
 8006d9a:	9c01      	ldr	r4, [sp, #4]
 8006d9c:	2217      	movs	r2, #23
 8006d9e:	f104 0010 	add.w	r0, r4, #16
 8006da2:	2113      	movs	r1, #19
 8006da4:	f000 f814 	bl	8006dd0 <core_set_error>
 8006da8:	46bb      	mov	fp, r7
 8006daa:	e655      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006dac:	f104 0010 	add.w	r0, r4, #16
 8006db0:	2230      	movs	r2, #48	; 0x30
 8006db2:	2111      	movs	r1, #17
 8006db4:	f000 f80c 	bl	8006dd0 <core_set_error>
 8006db8:	e64e      	b.n	8006a58 <ai_platform_network_process+0x194>
 8006dba:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006dbc:	e5c1      	b.n	8006942 <ai_platform_network_process+0x7e>
 8006dbe:	bf00      	nop

08006dc0 <core_init>:
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	4770      	bx	lr

08006dc4 <core_get_error>:
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	6800      	ldr	r0, [r0, #0]
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <core_set_error>:
 8006dd0:	7803      	ldrb	r3, [r0, #0]
 8006dd2:	b933      	cbnz	r3, 8006de2 <core_set_error+0x12>
 8006dd4:	7001      	strb	r1, [r0, #0]
 8006dd6:	6803      	ldr	r3, [r0, #0]
 8006dd8:	f362 231f 	bfi	r3, r2, #8, #24
 8006ddc:	6003      	str	r3, [r0, #0]
 8006dde:	2001      	movs	r0, #1
 8006de0:	4770      	bx	lr
 8006de2:	2000      	movs	r0, #0
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop

08006de8 <forward_dense_integer_SSSA>:
 8006de8:	6983      	ldr	r3, [r0, #24]
 8006dea:	8818      	ldrh	r0, [r3, #0]
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f000 80b5 	beq.w	8006f5c <forward_dense_integer_SSSA+0x174>
 8006df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df6:	685c      	ldr	r4, [r3, #4]
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	b091      	sub	sp, #68	; 0x44
 8006dfc:	b103      	cbz	r3, 8006e00 <forward_dense_integer_SSSA+0x18>
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2801      	cmp	r0, #1
 8006e02:	f240 80a2 	bls.w	8006f4a <forward_dense_integer_SSSA+0x162>
 8006e06:	6922      	ldr	r2, [r4, #16]
 8006e08:	b102      	cbz	r2, 8006e0c <forward_dense_integer_SSSA+0x24>
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	2802      	cmp	r0, #2
 8006e0e:	f000 80a2 	beq.w	8006f56 <forward_dense_integer_SSSA+0x16e>
 8006e12:	69e5      	ldr	r5, [r4, #28]
 8006e14:	2d00      	cmp	r5, #0
 8006e16:	f000 80fa 	beq.w	800700e <forward_dense_integer_SSSA+0x226>
 8006e1a:	6829      	ldr	r1, [r5, #0]
 8006e1c:	f114 0618 	adds.w	r6, r4, #24
 8006e20:	d007      	beq.n	8006e32 <forward_dense_integer_SSSA+0x4a>
 8006e22:	8b26      	ldrh	r6, [r4, #24]
 8006e24:	2e01      	cmp	r6, #1
 8006e26:	f240 80e0 	bls.w	8006fea <forward_dense_integer_SSSA+0x202>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	f000 80d4 	beq.w	8006fd8 <forward_dense_integer_SSSA+0x1f0>
 8006e30:	686e      	ldr	r6, [r5, #4]
 8006e32:	2803      	cmp	r0, #3
 8006e34:	f000 808c 	beq.w	8006f50 <forward_dense_integer_SSSA+0x168>
 8006e38:	68d0      	ldr	r0, [r2, #12]
 8006e3a:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8006e3e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8006e42:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006e44:	699c      	ldr	r4, [r3, #24]
 8006e46:	e9d0 c702 	ldrd	ip, r7, [r0, #8]
 8006e4a:	68d8      	ldr	r0, [r3, #12]
 8006e4c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8006e50:	f8de 0008 	ldr.w	r0, [lr, #8]
 8006e54:	900c      	str	r0, [sp, #48]	; 0x30
 8006e56:	fa1f f68a 	uxth.w	r6, sl
 8006e5a:	960d      	str	r6, [sp, #52]	; 0x34
 8006e5c:	fa1f f68b 	uxth.w	r6, fp
 8006e60:	6990      	ldr	r0, [r2, #24]
 8006e62:	960b      	str	r6, [sp, #44]	; 0x2c
 8006e64:	fb0c f807 	mul.w	r8, ip, r7
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	f000 80a7 	beq.w	8006fbc <forward_dense_integer_SSSA+0x1d4>
 8006e6e:	682d      	ldr	r5, [r5, #0]
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	f000 80a3 	beq.w	8006fbc <forward_dense_integer_SSSA+0x1d4>
 8006e76:	69ad      	ldr	r5, [r5, #24]
 8006e78:	68ad      	ldr	r5, [r5, #8]
 8006e7a:	9508      	str	r5, [sp, #32]
 8006e7c:	681f      	ldr	r7, [r3, #0]
 8006e7e:	698b      	ldr	r3, [r1, #24]
 8006e80:	6812      	ldr	r2, [r2, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	68a5      	ldr	r5, [r4, #8]
 8006e86:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8006e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8c:	f8d1 c000 	ldr.w	ip, [r1]
 8006e90:	2f00      	cmp	r7, #0
 8006e92:	d072      	beq.n	8006f7a <forward_dense_integer_SSSA+0x192>
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4604      	mov	r4, r0
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d061      	beq.n	8006f60 <forward_dense_integer_SSSA+0x178>
 8006e9c:	887b      	ldrh	r3, [r7, #2]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 808e 	beq.w	8006fc0 <forward_dense_integer_SSSA+0x1d8>
 8006ea4:	6801      	ldr	r1, [r0, #0]
 8006ea6:	edd1 7a00 	vldr	s15, [r1]
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	f000 80aa 	beq.w	8007004 <forward_dense_integer_SSSA+0x21c>
 8006eb0:	6856      	ldr	r6, [r2, #4]
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	f000 8089 	beq.w	8006fca <forward_dense_integer_SSSA+0x1e2>
 8006eb8:	8851      	ldrh	r1, [r2, #2]
 8006eba:	2900      	cmp	r1, #0
 8006ebc:	d067      	beq.n	8006f8e <forward_dense_integer_SSSA+0x1a6>
 8006ebe:	6833      	ldr	r3, [r6, #0]
 8006ec0:	ed93 0a00 	vldr	s0, [r3]
 8006ec4:	2f00      	cmp	r7, #0
 8006ec6:	f040 8092 	bne.w	8006fee <forward_dense_integer_SSSA+0x206>
 8006eca:	6873      	ldr	r3, [r6, #4]
 8006ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8006ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed2:	f1bc 0f00 	cmp.w	ip, #0
 8006ed6:	d04a      	beq.n	8006f6e <forward_dense_integer_SSSA+0x186>
 8006ed8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d046      	beq.n	8006f6e <forward_dense_integer_SSSA+0x186>
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2400      	movs	r4, #0
 8006ee4:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
 8006ee8:	940f      	str	r4, [sp, #60]	; 0x3c
 8006eea:	ed93 7a00 	vldr	s14, [r3]
 8006eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ef2:	f10d 063a 	add.w	r6, sp, #58	; 0x3a
 8006ef6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006efa:	4630      	mov	r0, r6
 8006efc:	f000 f94e 	bl	800719c <align_factor>
 8006f00:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f02:	f1b8 0f00 	cmp.w	r8, #0
 8006f06:	d01d      	beq.n	8006f44 <forward_dense_integer_SSSA+0x15c>
 8006f08:	4623      	mov	r3, r4
 8006f0a:	fa1f fb8b 	uxth.w	fp, fp
 8006f0e:	464c      	mov	r4, r9
 8006f10:	fa1f fa8a 	uxth.w	sl, sl
 8006f14:	4699      	mov	r9, r3
 8006f16:	9b08      	ldr	r3, [sp, #32]
 8006f18:	9601      	str	r6, [sp, #4]
 8006f1a:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f28:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8006f2c:	ab0f      	add	r3, sp, #60	; 0x3c
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	4628      	mov	r0, r5
 8006f32:	f109 0901 	add.w	r9, r9, #1
 8006f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f38:	f000 f998 	bl	800726c <st_sssa8_fully_connected>
 8006f3c:	45c1      	cmp	r9, r8
 8006f3e:	4454      	add	r4, sl
 8006f40:	445d      	add	r5, fp
 8006f42:	d1e8      	bne.n	8006f16 <forward_dense_integer_SSSA+0x12e>
 8006f44:	b011      	add	sp, #68	; 0x44
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	deff      	udf	#255	; 0xff
 8006f50:	2300      	movs	r3, #0
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	deff      	udf	#255	; 0xff
 8006f56:	2300      	movs	r3, #0
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	deff      	udf	#255	; 0xff
 8006f5c:	6843      	ldr	r3, [r0, #4]
 8006f5e:	deff      	udf	#255	; 0xff
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d03b      	beq.n	8006fdc <forward_dense_integer_SSSA+0x1f4>
 8006f64:	6856      	ldr	r6, [r2, #4]
 8006f66:	b96e      	cbnz	r6, 8006f84 <forward_dense_integer_SSSA+0x19c>
 8006f68:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006f6c:	e012      	b.n	8006f94 <forward_dense_integer_SSSA+0x1ac>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8006f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	deff      	udf	#255	; 0xff
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	d02e      	beq.n	8006fdc <forward_dense_integer_SSSA+0x1f4>
 8006f7e:	6856      	ldr	r6, [r2, #4]
 8006f80:	2e00      	cmp	r6, #0
 8006f82:	d039      	beq.n	8006ff8 <forward_dense_integer_SSSA+0x210>
 8006f84:	8851      	ldrh	r1, [r2, #2]
 8006f86:	eddf 7a26 	vldr	s15, [pc, #152]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d197      	bne.n	8006ebe <forward_dense_integer_SSSA+0xd6>
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	d035      	beq.n	8006ffe <forward_dense_integer_SSSA+0x216>
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4604      	mov	r4, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d03b      	beq.n	8007012 <forward_dense_integer_SSSA+0x22a>
 8006f9a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006f9e:	887f      	ldrh	r7, [r7, #2]
 8006fa0:	b12f      	cbz	r7, 8006fae <forward_dense_integer_SSSA+0x1c6>
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	f993 7000 	ldrsb.w	r7, [r3]
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	d036      	beq.n	800701a <forward_dense_integer_SSSA+0x232>
 8006fac:	6856      	ldr	r6, [r2, #4]
 8006fae:	b156      	cbz	r6, 8006fc6 <forward_dense_integer_SSSA+0x1de>
 8006fb0:	8851      	ldrh	r1, [r2, #2]
 8006fb2:	2900      	cmp	r1, #0
 8006fb4:	d189      	bne.n	8006eca <forward_dense_integer_SSSA+0xe2>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8006fba:	e78a      	b.n	8006ed2 <forward_dense_integer_SSSA+0xea>
 8006fbc:	9508      	str	r5, [sp, #32]
 8006fbe:	e75d      	b.n	8006e7c <forward_dense_integer_SSSA+0x94>
 8006fc0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006fc4:	e771      	b.n	8006eaa <forward_dense_integer_SSSA+0xc2>
 8006fc6:	960a      	str	r6, [sp, #40]	; 0x28
 8006fc8:	e783      	b.n	8006ed2 <forward_dense_integer_SSSA+0xea>
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	d1e2      	bne.n	8006f94 <forward_dense_integer_SSSA+0x1ac>
 8006fce:	2700      	movs	r7, #0
 8006fd0:	970a      	str	r7, [sp, #40]	; 0x28
 8006fd2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006fd6:	e77c      	b.n	8006ed2 <forward_dense_integer_SSSA+0xea>
 8006fd8:	462e      	mov	r6, r5
 8006fda:	e72a      	b.n	8006e32 <forward_dense_integer_SSSA+0x4a>
 8006fdc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8006fe2:	4617      	mov	r7, r2
 8006fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe8:	e773      	b.n	8006ed2 <forward_dense_integer_SSSA+0xea>
 8006fea:	2600      	movs	r6, #0
 8006fec:	e721      	b.n	8006e32 <forward_dense_integer_SSSA+0x4a>
 8006fee:	687c      	ldr	r4, [r7, #4]
 8006ff0:	2c00      	cmp	r4, #0
 8006ff2:	d1d4      	bne.n	8006f9e <forward_dense_integer_SSSA+0x1b6>
 8006ff4:	4627      	mov	r7, r4
 8006ff6:	e7dc      	b.n	8006fb2 <forward_dense_integer_SSSA+0x1ca>
 8006ff8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8006ffc:	e7e7      	b.n	8006fce <forward_dense_integer_SSSA+0x1e6>
 8006ffe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8007002:	e7d8      	b.n	8006fb6 <forward_dense_integer_SSSA+0x1ce>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0e2      	beq.n	8006fce <forward_dense_integer_SSSA+0x1e6>
 8007008:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007020 <forward_dense_integer_SSSA+0x238>
 800700c:	e7c9      	b.n	8006fa2 <forward_dense_integer_SSSA+0x1ba>
 800700e:	4629      	mov	r1, r5
 8007010:	e704      	b.n	8006e1c <forward_dense_integer_SSSA+0x34>
 8007012:	4607      	mov	r7, r0
 8007014:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007020 <forward_dense_integer_SSSA+0x238>
 8007018:	e7c9      	b.n	8006fae <forward_dense_integer_SSSA+0x1c6>
 800701a:	920a      	str	r2, [sp, #40]	; 0x28
 800701c:	e759      	b.n	8006ed2 <forward_dense_integer_SSSA+0xea>
 800701e:	bf00      	nop
 8007020:	00000000 	.word	0x00000000

08007024 <ai_check_custom_types>:
 8007024:	4b13      	ldr	r3, [pc, #76]	; (8007074 <ai_check_custom_types+0x50>)
 8007026:	b082      	sub	sp, #8
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	b118      	cbz	r0, 8007036 <ai_check_custom_types+0x12>
 800702e:	7803      	ldrb	r3, [r0, #0]
 8007030:	2b03      	cmp	r3, #3
 8007032:	d002      	beq.n	800703a <ai_check_custom_types+0x16>
 8007034:	2000      	movs	r0, #0
 8007036:	b002      	add	sp, #8
 8007038:	4770      	bx	lr
 800703a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800703e:	4293      	cmp	r3, r2
 8007040:	d004      	beq.n	800704c <ai_check_custom_types+0x28>
 8007042:	2001      	movs	r0, #1
 8007044:	f080 0001 	eor.w	r0, r0, #1
 8007048:	b002      	add	sp, #8
 800704a:	4770      	bx	lr
 800704c:	7842      	ldrb	r2, [r0, #1]
 800704e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007052:	429a      	cmp	r2, r3
 8007054:	f100 0001 	add.w	r0, r0, #1
 8007058:	d1f3      	bne.n	8007042 <ai_check_custom_types+0x1e>
 800705a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800705e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007062:	429a      	cmp	r2, r3
 8007064:	d1ed      	bne.n	8007042 <ai_check_custom_types+0x1e>
 8007066:	7842      	ldrb	r2, [r0, #1]
 8007068:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800706c:	429a      	cmp	r2, r3
 800706e:	d1e8      	bne.n	8007042 <ai_check_custom_types+0x1e>
 8007070:	2000      	movs	r0, #0
 8007072:	e7e7      	b.n	8007044 <ai_check_custom_types+0x20>
 8007074:	08008c00 	.word	0x08008c00

08007078 <ai_layers_init_all>:
 8007078:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800707a:	b17a      	cbz	r2, 800709c <ai_layers_init_all+0x24>
 800707c:	6913      	ldr	r3, [r2, #16]
 800707e:	60d0      	str	r0, [r2, #12]
 8007080:	429a      	cmp	r2, r3
 8007082:	f04f 0201 	mov.w	r2, #1
 8007086:	d009      	beq.n	800709c <ai_layers_init_all+0x24>
 8007088:	b143      	cbz	r3, 800709c <ai_layers_init_all+0x24>
 800708a:	6919      	ldr	r1, [r3, #16]
 800708c:	60d8      	str	r0, [r3, #12]
 800708e:	4299      	cmp	r1, r3
 8007090:	f102 0201 	add.w	r2, r2, #1
 8007094:	d002      	beq.n	800709c <ai_layers_init_all+0x24>
 8007096:	460b      	mov	r3, r1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f6      	bne.n	800708a <ai_layers_init_all+0x12>
 800709c:	4610      	mov	r0, r2
 800709e:	4770      	bx	lr

080070a0 <ai_layers_post_init_all>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80070a4:	b18c      	cbz	r4, 80070ca <ai_layers_post_init_all+0x2a>
 80070a6:	2500      	movs	r5, #0
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	f013 0f01 	tst.w	r3, #1
 80070ae:	4620      	mov	r0, r4
 80070b0:	d003      	beq.n	80070ba <ai_layers_post_init_all+0x1a>
 80070b2:	6a23      	ldr	r3, [r4, #32]
 80070b4:	b10b      	cbz	r3, 80070ba <ai_layers_post_init_all+0x1a>
 80070b6:	4798      	blx	r3
 80070b8:	3501      	adds	r5, #1
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d002      	beq.n	80070c6 <ai_layers_post_init_all+0x26>
 80070c0:	461c      	mov	r4, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <ai_layers_post_init_all+0x8>
 80070c6:	4628      	mov	r0, r5
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	4625      	mov	r5, r4
 80070cc:	e7fb      	b.n	80070c6 <ai_layers_post_init_all+0x26>
 80070ce:	bf00      	nop

080070d0 <ai_layers_forward_all>:
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d4:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80070d6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80070d8:	4604      	mov	r4, r0
 80070da:	2f00      	cmp	r7, #0
 80070dc:	d02c      	beq.n	8007138 <ai_layers_forward_all+0x68>
 80070de:	2d00      	cmp	r5, #0
 80070e0:	d03f      	beq.n	8007162 <ai_layers_forward_all+0x92>
 80070e2:	6385      	str	r5, [r0, #56]	; 0x38
 80070e4:	4629      	mov	r1, r5
 80070e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80070e8:	2001      	movs	r0, #1
 80070ea:	47b8      	blx	r7
 80070ec:	2600      	movs	r6, #0
 80070ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80070f0:	46b0      	mov	r8, r6
 80070f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80070f4:	2002      	movs	r0, #2
 80070f6:	47b8      	blx	r7
 80070f8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80070fa:	696b      	ldr	r3, [r5, #20]
 80070fc:	4628      	mov	r0, r5
 80070fe:	4798      	blx	r3
 8007100:	692b      	ldr	r3, [r5, #16]
 8007102:	429d      	cmp	r5, r3
 8007104:	f04f 0003 	mov.w	r0, #3
 8007108:	4619      	mov	r1, r3
 800710a:	d009      	beq.n	8007120 <ai_layers_forward_all+0x50>
 800710c:	63a3      	str	r3, [r4, #56]	; 0x38
 800710e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007110:	47b8      	blx	r7
 8007112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007114:	3601      	adds	r6, #1
 8007116:	2900      	cmp	r1, #0
 8007118:	d1eb      	bne.n	80070f2 <ai_layers_forward_all+0x22>
 800711a:	4630      	mov	r0, r6
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	2100      	movs	r1, #0
 8007122:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8007126:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007128:	47b8      	blx	r7
 800712a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800712c:	3601      	adds	r6, #1
 800712e:	2900      	cmp	r1, #0
 8007130:	d1df      	bne.n	80070f2 <ai_layers_forward_all+0x22>
 8007132:	4630      	mov	r0, r6
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007138:	b19d      	cbz	r5, 8007162 <ai_layers_forward_all+0x92>
 800713a:	6385      	str	r5, [r0, #56]	; 0x38
 800713c:	463e      	mov	r6, r7
 800713e:	696b      	ldr	r3, [r5, #20]
 8007140:	4628      	mov	r0, r5
 8007142:	4798      	blx	r3
 8007144:	692b      	ldr	r3, [r5, #16]
 8007146:	42ab      	cmp	r3, r5
 8007148:	f106 0601 	add.w	r6, r6, #1
 800714c:	d004      	beq.n	8007158 <ai_layers_forward_all+0x88>
 800714e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007150:	461d      	mov	r5, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f3      	bne.n	800713e <ai_layers_forward_all+0x6e>
 8007156:	e7e0      	b.n	800711a <ai_layers_forward_all+0x4a>
 8007158:	2300      	movs	r3, #0
 800715a:	63a3      	str	r3, [r4, #56]	; 0x38
 800715c:	4630      	mov	r0, r6
 800715e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007162:	462e      	mov	r6, r5
 8007164:	4630      	mov	r0, r6
 8007166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800716a:	bf00      	nop

0800716c <ai_layers_destroy_all>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007170:	b18c      	cbz	r4, 8007196 <ai_layers_destroy_all+0x2a>
 8007172:	2500      	movs	r5, #0
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	f013 0f04 	tst.w	r3, #4
 800717a:	4620      	mov	r0, r4
 800717c:	d003      	beq.n	8007186 <ai_layers_destroy_all+0x1a>
 800717e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007180:	b10b      	cbz	r3, 8007186 <ai_layers_destroy_all+0x1a>
 8007182:	4798      	blx	r3
 8007184:	3501      	adds	r5, #1
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	42a3      	cmp	r3, r4
 800718a:	d002      	beq.n	8007192 <ai_layers_destroy_all+0x26>
 800718c:	461c      	mov	r4, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <ai_layers_destroy_all+0x8>
 8007192:	4628      	mov	r0, r5
 8007194:	bd38      	pop	{r3, r4, r5, pc}
 8007196:	4625      	mov	r5, r4
 8007198:	e7fb      	b.n	8007192 <ai_layers_destroy_all+0x26>
 800719a:	bf00      	nop

0800719c <align_factor>:
 800719c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80071a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80071a4:	b508      	push	{r3, lr}
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	8003      	strh	r3, [r0, #0]
 80071b0:	d435      	bmi.n	800721e <align_factor+0x82>
 80071b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80071b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	dd18      	ble.n	80071f2 <align_factor+0x56>
 80071c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071c8:	8003      	strh	r3, [r0, #0]
 80071ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 80071ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80071d2:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80071d6:	e005      	b.n	80071e4 <align_factor+0x48>
 80071d8:	8003      	strh	r3, [r0, #0]
 80071da:	b293      	uxth	r3, r2
 80071dc:	428b      	cmp	r3, r1
 80071de:	ee20 0a07 	vmul.f32	s0, s0, s14
 80071e2:	d016      	beq.n	8007212 <align_factor+0x76>
 80071e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80071e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ec:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80071f0:	dcf2      	bgt.n	80071d8 <align_factor+0x3c>
 80071f2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8007268 <align_factor+0xcc>
 80071f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80071fa:	ee17 0a90 	vmov	r0, s15
 80071fe:	f7f9 f84f 	bl	80002a0 <__aeabi_f2lz>
 8007202:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8007206:	bf1c      	itt	ne
 8007208:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 800720c:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8007210:	bd08      	pop	{r3, pc}
 8007212:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8007216:	ee30 0a00 	vadd.f32	s0, s0, s0
 800721a:	8003      	strh	r3, [r0, #0]
 800721c:	e7e9      	b.n	80071f2 <align_factor+0x56>
 800721e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007226:	ddc4      	ble.n	80071b2 <align_factor+0x16>
 8007228:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800722c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007234:	d5dd      	bpl.n	80071f2 <align_factor+0x56>
 8007236:	2301      	movs	r3, #1
 8007238:	8003      	strh	r3, [r0, #0]
 800723a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800723e:	2302      	movs	r3, #2
 8007240:	e005      	b.n	800724e <align_factor+0xb2>
 8007242:	8003      	strh	r3, [r0, #0]
 8007244:	b293      	uxth	r3, r2
 8007246:	2b21      	cmp	r3, #33	; 0x21
 8007248:	ee30 0a00 	vadd.f32	s0, s0, s0
 800724c:	d007      	beq.n	800725e <align_factor+0xc2>
 800724e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007256:	f103 0201 	add.w	r2, r3, #1
 800725a:	d4f2      	bmi.n	8007242 <align_factor+0xa6>
 800725c:	e7c9      	b.n	80071f2 <align_factor+0x56>
 800725e:	2300      	movs	r3, #0
 8007260:	8003      	strh	r3, [r0, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	bd08      	pop	{r3, pc}
 8007266:	bf00      	nop
 8007268:	4f000000 	.word	0x4f000000

0800726c <st_sssa8_fully_connected>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	b097      	sub	sp, #92	; 0x5c
 8007272:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8007276:	f9b5 5000 	ldrsh.w	r5, [r5]
 800727a:	6824      	ldr	r4, [r4, #0]
 800727c:	9409      	str	r4, [sp, #36]	; 0x24
 800727e:	f99d 408c 	ldrsb.w	r4, [sp, #140]	; 0x8c
 8007282:	9407      	str	r4, [sp, #28]
 8007284:	1e6c      	subs	r4, r5, #1
 8007286:	940d      	str	r4, [sp, #52]	; 0x34
 8007288:	b2a4      	uxth	r4, r4
 800728a:	2c14      	cmp	r4, #20
 800728c:	9505      	str	r5, [sp, #20]
 800728e:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 8007292:	9204      	str	r2, [sp, #16]
 8007294:	460f      	mov	r7, r1
 8007296:	9312      	str	r3, [sp, #72]	; 0x48
 8007298:	d806      	bhi.n	80072a8 <st_sssa8_fully_connected+0x3c>
 800729a:	9a07      	ldr	r2, [sp, #28]
 800729c:	2301      	movs	r3, #1
 800729e:	40aa      	lsls	r2, r5
 80072a0:	40ab      	lsls	r3, r5
 80072a2:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80072a6:	9307      	str	r3, [sp, #28]
 80072a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 81e6 	beq.w	800767c <st_sssa8_fully_connected+0x410>
 80072b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b2:	9d04      	ldr	r5, [sp, #16]
 80072b4:	9600      	str	r6, [sp, #0]
 80072b6:	4619      	mov	r1, r3
 80072b8:	b2b3      	uxth	r3, r6
 80072ba:	0854      	lsrs	r4, r2, #1
 80072bc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80072c0:	462a      	mov	r2, r5
 80072c2:	f000 fab7 	bl	8007834 <st_int8_reordered_no_shift_zero>
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	f000 8142 	beq.w	8007550 <st_sssa8_fully_connected+0x2e4>
 80072cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072ce:	9e05      	ldr	r6, [sp, #20]
 80072d0:	f103 0110 	add.w	r1, r3, #16
 80072d4:	f04f 0c01 	mov.w	ip, #1
 80072d8:	1eb3      	subs	r3, r6, #2
 80072da:	fa0c f303 	lsl.w	r3, ip, r3
 80072de:	f1a5 0010 	sub.w	r0, r5, #16
 80072e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80072e4:	1eeb      	subs	r3, r5, #3
 80072e6:	0900      	lsrs	r0, r0, #4
 80072e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072ec:	3001      	adds	r0, #1
 80072ee:	0102      	lsls	r2, r0, #4
 80072f0:	3308      	adds	r3, #8
 80072f2:	9306      	str	r3, [sp, #24]
 80072f4:	920a      	str	r2, [sp, #40]	; 0x28
 80072f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80072f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072fa:	9308      	str	r3, [sp, #32]
 80072fc:	3c01      	subs	r4, #1
 80072fe:	1f2b      	subs	r3, r5, #4
 8007300:	b2a4      	uxth	r4, r4
 8007302:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 8007306:	9311      	str	r3, [sp, #68]	; 0x44
 8007308:	ebac 0306 	sub.w	r3, ip, r6
 800730c:	9210      	str	r2, [sp, #64]	; 0x40
 800730e:	9314      	str	r3, [sp, #80]	; 0x50
 8007310:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8007314:	9b06      	ldr	r3, [sp, #24]
 8007316:	9415      	str	r4, [sp, #84]	; 0x54
 8007318:	920e      	str	r2, [sp, #56]	; 0x38
 800731a:	9a04      	ldr	r2, [sp, #16]
 800731c:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8007320:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8007324:	18be      	adds	r6, r7, r2
 8007326:	2a0f      	cmp	r2, #15
 8007328:	9603      	str	r6, [sp, #12]
 800732a:	f340 826d 	ble.w	8007808 <st_sssa8_fully_connected+0x59c>
 800732e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007330:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8007332:	eb07 0c02 	add.w	ip, r7, r2
 8007336:	461a      	mov	r2, r3
 8007338:	f8d7 9000 	ldr.w	r9, [r7]
 800733c:	f8d6 e000 	ldr.w	lr, [r6]
 8007340:	fa2f f889 	sxtb16	r8, r9
 8007344:	ea4f 243e 	mov.w	r4, lr, ror #8
 8007348:	ea4f 2939 	mov.w	r9, r9, ror #8
 800734c:	fa2f f384 	sxtb16	r3, r4
 8007350:	fa2f f989 	sxtb16	r9, r9
 8007354:	fa2f fe8e 	sxtb16	lr, lr
 8007358:	682c      	ldr	r4, [r5, #0]
 800735a:	fb24 0008 	smlad	r0, r4, r8, r0
 800735e:	fb24 240e 	smlad	r4, r4, lr, r2
 8007362:	6869      	ldr	r1, [r5, #4]
 8007364:	fb21 0009 	smlad	r0, r1, r9, r0
 8007368:	fb21 4403 	smlad	r4, r1, r3, r4
 800736c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8007370:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8007374:	fa2f fa88 	sxtb16	sl, r8
 8007378:	ea4f 233e 	mov.w	r3, lr, ror #8
 800737c:	ea4f 2838 	mov.w	r8, r8, ror #8
 8007380:	fa2f f383 	sxtb16	r3, r3
 8007384:	fa2f f888 	sxtb16	r8, r8
 8007388:	fa2f fe8e 	sxtb16	lr, lr
 800738c:	68a9      	ldr	r1, [r5, #8]
 800738e:	fb21 000a 	smlad	r0, r1, sl, r0
 8007392:	fb21 410e 	smlad	r1, r1, lr, r4
 8007396:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800739a:	fb29 0808 	smlad	r8, r9, r8, r0
 800739e:	fb29 1903 	smlad	r9, r9, r3, r1
 80073a2:	68bc      	ldr	r4, [r7, #8]
 80073a4:	68b1      	ldr	r1, [r6, #8]
 80073a6:	fa2f f084 	sxtb16	r0, r4
 80073aa:	ea4f 2231 	mov.w	r2, r1, ror #8
 80073ae:	ea4f 2434 	mov.w	r4, r4, ror #8
 80073b2:	fa2f f282 	sxtb16	r2, r2
 80073b6:	fa2f f484 	sxtb16	r4, r4
 80073ba:	fa2f f181 	sxtb16	r1, r1
 80073be:	692b      	ldr	r3, [r5, #16]
 80073c0:	fb23 8800 	smlad	r8, r3, r0, r8
 80073c4:	fb23 9301 	smlad	r3, r3, r1, r9
 80073c8:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80073cc:	fb2e 8404 	smlad	r4, lr, r4, r8
 80073d0:	fb2e 3e02 	smlad	lr, lr, r2, r3
 80073d4:	68f9      	ldr	r1, [r7, #12]
 80073d6:	68f3      	ldr	r3, [r6, #12]
 80073d8:	fa2f f981 	sxtb16	r9, r1
 80073dc:	ea4f 2233 	mov.w	r2, r3, ror #8
 80073e0:	ea4f 2031 	mov.w	r0, r1, ror #8
 80073e4:	fa2f f882 	sxtb16	r8, r2
 80073e8:	3710      	adds	r7, #16
 80073ea:	3610      	adds	r6, #16
 80073ec:	fa2f f080 	sxtb16	r0, r0
 80073f0:	fa2f f383 	sxtb16	r3, r3
 80073f4:	69aa      	ldr	r2, [r5, #24]
 80073f6:	fb22 4909 	smlad	r9, r2, r9, r4
 80073fa:	fb22 e203 	smlad	r2, r2, r3, lr
 80073fe:	69ec      	ldr	r4, [r5, #28]
 8007400:	3520      	adds	r5, #32
 8007402:	fb24 9000 	smlad	r0, r4, r0, r9
 8007406:	fb24 2208 	smlad	r2, r4, r8, r2
 800740a:	4567      	cmp	r7, ip
 800740c:	d194      	bne.n	8007338 <st_sssa8_fully_connected+0xcc>
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8007414:	4613      	mov	r3, r2
 8007416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007418:	460c      	mov	r4, r1
 800741a:	4414      	add	r4, r2
 800741c:	9403      	str	r4, [sp, #12]
 800741e:	4690      	mov	r8, r2
 8007420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007422:	4590      	cmp	r8, r2
 8007424:	da36      	bge.n	8007494 <st_sssa8_fully_connected+0x228>
 8007426:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007428:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800742c:	eba2 0a08 	sub.w	sl, r2, r8
 8007430:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8007434:	f10a 0201 	add.w	r2, sl, #1
 8007438:	920c      	str	r2, [sp, #48]	; 0x30
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	920b      	str	r2, [sp, #44]	; 0x2c
 800743e:	eb07 0902 	add.w	r9, r7, r2
 8007442:	465e      	mov	r6, fp
 8007444:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007448:	f857 2b04 	ldr.w	r2, [r7], #4
 800744c:	fa2f fc81 	sxtb16	ip, r1
 8007450:	fa2f f582 	sxtb16	r5, r2
 8007454:	ea4f 2431 	mov.w	r4, r1, ror #8
 8007458:	ea4f 2232 	mov.w	r2, r2, ror #8
 800745c:	fa2f f484 	sxtb16	r4, r4
 8007460:	fa2f f282 	sxtb16	r2, r2
 8007464:	6831      	ldr	r1, [r6, #0]
 8007466:	fb21 0005 	smlad	r0, r1, r5, r0
 800746a:	fb21 330c 	smlad	r3, r1, ip, r3
 800746e:	6871      	ldr	r1, [r6, #4]
 8007470:	3608      	adds	r6, #8
 8007472:	fb21 0002 	smlad	r0, r1, r2, r0
 8007476:	fb21 3304 	smlad	r3, r1, r4, r3
 800747a:	454f      	cmp	r7, r9
 800747c:	d1e2      	bne.n	8007444 <st_sssa8_fully_connected+0x1d8>
 800747e:	9a03      	ldr	r2, [sp, #12]
 8007480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007482:	440a      	add	r2, r1
 8007484:	9203      	str	r2, [sp, #12]
 8007486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007488:	f108 0804 	add.w	r8, r8, #4
 800748c:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8007490:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
 8007494:	9d04      	ldr	r5, [sp, #16]
 8007496:	45a8      	cmp	r8, r5
 8007498:	da2c      	bge.n	80074f4 <st_sssa8_fully_connected+0x288>
 800749a:	f9bb 1000 	ldrsh.w	r1, [fp]
 800749e:	f997 2000 	ldrsb.w	r2, [r7]
 80074a2:	9c03      	ldr	r4, [sp, #12]
 80074a4:	fb11 0002 	smlabb	r0, r1, r2, r0
 80074a8:	f994 4000 	ldrsb.w	r4, [r4]
 80074ac:	f108 0201 	add.w	r2, r8, #1
 80074b0:	4295      	cmp	r5, r2
 80074b2:	fb11 3304 	smlabb	r3, r1, r4, r3
 80074b6:	f340 80c5 	ble.w	8007644 <st_sssa8_fully_connected+0x3d8>
 80074ba:	9903      	ldr	r1, [sp, #12]
 80074bc:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80074c0:	f997 4001 	ldrsb.w	r4, [r7, #1]
 80074c4:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80074c8:	fb12 0004 	smlabb	r0, r2, r4, r0
 80074cc:	fb12 3301 	smlabb	r3, r2, r1, r3
 80074d0:	9a04      	ldr	r2, [sp, #16]
 80074d2:	f108 0802 	add.w	r8, r8, #2
 80074d6:	4542      	cmp	r2, r8
 80074d8:	f340 819b 	ble.w	8007812 <st_sssa8_fully_connected+0x5a6>
 80074dc:	9903      	ldr	r1, [sp, #12]
 80074de:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 80074e2:	f991 4002 	ldrsb.w	r4, [r1, #2]
 80074e6:	f997 1002 	ldrsb.w	r1, [r7, #2]
 80074ea:	fb12 3304 	smlabb	r3, r2, r4, r3
 80074ee:	fb12 0001 	smlabb	r0, r2, r1, r0
 80074f2:	3703      	adds	r7, #3
 80074f4:	9a08      	ldr	r2, [sp, #32]
 80074f6:	9905      	ldr	r1, [sp, #20]
 80074f8:	3202      	adds	r2, #2
 80074fa:	2915      	cmp	r1, #21
 80074fc:	9208      	str	r2, [sp, #32]
 80074fe:	f340 808a 	ble.w	8007616 <st_sssa8_fully_connected+0x3aa>
 8007502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007504:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007506:	fb50 5001 	smmla	r0, r0, r1, r5
 800750a:	fb53 5301 	smmla	r3, r3, r1, r5
 800750e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007510:	9c07      	ldr	r4, [sp, #28]
 8007512:	4108      	asrs	r0, r1
 8007514:	4420      	add	r0, r4
 8007516:	f300 0007 	ssat	r0, #8, r0
 800751a:	410b      	asrs	r3, r1
 800751c:	4423      	add	r3, r4
 800751e:	f802 0c02 	strb.w	r0, [r2, #-2]
 8007522:	f303 0307 	ssat	r3, #8, r3
 8007526:	f802 3c01 	strb.w	r3, [r2, #-1]
 800752a:	9a04      	ldr	r2, [sp, #16]
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	4417      	add	r7, r2
 8007530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007532:	3308      	adds	r3, #8
 8007534:	429a      	cmp	r2, r3
 8007536:	9306      	str	r3, [sp, #24]
 8007538:	f47f aeef 	bne.w	800731a <st_sssa8_fully_connected+0xae>
 800753c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800753e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007540:	3401      	adds	r4, #1
 8007542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007546:	9324      	str	r3, [sp, #144]	; 0x90
 8007548:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800754a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800754e:	9325      	str	r3, [sp, #148]	; 0x94
 8007550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007552:	07db      	lsls	r3, r3, #31
 8007554:	d54a      	bpl.n	80075ec <st_sssa8_fully_connected+0x380>
 8007556:	9a04      	ldr	r2, [sp, #16]
 8007558:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800755a:	0892      	lsrs	r2, r2, #2
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	d01a      	beq.n	8007596 <st_sssa8_fully_connected+0x32a>
 8007560:	1e55      	subs	r5, r2, #1
 8007562:	b2ad      	uxth	r5, r5
 8007564:	3501      	adds	r5, #1
 8007566:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8007568:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 800756c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007570:	6821      	ldr	r1, [r4, #0]
 8007572:	fa2f f082 	sxtb16	r0, r2
 8007576:	ea4f 2232 	mov.w	r2, r2, ror #8
 800757a:	fa2f f282 	sxtb16	r2, r2
 800757e:	fb21 3300 	smlad	r3, r1, r0, r3
 8007582:	6861      	ldr	r1, [r4, #4]
 8007584:	3408      	adds	r4, #8
 8007586:	fb21 3302 	smlad	r3, r1, r2, r3
 800758a:	42b7      	cmp	r7, r6
 800758c:	d1ee      	bne.n	800756c <st_sssa8_fully_connected+0x300>
 800758e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007590:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007594:	9226      	str	r2, [sp, #152]	; 0x98
 8007596:	9a04      	ldr	r2, [sp, #16]
 8007598:	f012 0203 	ands.w	r2, r2, #3
 800759c:	d015      	beq.n	80075ca <st_sssa8_fully_connected+0x35e>
 800759e:	9826      	ldr	r0, [sp, #152]	; 0x98
 80075a0:	f997 1000 	ldrsb.w	r1, [r7]
 80075a4:	8800      	ldrh	r0, [r0, #0]
 80075a6:	2a01      	cmp	r2, #1
 80075a8:	fb10 3301 	smlabb	r3, r0, r1, r3
 80075ac:	d00d      	beq.n	80075ca <st_sssa8_fully_connected+0x35e>
 80075ae:	9826      	ldr	r0, [sp, #152]	; 0x98
 80075b0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80075b4:	8840      	ldrh	r0, [r0, #2]
 80075b6:	2a02      	cmp	r2, #2
 80075b8:	fb10 3301 	smlabb	r3, r0, r1, r3
 80075bc:	d005      	beq.n	80075ca <st_sssa8_fully_connected+0x35e>
 80075be:	9926      	ldr	r1, [sp, #152]	; 0x98
 80075c0:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80075c4:	8889      	ldrh	r1, [r1, #4]
 80075c6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80075ca:	9a05      	ldr	r2, [sp, #20]
 80075cc:	2a15      	cmp	r2, #21
 80075ce:	dd11      	ble.n	80075f4 <st_sssa8_fully_connected+0x388>
 80075d0:	1e91      	subs	r1, r2, #2
 80075d2:	2201      	movs	r2, #1
 80075d4:	408a      	lsls	r2, r1
 80075d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075d8:	fb53 2301 	smmla	r3, r3, r1, r2
 80075dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075de:	4113      	asrs	r3, r2
 80075e0:	9a07      	ldr	r2, [sp, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f303 0307 	ssat	r3, #8, r3
 80075e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80075ea:	7013      	strb	r3, [r2, #0]
 80075ec:	2000      	movs	r0, #0
 80075ee:	b017      	add	sp, #92	; 0x5c
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	f340 810e 	ble.w	8007816 <st_sssa8_fully_connected+0x5aa>
 80075fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075fc:	9807      	ldr	r0, [sp, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	fb53 0301 	smmla	r3, r3, r1, r0
 8007604:	4113      	asrs	r3, r2
 8007606:	f303 0307 	ssat	r3, #8, r3
 800760a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800760c:	2000      	movs	r0, #0
 800760e:	7013      	strb	r3, [r2, #0]
 8007610:	b017      	add	sp, #92	; 0x5c
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	2900      	cmp	r1, #0
 8007618:	460a      	mov	r2, r1
 800761a:	dd15      	ble.n	8007648 <st_sssa8_fully_connected+0x3dc>
 800761c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800761e:	9d07      	ldr	r5, [sp, #28]
 8007620:	0040      	lsls	r0, r0, #1
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	fb50 5001 	smmla	r0, r0, r1, r5
 8007628:	fb53 5301 	smmla	r3, r3, r1, r5
 800762c:	4110      	asrs	r0, r2
 800762e:	f300 0007 	ssat	r0, #8, r0
 8007632:	9908      	ldr	r1, [sp, #32]
 8007634:	4113      	asrs	r3, r2
 8007636:	f801 0c02 	strb.w	r0, [r1, #-2]
 800763a:	f303 0307 	ssat	r3, #8, r3
 800763e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007642:	e772      	b.n	800752a <st_sssa8_fully_connected+0x2be>
 8007644:	3701      	adds	r7, #1
 8007646:	e755      	b.n	80074f4 <st_sssa8_fully_connected+0x288>
 8007648:	9914      	ldr	r1, [sp, #80]	; 0x50
 800764a:	fa00 f201 	lsl.w	r2, r0, r1
 800764e:	f302 021f 	ssat	r2, #32, r2
 8007652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007654:	fb52 f210 	smmulr	r2, r2, r0
 8007658:	408b      	lsls	r3, r1
 800765a:	f303 031f 	ssat	r3, #32, r3
 800765e:	fb53 f310 	smmulr	r3, r3, r0
 8007662:	9907      	ldr	r1, [sp, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f302 0207 	ssat	r2, #8, r2
 800766a:	9808      	ldr	r0, [sp, #32]
 800766c:	440b      	add	r3, r1
 800766e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8007672:	f303 0307 	ssat	r3, #8, r3
 8007676:	f800 3c01 	strb.w	r3, [r0, #-1]
 800767a:	e756      	b.n	800752a <st_sssa8_fully_connected+0x2be>
 800767c:	4273      	negs	r3, r6
 800767e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007680:	b29d      	uxth	r5, r3
 8007682:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8007686:	2900      	cmp	r1, #0
 8007688:	d0b0      	beq.n	80075ec <st_sssa8_fully_connected+0x380>
 800768a:	9c04      	ldr	r4, [sp, #16]
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	9004      	str	r0, [sp, #16]
 8007690:	3b02      	subs	r3, #2
 8007692:	f1a4 0e10 	sub.w	lr, r4, #16
 8007696:	2201      	movs	r2, #1
 8007698:	468c      	mov	ip, r1
 800769a:	409a      	lsls	r2, r3
 800769c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	9208      	str	r2, [sp, #32]
 80076a2:	f02e 0e0f 	bic.w	lr, lr, #15
 80076a6:	e9dd a824 	ldrd	sl, r8, [sp, #144]	; 0x90
 80076aa:	f10e 0e10 	add.w	lr, lr, #16
 80076ae:	46a1      	mov	r9, r4
 80076b0:	448c      	add	ip, r1
 80076b2:	f1c3 0301 	rsb	r3, r3, #1
 80076b6:	b231      	sxth	r1, r6
 80076b8:	f1b9 0f0f 	cmp.w	r9, #15
 80076bc:	eb00 060e 	add.w	r6, r0, lr
 80076c0:	f8cd c00c 	str.w	ip, [sp, #12]
 80076c4:	930a      	str	r3, [sp, #40]	; 0x28
 80076c6:	9606      	str	r6, [sp, #24]
 80076c8:	468c      	mov	ip, r1
 80076ca:	f85a 3b04 	ldr.w	r3, [sl], #4
 80076ce:	dd7d      	ble.n	80077cc <st_sssa8_fully_connected+0x560>
 80076d0:	9c04      	ldr	r4, [sp, #16]
 80076d2:	eb07 060e 	add.w	r6, r7, lr
 80076d6:	f8d7 b000 	ldr.w	fp, [r7]
 80076da:	6821      	ldr	r1, [r4, #0]
 80076dc:	fa2f f08b 	sxtb16	r0, fp
 80076e0:	ea4f 2231 	mov.w	r2, r1, ror #8
 80076e4:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 80076e8:	fa25 f282 	sxtab16	r2, r5, r2
 80076ec:	fa2f fb8b 	sxtb16	fp, fp
 80076f0:	fa25 f181 	sxtab16	r1, r5, r1
 80076f4:	fb21 3300 	smlad	r3, r1, r0, r3
 80076f8:	fb22 300b 	smlad	r0, r2, fp, r3
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	fa2f fb81 	sxtb16	fp, r1
 8007704:	ea4f 2332 	mov.w	r3, r2, ror #8
 8007708:	ea4f 2131 	mov.w	r1, r1, ror #8
 800770c:	fa25 f383 	sxtab16	r3, r5, r3
 8007710:	fa2f f181 	sxtb16	r1, r1
 8007714:	fa25 f282 	sxtab16	r2, r5, r2
 8007718:	fb22 020b 	smlad	r2, r2, fp, r0
 800771c:	fb23 2201 	smlad	r2, r3, r1, r2
 8007720:	68b8      	ldr	r0, [r7, #8]
 8007722:	68a3      	ldr	r3, [r4, #8]
 8007724:	fa2f fb80 	sxtb16	fp, r0
 8007728:	ea4f 2133 	mov.w	r1, r3, ror #8
 800772c:	ea4f 2030 	mov.w	r0, r0, ror #8
 8007730:	fa25 f181 	sxtab16	r1, r5, r1
 8007734:	fa2f f080 	sxtb16	r0, r0
 8007738:	fa25 f383 	sxtab16	r3, r5, r3
 800773c:	fb23 230b 	smlad	r3, r3, fp, r2
 8007740:	fb21 3300 	smlad	r3, r1, r0, r3
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	68e1      	ldr	r1, [r4, #12]
 8007748:	fa2f f082 	sxtb16	r0, r2
 800774c:	ea4f 2b31 	mov.w	fp, r1, ror #8
 8007750:	3710      	adds	r7, #16
 8007752:	ea4f 2232 	mov.w	r2, r2, ror #8
 8007756:	3410      	adds	r4, #16
 8007758:	fa2f f282 	sxtb16	r2, r2
 800775c:	fa25 f181 	sxtab16	r1, r5, r1
 8007760:	fa25 fb8b 	sxtab16	fp, r5, fp
 8007764:	fb21 3300 	smlad	r3, r1, r0, r3
 8007768:	fb2b 3302 	smlad	r3, fp, r2, r3
 800776c:	42b7      	cmp	r7, r6
 800776e:	d1b2      	bne.n	80076d6 <st_sssa8_fully_connected+0x46a>
 8007770:	9806      	ldr	r0, [sp, #24]
 8007772:	4674      	mov	r4, lr
 8007774:	454c      	cmp	r4, r9
 8007776:	da0f      	bge.n	8007798 <st_sssa8_fully_connected+0x52c>
 8007778:	eba9 0404 	sub.w	r4, r9, r4
 800777c:	443c      	add	r4, r7
 800777e:	463a      	mov	r2, r7
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8007786:	3701      	adds	r7, #1
 8007788:	b252      	sxtb	r2, r2
 800778a:	eba1 010c 	sub.w	r1, r1, ip
 800778e:	42a7      	cmp	r7, r4
 8007790:	fb11 3302 	smlabb	r3, r1, r2, r3
 8007794:	463a      	mov	r2, r7
 8007796:	d1f3      	bne.n	8007780 <st_sssa8_fully_connected+0x514>
 8007798:	9a05      	ldr	r2, [sp, #20]
 800779a:	2a15      	cmp	r2, #21
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	dd17      	ble.n	80077d2 <st_sssa8_fully_connected+0x566>
 80077a2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80077a6:	fb53 1302 	smmla	r3, r3, r2, r1
 80077aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ac:	4113      	asrs	r3, r2
 80077ae:	9a07      	ldr	r2, [sp, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f303 0307 	ssat	r3, #8, r3
 80077b6:	f808 3c01 	strb.w	r3, [r8, #-1]
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	4543      	cmp	r3, r8
 80077be:	f43f af15 	beq.w	80075ec <st_sssa8_fully_connected+0x380>
 80077c2:	f1b9 0f0f 	cmp.w	r9, #15
 80077c6:	f85a 3b04 	ldr.w	r3, [sl], #4
 80077ca:	dc81      	bgt.n	80076d0 <st_sssa8_fully_connected+0x464>
 80077cc:	9804      	ldr	r0, [sp, #16]
 80077ce:	2400      	movs	r4, #0
 80077d0:	e7d0      	b.n	8007774 <st_sssa8_fully_connected+0x508>
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	dd0a      	ble.n	80077ec <st_sssa8_fully_connected+0x580>
 80077d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077d8:	9807      	ldr	r0, [sp, #28]
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	fb53 0301 	smmla	r3, r3, r1, r0
 80077e0:	4113      	asrs	r3, r2
 80077e2:	f303 0307 	ssat	r3, #8, r3
 80077e6:	f808 3c01 	strb.w	r3, [r8, #-1]
 80077ea:	e7e6      	b.n	80077ba <st_sssa8_fully_connected+0x54e>
 80077ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ee:	4093      	lsls	r3, r2
 80077f0:	f303 031f 	ssat	r3, #32, r3
 80077f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f6:	fb53 f312 	smmulr	r3, r3, r2
 80077fa:	9a07      	ldr	r2, [sp, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f303 0307 	ssat	r3, #8, r3
 8007802:	f808 3c01 	strb.w	r3, [r8, #-1]
 8007806:	e7d8      	b.n	80077ba <st_sssa8_fully_connected+0x54e>
 8007808:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800780c:	f04f 0800 	mov.w	r8, #0
 8007810:	e606      	b.n	8007420 <st_sssa8_fully_connected+0x1b4>
 8007812:	3702      	adds	r7, #2
 8007814:	e66e      	b.n	80074f4 <st_sssa8_fully_connected+0x288>
 8007816:	f1c2 0201 	rsb	r2, r2, #1
 800781a:	4093      	lsls	r3, r2
 800781c:	f303 031f 	ssat	r3, #32, r3
 8007820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007822:	fb53 f312 	smmulr	r3, r3, r2
 8007826:	9a07      	ldr	r2, [sp, #28]
 8007828:	441a      	add	r2, r3
 800782a:	f302 0307 	ssat	r3, #8, r2
 800782e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007830:	7013      	strb	r3, [r2, #0]
 8007832:	e6db      	b.n	80075ec <st_sssa8_fully_connected+0x380>

08007834 <st_int8_reordered_no_shift_zero>:
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800783a:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800783e:	d02d      	beq.n	800789c <st_int8_reordered_no_shift_zero+0x68>
 8007840:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 8007844:	460e      	mov	r6, r1
 8007846:	f850 4b04 	ldr.w	r4, [r0], #4
 800784a:	ea4f 2534 	mov.w	r5, r4, ror #8
 800784e:	fa2f f585 	sxtb16	r5, r5
 8007852:	fad5 f503 	ssub16	r5, r5, r3
 8007856:	fa2f f484 	sxtb16	r4, r4
 800785a:	fad4 f403 	ssub16	r4, r4, r3
 800785e:	42b8      	cmp	r0, r7
 8007860:	6034      	str	r4, [r6, #0]
 8007862:	6075      	str	r5, [r6, #4]
 8007864:	f106 0608 	add.w	r6, r6, #8
 8007868:	d1ed      	bne.n	8007846 <st_int8_reordered_no_shift_zero+0x12>
 800786a:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800786e:	f012 0203 	ands.w	r2, r2, #3
 8007872:	d012      	beq.n	800789a <st_int8_reordered_no_shift_zero+0x66>
 8007874:	f997 0000 	ldrsb.w	r0, [r7]
 8007878:	fa4f f38c 	sxtb.w	r3, ip
 800787c:	1ac0      	subs	r0, r0, r3
 800787e:	2a01      	cmp	r2, #1
 8007880:	8008      	strh	r0, [r1, #0]
 8007882:	d00a      	beq.n	800789a <st_int8_reordered_no_shift_zero+0x66>
 8007884:	f997 0001 	ldrsb.w	r0, [r7, #1]
 8007888:	2a02      	cmp	r2, #2
 800788a:	eba0 0003 	sub.w	r0, r0, r3
 800788e:	8048      	strh	r0, [r1, #2]
 8007890:	d003      	beq.n	800789a <st_int8_reordered_no_shift_zero+0x66>
 8007892:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	808b      	strh	r3, [r1, #4]
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789c:	4607      	mov	r7, r0
 800789e:	e7e6      	b.n	800786e <st_int8_reordered_no_shift_zero+0x3a>

080078a0 <ai_array_to_buffer_fmt>:
 80078a0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d029      	beq.n	80078fc <ai_array_to_buffer_fmt+0x5c>
 80078a8:	4a22      	ldr	r2, [pc, #136]	; (8007934 <ai_array_to_buffer_fmt+0x94>)
 80078aa:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d010      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078b2:	dd13      	ble.n	80078dc <ai_array_to_buffer_fmt+0x3c>
 80078b4:	4a20      	ldr	r2, [pc, #128]	; (8007938 <ai_array_to_buffer_fmt+0x98>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00c      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078ba:	dc27      	bgt.n	800790c <ai_array_to_buffer_fmt+0x6c>
 80078bc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d007      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078c4:	3207      	adds	r2, #7
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078ca:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d000      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078d2:	2340      	movs	r3, #64	; 0x40
 80078d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80078d8:	4318      	orrs	r0, r3
 80078da:	4770      	bx	lr
 80078dc:	4a17      	ldr	r2, [pc, #92]	; (800793c <ai_array_to_buffer_fmt+0x9c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d0f8      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078e2:	dd1e      	ble.n	8007922 <ai_array_to_buffer_fmt+0x82>
 80078e4:	4a16      	ldr	r2, [pc, #88]	; (8007940 <ai_array_to_buffer_fmt+0xa0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d0f4      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078ea:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d0f0      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078f2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d1eb      	bne.n	80078d2 <ai_array_to_buffer_fmt+0x32>
 80078fa:	e7eb      	b.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 80078fc:	4b11      	ldr	r3, [pc, #68]	; (8007944 <ai_array_to_buffer_fmt+0xa4>)
 80078fe:	4003      	ands	r3, r0
 8007900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007904:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007908:	4318      	orrs	r0, r3
 800790a:	4770      	bx	lr
 800790c:	4a0e      	ldr	r2, [pc, #56]	; (8007948 <ai_array_to_buffer_fmt+0xa8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d0e0      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 8007912:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8007916:	4293      	cmp	r3, r2
 8007918:	d0dc      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 800791a:	4a0c      	ldr	r2, [pc, #48]	; (800794c <ai_array_to_buffer_fmt+0xac>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d1d8      	bne.n	80078d2 <ai_array_to_buffer_fmt+0x32>
 8007920:	e7d8      	b.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 8007922:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007926:	4293      	cmp	r3, r2
 8007928:	d0d4      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 800792a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800792e:	4293      	cmp	r3, r2
 8007930:	d0d0      	beq.n	80078d4 <ai_array_to_buffer_fmt+0x34>
 8007932:	e7ce      	b.n	80078d2 <ai_array_to_buffer_fmt+0x32>
 8007934:	00060440 	.word	0x00060440
 8007938:	00840840 	.word	0x00840840
 800793c:	00040447 	.word	0x00040447
 8007940:	0004084f 	.word	0x0004084f
 8007944:	00803fff 	.word	0x00803fff
 8007948:	00841040 	.word	0x00841040
 800794c:	0084084f 	.word	0x0084084f

08007950 <ai_array_get_byte_size>:
 8007950:	b1c1      	cbz	r1, 8007984 <ai_array_get_byte_size+0x34>
 8007952:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8007956:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800795a:	4413      	add	r3, r2
 800795c:	fb01 f103 	mul.w	r1, r1, r3
 8007960:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8007964:	3107      	adds	r1, #7
 8007966:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800796a:	f021 0107 	bic.w	r1, r1, #7
 800796e:	2804      	cmp	r0, #4
 8007970:	fa21 f102 	lsr.w	r1, r1, r2
 8007974:	d008      	beq.n	8007988 <ai_array_get_byte_size+0x38>
 8007976:	2808      	cmp	r0, #8
 8007978:	d101      	bne.n	800797e <ai_array_get_byte_size+0x2e>
 800797a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800797e:	3107      	adds	r1, #7
 8007980:	08c8      	lsrs	r0, r1, #3
 8007982:	4770      	bx	lr
 8007984:	4608      	mov	r0, r1
 8007986:	4770      	bx	lr
 8007988:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800798c:	3107      	adds	r1, #7
 800798e:	08c8      	lsrs	r0, r1, #3
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop

08007994 <__errno>:
 8007994:	4b01      	ldr	r3, [pc, #4]	; (800799c <__errno+0x8>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	200004c8 	.word	0x200004c8

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	; (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	; (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	; (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	; (80079e4 <__libc_init_array+0x44>)
 80079b4:	f001 f822 	bl	80089fc <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	08008fc0 	.word	0x08008fc0
 80079dc:	08008fc0 	.word	0x08008fc0
 80079e0:	08008fc0 	.word	0x08008fc0
 80079e4:	08008fc4 	.word	0x08008fc4

080079e8 <memcpy>:
 80079e8:	440a      	add	r2, r1
 80079ea:	4291      	cmp	r1, r2
 80079ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079f0:	d100      	bne.n	80079f4 <memcpy+0xc>
 80079f2:	4770      	bx	lr
 80079f4:	b510      	push	{r4, lr}
 80079f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079fe:	4291      	cmp	r1, r2
 8007a00:	d1f9      	bne.n	80079f6 <memcpy+0xe>
 8007a02:	bd10      	pop	{r4, pc}

08007a04 <memset>:
 8007a04:	4402      	add	r2, r0
 8007a06:	4603      	mov	r3, r0
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d100      	bne.n	8007a0e <memset+0xa>
 8007a0c:	4770      	bx	lr
 8007a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a12:	e7f9      	b.n	8007a08 <memset+0x4>

08007a14 <_free_r>:
 8007a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a16:	2900      	cmp	r1, #0
 8007a18:	d048      	beq.n	8007aac <_free_r+0x98>
 8007a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1e:	9001      	str	r0, [sp, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f1a1 0404 	sub.w	r4, r1, #4
 8007a26:	bfb8      	it	lt
 8007a28:	18e4      	addlt	r4, r4, r3
 8007a2a:	f000 fc19 	bl	8008260 <__malloc_lock>
 8007a2e:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <_free_r+0x9c>)
 8007a30:	9801      	ldr	r0, [sp, #4]
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	4615      	mov	r5, r2
 8007a36:	b933      	cbnz	r3, 8007a46 <_free_r+0x32>
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	6014      	str	r4, [r2, #0]
 8007a3c:	b003      	add	sp, #12
 8007a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a42:	f000 bc13 	b.w	800826c <__malloc_unlock>
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	d90b      	bls.n	8007a62 <_free_r+0x4e>
 8007a4a:	6821      	ldr	r1, [r4, #0]
 8007a4c:	1862      	adds	r2, r4, r1
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	bf04      	itt	eq
 8007a52:	681a      	ldreq	r2, [r3, #0]
 8007a54:	685b      	ldreq	r3, [r3, #4]
 8007a56:	6063      	str	r3, [r4, #4]
 8007a58:	bf04      	itt	eq
 8007a5a:	1852      	addeq	r2, r2, r1
 8007a5c:	6022      	streq	r2, [r4, #0]
 8007a5e:	602c      	str	r4, [r5, #0]
 8007a60:	e7ec      	b.n	8007a3c <_free_r+0x28>
 8007a62:	461a      	mov	r2, r3
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	b10b      	cbz	r3, 8007a6c <_free_r+0x58>
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	d9fa      	bls.n	8007a62 <_free_r+0x4e>
 8007a6c:	6811      	ldr	r1, [r2, #0]
 8007a6e:	1855      	adds	r5, r2, r1
 8007a70:	42a5      	cmp	r5, r4
 8007a72:	d10b      	bne.n	8007a8c <_free_r+0x78>
 8007a74:	6824      	ldr	r4, [r4, #0]
 8007a76:	4421      	add	r1, r4
 8007a78:	1854      	adds	r4, r2, r1
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	6011      	str	r1, [r2, #0]
 8007a7e:	d1dd      	bne.n	8007a3c <_free_r+0x28>
 8007a80:	681c      	ldr	r4, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	6053      	str	r3, [r2, #4]
 8007a86:	4421      	add	r1, r4
 8007a88:	6011      	str	r1, [r2, #0]
 8007a8a:	e7d7      	b.n	8007a3c <_free_r+0x28>
 8007a8c:	d902      	bls.n	8007a94 <_free_r+0x80>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	e7d3      	b.n	8007a3c <_free_r+0x28>
 8007a94:	6825      	ldr	r5, [r4, #0]
 8007a96:	1961      	adds	r1, r4, r5
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	bf04      	itt	eq
 8007a9c:	6819      	ldreq	r1, [r3, #0]
 8007a9e:	685b      	ldreq	r3, [r3, #4]
 8007aa0:	6063      	str	r3, [r4, #4]
 8007aa2:	bf04      	itt	eq
 8007aa4:	1949      	addeq	r1, r1, r5
 8007aa6:	6021      	streq	r1, [r4, #0]
 8007aa8:	6054      	str	r4, [r2, #4]
 8007aaa:	e7c7      	b.n	8007a3c <_free_r+0x28>
 8007aac:	b003      	add	sp, #12
 8007aae:	bd30      	pop	{r4, r5, pc}
 8007ab0:	20000680 	.word	0x20000680

08007ab4 <_malloc_r>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	1ccd      	adds	r5, r1, #3
 8007ab8:	f025 0503 	bic.w	r5, r5, #3
 8007abc:	3508      	adds	r5, #8
 8007abe:	2d0c      	cmp	r5, #12
 8007ac0:	bf38      	it	cc
 8007ac2:	250c      	movcc	r5, #12
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	db01      	blt.n	8007ace <_malloc_r+0x1a>
 8007aca:	42a9      	cmp	r1, r5
 8007acc:	d903      	bls.n	8007ad6 <_malloc_r+0x22>
 8007ace:	230c      	movs	r3, #12
 8007ad0:	6033      	str	r3, [r6, #0]
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad6:	f000 fbc3 	bl	8008260 <__malloc_lock>
 8007ada:	4921      	ldr	r1, [pc, #132]	; (8007b60 <_malloc_r+0xac>)
 8007adc:	680a      	ldr	r2, [r1, #0]
 8007ade:	4614      	mov	r4, r2
 8007ae0:	b99c      	cbnz	r4, 8007b0a <_malloc_r+0x56>
 8007ae2:	4f20      	ldr	r7, [pc, #128]	; (8007b64 <_malloc_r+0xb0>)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	b923      	cbnz	r3, 8007af2 <_malloc_r+0x3e>
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4630      	mov	r0, r6
 8007aec:	f000 f8ca 	bl	8007c84 <_sbrk_r>
 8007af0:	6038      	str	r0, [r7, #0]
 8007af2:	4629      	mov	r1, r5
 8007af4:	4630      	mov	r0, r6
 8007af6:	f000 f8c5 	bl	8007c84 <_sbrk_r>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	d123      	bne.n	8007b46 <_malloc_r+0x92>
 8007afe:	230c      	movs	r3, #12
 8007b00:	6033      	str	r3, [r6, #0]
 8007b02:	4630      	mov	r0, r6
 8007b04:	f000 fbb2 	bl	800826c <__malloc_unlock>
 8007b08:	e7e3      	b.n	8007ad2 <_malloc_r+0x1e>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	1b5b      	subs	r3, r3, r5
 8007b0e:	d417      	bmi.n	8007b40 <_malloc_r+0x8c>
 8007b10:	2b0b      	cmp	r3, #11
 8007b12:	d903      	bls.n	8007b1c <_malloc_r+0x68>
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	441c      	add	r4, r3
 8007b18:	6025      	str	r5, [r4, #0]
 8007b1a:	e004      	b.n	8007b26 <_malloc_r+0x72>
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	42a2      	cmp	r2, r4
 8007b20:	bf0c      	ite	eq
 8007b22:	600b      	streq	r3, [r1, #0]
 8007b24:	6053      	strne	r3, [r2, #4]
 8007b26:	4630      	mov	r0, r6
 8007b28:	f000 fba0 	bl	800826c <__malloc_unlock>
 8007b2c:	f104 000b 	add.w	r0, r4, #11
 8007b30:	1d23      	adds	r3, r4, #4
 8007b32:	f020 0007 	bic.w	r0, r0, #7
 8007b36:	1ac2      	subs	r2, r0, r3
 8007b38:	d0cc      	beq.n	8007ad4 <_malloc_r+0x20>
 8007b3a:	1a1b      	subs	r3, r3, r0
 8007b3c:	50a3      	str	r3, [r4, r2]
 8007b3e:	e7c9      	b.n	8007ad4 <_malloc_r+0x20>
 8007b40:	4622      	mov	r2, r4
 8007b42:	6864      	ldr	r4, [r4, #4]
 8007b44:	e7cc      	b.n	8007ae0 <_malloc_r+0x2c>
 8007b46:	1cc4      	adds	r4, r0, #3
 8007b48:	f024 0403 	bic.w	r4, r4, #3
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d0e3      	beq.n	8007b18 <_malloc_r+0x64>
 8007b50:	1a21      	subs	r1, r4, r0
 8007b52:	4630      	mov	r0, r6
 8007b54:	f000 f896 	bl	8007c84 <_sbrk_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d1dd      	bne.n	8007b18 <_malloc_r+0x64>
 8007b5c:	e7cf      	b.n	8007afe <_malloc_r+0x4a>
 8007b5e:	bf00      	nop
 8007b60:	20000680 	.word	0x20000680
 8007b64:	20000684 	.word	0x20000684

08007b68 <iprintf>:
 8007b68:	b40f      	push	{r0, r1, r2, r3}
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <iprintf+0x2c>)
 8007b6c:	b513      	push	{r0, r1, r4, lr}
 8007b6e:	681c      	ldr	r4, [r3, #0]
 8007b70:	b124      	cbz	r4, 8007b7c <iprintf+0x14>
 8007b72:	69a3      	ldr	r3, [r4, #24]
 8007b74:	b913      	cbnz	r3, 8007b7c <iprintf+0x14>
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fa6e 	bl	8008058 <__sinit>
 8007b7c:	ab05      	add	r3, sp, #20
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	68a1      	ldr	r1, [r4, #8]
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fba1 	bl	80082cc <_vfiprintf_r>
 8007b8a:	b002      	add	sp, #8
 8007b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b90:	b004      	add	sp, #16
 8007b92:	4770      	bx	lr
 8007b94:	200004c8 	.word	0x200004c8

08007b98 <_puts_r>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	460e      	mov	r6, r1
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	b118      	cbz	r0, 8007ba8 <_puts_r+0x10>
 8007ba0:	6983      	ldr	r3, [r0, #24]
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <_puts_r+0x10>
 8007ba4:	f000 fa58 	bl	8008058 <__sinit>
 8007ba8:	69ab      	ldr	r3, [r5, #24]
 8007baa:	68ac      	ldr	r4, [r5, #8]
 8007bac:	b913      	cbnz	r3, 8007bb4 <_puts_r+0x1c>
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 fa52 	bl	8008058 <__sinit>
 8007bb4:	4b2c      	ldr	r3, [pc, #176]	; (8007c68 <_puts_r+0xd0>)
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d120      	bne.n	8007bfc <_puts_r+0x64>
 8007bba:	686c      	ldr	r4, [r5, #4]
 8007bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bbe:	07db      	lsls	r3, r3, #31
 8007bc0:	d405      	bmi.n	8007bce <_puts_r+0x36>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	0598      	lsls	r0, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_puts_r+0x36>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bca:	f000 fae3 	bl	8008194 <__retarget_lock_acquire_recursive>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0719      	lsls	r1, r3, #28
 8007bd2:	d51d      	bpl.n	8007c10 <_puts_r+0x78>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	b1db      	cbz	r3, 8007c10 <_puts_r+0x78>
 8007bd8:	3e01      	subs	r6, #1
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007be0:	3b01      	subs	r3, #1
 8007be2:	60a3      	str	r3, [r4, #8]
 8007be4:	bb39      	cbnz	r1, 8007c36 <_puts_r+0x9e>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da38      	bge.n	8007c5c <_puts_r+0xc4>
 8007bea:	4622      	mov	r2, r4
 8007bec:	210a      	movs	r1, #10
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 f858 	bl	8007ca4 <__swbuf_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d011      	beq.n	8007c1c <_puts_r+0x84>
 8007bf8:	250a      	movs	r5, #10
 8007bfa:	e011      	b.n	8007c20 <_puts_r+0x88>
 8007bfc:	4b1b      	ldr	r3, [pc, #108]	; (8007c6c <_puts_r+0xd4>)
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	d101      	bne.n	8007c06 <_puts_r+0x6e>
 8007c02:	68ac      	ldr	r4, [r5, #8]
 8007c04:	e7da      	b.n	8007bbc <_puts_r+0x24>
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <_puts_r+0xd8>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	bf08      	it	eq
 8007c0c:	68ec      	ldreq	r4, [r5, #12]
 8007c0e:	e7d5      	b.n	8007bbc <_puts_r+0x24>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f898 	bl	8007d48 <__swsetup_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d0dd      	beq.n	8007bd8 <_puts_r+0x40>
 8007c1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c22:	07da      	lsls	r2, r3, #31
 8007c24:	d405      	bmi.n	8007c32 <_puts_r+0x9a>
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	059b      	lsls	r3, r3, #22
 8007c2a:	d402      	bmi.n	8007c32 <_puts_r+0x9a>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2e:	f000 fab2 	bl	8008196 <__retarget_lock_release_recursive>
 8007c32:	4628      	mov	r0, r5
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	da04      	bge.n	8007c44 <_puts_r+0xac>
 8007c3a:	69a2      	ldr	r2, [r4, #24]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	dc06      	bgt.n	8007c4e <_puts_r+0xb6>
 8007c40:	290a      	cmp	r1, #10
 8007c42:	d004      	beq.n	8007c4e <_puts_r+0xb6>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	7019      	strb	r1, [r3, #0]
 8007c4c:	e7c5      	b.n	8007bda <_puts_r+0x42>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 f827 	bl	8007ca4 <__swbuf_r>
 8007c56:	3001      	adds	r0, #1
 8007c58:	d1bf      	bne.n	8007bda <_puts_r+0x42>
 8007c5a:	e7df      	b.n	8007c1c <_puts_r+0x84>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	250a      	movs	r5, #10
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	6022      	str	r2, [r4, #0]
 8007c64:	701d      	strb	r5, [r3, #0]
 8007c66:	e7db      	b.n	8007c20 <_puts_r+0x88>
 8007c68:	08008f44 	.word	0x08008f44
 8007c6c:	08008f64 	.word	0x08008f64
 8007c70:	08008f24 	.word	0x08008f24

08007c74 <puts>:
 8007c74:	4b02      	ldr	r3, [pc, #8]	; (8007c80 <puts+0xc>)
 8007c76:	4601      	mov	r1, r0
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	f7ff bf8d 	b.w	8007b98 <_puts_r>
 8007c7e:	bf00      	nop
 8007c80:	200004c8 	.word	0x200004c8

08007c84 <_sbrk_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_sbrk_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7f9 fe9c 	bl	80019cc <_sbrk>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_sbrk_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_sbrk_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000cf8 	.word	0x20000cf8

08007ca4 <__swbuf_r>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	460e      	mov	r6, r1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	4605      	mov	r5, r0
 8007cac:	b118      	cbz	r0, 8007cb6 <__swbuf_r+0x12>
 8007cae:	6983      	ldr	r3, [r0, #24]
 8007cb0:	b90b      	cbnz	r3, 8007cb6 <__swbuf_r+0x12>
 8007cb2:	f000 f9d1 	bl	8008058 <__sinit>
 8007cb6:	4b21      	ldr	r3, [pc, #132]	; (8007d3c <__swbuf_r+0x98>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d12b      	bne.n	8007d14 <__swbuf_r+0x70>
 8007cbc:	686c      	ldr	r4, [r5, #4]
 8007cbe:	69a3      	ldr	r3, [r4, #24]
 8007cc0:	60a3      	str	r3, [r4, #8]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	071a      	lsls	r2, r3, #28
 8007cc6:	d52f      	bpl.n	8007d28 <__swbuf_r+0x84>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	b36b      	cbz	r3, 8007d28 <__swbuf_r+0x84>
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	6820      	ldr	r0, [r4, #0]
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	6963      	ldr	r3, [r4, #20]
 8007cd4:	b2f6      	uxtb	r6, r6
 8007cd6:	4283      	cmp	r3, r0
 8007cd8:	4637      	mov	r7, r6
 8007cda:	dc04      	bgt.n	8007ce6 <__swbuf_r+0x42>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 f926 	bl	8007f30 <_fflush_r>
 8007ce4:	bb30      	cbnz	r0, 8007d34 <__swbuf_r+0x90>
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	60a3      	str	r3, [r4, #8]
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	6022      	str	r2, [r4, #0]
 8007cf2:	701e      	strb	r6, [r3, #0]
 8007cf4:	6963      	ldr	r3, [r4, #20]
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	4283      	cmp	r3, r0
 8007cfa:	d004      	beq.n	8007d06 <__swbuf_r+0x62>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	07db      	lsls	r3, r3, #31
 8007d00:	d506      	bpl.n	8007d10 <__swbuf_r+0x6c>
 8007d02:	2e0a      	cmp	r6, #10
 8007d04:	d104      	bne.n	8007d10 <__swbuf_r+0x6c>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f911 	bl	8007f30 <_fflush_r>
 8007d0e:	b988      	cbnz	r0, 8007d34 <__swbuf_r+0x90>
 8007d10:	4638      	mov	r0, r7
 8007d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <__swbuf_r+0x9c>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d101      	bne.n	8007d1e <__swbuf_r+0x7a>
 8007d1a:	68ac      	ldr	r4, [r5, #8]
 8007d1c:	e7cf      	b.n	8007cbe <__swbuf_r+0x1a>
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <__swbuf_r+0xa0>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	bf08      	it	eq
 8007d24:	68ec      	ldreq	r4, [r5, #12]
 8007d26:	e7ca      	b.n	8007cbe <__swbuf_r+0x1a>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f80c 	bl	8007d48 <__swsetup_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d0cb      	beq.n	8007ccc <__swbuf_r+0x28>
 8007d34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d38:	e7ea      	b.n	8007d10 <__swbuf_r+0x6c>
 8007d3a:	bf00      	nop
 8007d3c:	08008f44 	.word	0x08008f44
 8007d40:	08008f64 	.word	0x08008f64
 8007d44:	08008f24 	.word	0x08008f24

08007d48 <__swsetup_r>:
 8007d48:	4b32      	ldr	r3, [pc, #200]	; (8007e14 <__swsetup_r+0xcc>)
 8007d4a:	b570      	push	{r4, r5, r6, lr}
 8007d4c:	681d      	ldr	r5, [r3, #0]
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	b125      	cbz	r5, 8007d5e <__swsetup_r+0x16>
 8007d54:	69ab      	ldr	r3, [r5, #24]
 8007d56:	b913      	cbnz	r3, 8007d5e <__swsetup_r+0x16>
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f000 f97d 	bl	8008058 <__sinit>
 8007d5e:	4b2e      	ldr	r3, [pc, #184]	; (8007e18 <__swsetup_r+0xd0>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	d10f      	bne.n	8007d84 <__swsetup_r+0x3c>
 8007d64:	686c      	ldr	r4, [r5, #4]
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d6c:	0719      	lsls	r1, r3, #28
 8007d6e:	d42c      	bmi.n	8007dca <__swsetup_r+0x82>
 8007d70:	06dd      	lsls	r5, r3, #27
 8007d72:	d411      	bmi.n	8007d98 <__swsetup_r+0x50>
 8007d74:	2309      	movs	r3, #9
 8007d76:	6033      	str	r3, [r6, #0]
 8007d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d82:	e03e      	b.n	8007e02 <__swsetup_r+0xba>
 8007d84:	4b25      	ldr	r3, [pc, #148]	; (8007e1c <__swsetup_r+0xd4>)
 8007d86:	429c      	cmp	r4, r3
 8007d88:	d101      	bne.n	8007d8e <__swsetup_r+0x46>
 8007d8a:	68ac      	ldr	r4, [r5, #8]
 8007d8c:	e7eb      	b.n	8007d66 <__swsetup_r+0x1e>
 8007d8e:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <__swsetup_r+0xd8>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	bf08      	it	eq
 8007d94:	68ec      	ldreq	r4, [r5, #12]
 8007d96:	e7e6      	b.n	8007d66 <__swsetup_r+0x1e>
 8007d98:	0758      	lsls	r0, r3, #29
 8007d9a:	d512      	bpl.n	8007dc2 <__swsetup_r+0x7a>
 8007d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9e:	b141      	cbz	r1, 8007db2 <__swsetup_r+0x6a>
 8007da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da4:	4299      	cmp	r1, r3
 8007da6:	d002      	beq.n	8007dae <__swsetup_r+0x66>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff fe33 	bl	8007a14 <_free_r>
 8007dae:	2300      	movs	r3, #0
 8007db0:	6363      	str	r3, [r4, #52]	; 0x34
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6063      	str	r3, [r4, #4]
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f043 0308 	orr.w	r3, r3, #8
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	b94b      	cbnz	r3, 8007de2 <__swsetup_r+0x9a>
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd8:	d003      	beq.n	8007de2 <__swsetup_r+0x9a>
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f9ff 	bl	80081e0 <__smakebuf_r>
 8007de2:	89a0      	ldrh	r0, [r4, #12]
 8007de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de8:	f010 0301 	ands.w	r3, r0, #1
 8007dec:	d00a      	beq.n	8007e04 <__swsetup_r+0xbc>
 8007dee:	2300      	movs	r3, #0
 8007df0:	60a3      	str	r3, [r4, #8]
 8007df2:	6963      	ldr	r3, [r4, #20]
 8007df4:	425b      	negs	r3, r3
 8007df6:	61a3      	str	r3, [r4, #24]
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	b943      	cbnz	r3, 8007e0e <__swsetup_r+0xc6>
 8007dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e00:	d1ba      	bne.n	8007d78 <__swsetup_r+0x30>
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	0781      	lsls	r1, r0, #30
 8007e06:	bf58      	it	pl
 8007e08:	6963      	ldrpl	r3, [r4, #20]
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	e7f4      	b.n	8007df8 <__swsetup_r+0xb0>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e7f7      	b.n	8007e02 <__swsetup_r+0xba>
 8007e12:	bf00      	nop
 8007e14:	200004c8 	.word	0x200004c8
 8007e18:	08008f44 	.word	0x08008f44
 8007e1c:	08008f64 	.word	0x08008f64
 8007e20:	08008f24 	.word	0x08008f24

08007e24 <__sflush_r>:
 8007e24:	898a      	ldrh	r2, [r1, #12]
 8007e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	0710      	lsls	r0, r2, #28
 8007e2e:	460c      	mov	r4, r1
 8007e30:	d458      	bmi.n	8007ee4 <__sflush_r+0xc0>
 8007e32:	684b      	ldr	r3, [r1, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dc05      	bgt.n	8007e44 <__sflush_r+0x20>
 8007e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dc02      	bgt.n	8007e44 <__sflush_r+0x20>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	d0f9      	beq.n	8007e3e <__sflush_r+0x1a>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e50:	682f      	ldr	r7, [r5, #0]
 8007e52:	602b      	str	r3, [r5, #0]
 8007e54:	d032      	beq.n	8007ebc <__sflush_r+0x98>
 8007e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	075a      	lsls	r2, r3, #29
 8007e5c:	d505      	bpl.n	8007e6a <__sflush_r+0x46>
 8007e5e:	6863      	ldr	r3, [r4, #4]
 8007e60:	1ac0      	subs	r0, r0, r3
 8007e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e64:	b10b      	cbz	r3, 8007e6a <__sflush_r+0x46>
 8007e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e68:	1ac0      	subs	r0, r0, r3
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e70:	6a21      	ldr	r1, [r4, #32]
 8007e72:	4628      	mov	r0, r5
 8007e74:	47b0      	blx	r6
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	d106      	bne.n	8007e8a <__sflush_r+0x66>
 8007e7c:	6829      	ldr	r1, [r5, #0]
 8007e7e:	291d      	cmp	r1, #29
 8007e80:	d82c      	bhi.n	8007edc <__sflush_r+0xb8>
 8007e82:	4a2a      	ldr	r2, [pc, #168]	; (8007f2c <__sflush_r+0x108>)
 8007e84:	40ca      	lsrs	r2, r1
 8007e86:	07d6      	lsls	r6, r2, #31
 8007e88:	d528      	bpl.n	8007edc <__sflush_r+0xb8>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	6062      	str	r2, [r4, #4]
 8007e8e:	04d9      	lsls	r1, r3, #19
 8007e90:	6922      	ldr	r2, [r4, #16]
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	d504      	bpl.n	8007ea0 <__sflush_r+0x7c>
 8007e96:	1c42      	adds	r2, r0, #1
 8007e98:	d101      	bne.n	8007e9e <__sflush_r+0x7a>
 8007e9a:	682b      	ldr	r3, [r5, #0]
 8007e9c:	b903      	cbnz	r3, 8007ea0 <__sflush_r+0x7c>
 8007e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea2:	602f      	str	r7, [r5, #0]
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d0ca      	beq.n	8007e3e <__sflush_r+0x1a>
 8007ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eac:	4299      	cmp	r1, r3
 8007eae:	d002      	beq.n	8007eb6 <__sflush_r+0x92>
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f7ff fdaf 	bl	8007a14 <_free_r>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8007eba:	e7c1      	b.n	8007e40 <__sflush_r+0x1c>
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b0      	blx	r6
 8007ec4:	1c41      	adds	r1, r0, #1
 8007ec6:	d1c7      	bne.n	8007e58 <__sflush_r+0x34>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0c4      	beq.n	8007e58 <__sflush_r+0x34>
 8007ece:	2b1d      	cmp	r3, #29
 8007ed0:	d001      	beq.n	8007ed6 <__sflush_r+0xb2>
 8007ed2:	2b16      	cmp	r3, #22
 8007ed4:	d101      	bne.n	8007eda <__sflush_r+0xb6>
 8007ed6:	602f      	str	r7, [r5, #0]
 8007ed8:	e7b1      	b.n	8007e3e <__sflush_r+0x1a>
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	e7ad      	b.n	8007e40 <__sflush_r+0x1c>
 8007ee4:	690f      	ldr	r7, [r1, #16]
 8007ee6:	2f00      	cmp	r7, #0
 8007ee8:	d0a9      	beq.n	8007e3e <__sflush_r+0x1a>
 8007eea:	0793      	lsls	r3, r2, #30
 8007eec:	680e      	ldr	r6, [r1, #0]
 8007eee:	bf08      	it	eq
 8007ef0:	694b      	ldreq	r3, [r1, #20]
 8007ef2:	600f      	str	r7, [r1, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	eba6 0807 	sub.w	r8, r6, r7
 8007efc:	608b      	str	r3, [r1, #8]
 8007efe:	f1b8 0f00 	cmp.w	r8, #0
 8007f02:	dd9c      	ble.n	8007e3e <__sflush_r+0x1a>
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f08:	4643      	mov	r3, r8
 8007f0a:	463a      	mov	r2, r7
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b0      	blx	r6
 8007f10:	2800      	cmp	r0, #0
 8007f12:	dc06      	bgt.n	8007f22 <__sflush_r+0xfe>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f20:	e78e      	b.n	8007e40 <__sflush_r+0x1c>
 8007f22:	4407      	add	r7, r0
 8007f24:	eba8 0800 	sub.w	r8, r8, r0
 8007f28:	e7e9      	b.n	8007efe <__sflush_r+0xda>
 8007f2a:	bf00      	nop
 8007f2c:	20400001 	.word	0x20400001

08007f30 <_fflush_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	690b      	ldr	r3, [r1, #16]
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b913      	cbnz	r3, 8007f40 <_fflush_r+0x10>
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	b118      	cbz	r0, 8007f4a <_fflush_r+0x1a>
 8007f42:	6983      	ldr	r3, [r0, #24]
 8007f44:	b90b      	cbnz	r3, 8007f4a <_fflush_r+0x1a>
 8007f46:	f000 f887 	bl	8008058 <__sinit>
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <_fflush_r+0x6c>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	d11b      	bne.n	8007f88 <_fflush_r+0x58>
 8007f50:	686c      	ldr	r4, [r5, #4]
 8007f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0ef      	beq.n	8007f3a <_fflush_r+0xa>
 8007f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f5c:	07d0      	lsls	r0, r2, #31
 8007f5e:	d404      	bmi.n	8007f6a <_fflush_r+0x3a>
 8007f60:	0599      	lsls	r1, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_fflush_r+0x3a>
 8007f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f66:	f000 f915 	bl	8008194 <__retarget_lock_acquire_recursive>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	f7ff ff59 	bl	8007e24 <__sflush_r>
 8007f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f74:	07da      	lsls	r2, r3, #31
 8007f76:	4605      	mov	r5, r0
 8007f78:	d4e0      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	059b      	lsls	r3, r3, #22
 8007f7e:	d4dd      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f82:	f000 f908 	bl	8008196 <__retarget_lock_release_recursive>
 8007f86:	e7d9      	b.n	8007f3c <_fflush_r+0xc>
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <_fflush_r+0x70>)
 8007f8a:	429c      	cmp	r4, r3
 8007f8c:	d101      	bne.n	8007f92 <_fflush_r+0x62>
 8007f8e:	68ac      	ldr	r4, [r5, #8]
 8007f90:	e7df      	b.n	8007f52 <_fflush_r+0x22>
 8007f92:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <_fflush_r+0x74>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	bf08      	it	eq
 8007f98:	68ec      	ldreq	r4, [r5, #12]
 8007f9a:	e7da      	b.n	8007f52 <_fflush_r+0x22>
 8007f9c:	08008f44 	.word	0x08008f44
 8007fa0:	08008f64 	.word	0x08008f64
 8007fa4:	08008f24 	.word	0x08008f24

08007fa8 <std>:
 8007fa8:	2300      	movs	r3, #0
 8007faa:	b510      	push	{r4, lr}
 8007fac:	4604      	mov	r4, r0
 8007fae:	e9c0 3300 	strd	r3, r3, [r0]
 8007fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fb6:	6083      	str	r3, [r0, #8]
 8007fb8:	8181      	strh	r1, [r0, #12]
 8007fba:	6643      	str	r3, [r0, #100]	; 0x64
 8007fbc:	81c2      	strh	r2, [r0, #14]
 8007fbe:	6183      	str	r3, [r0, #24]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	2208      	movs	r2, #8
 8007fc4:	305c      	adds	r0, #92	; 0x5c
 8007fc6:	f7ff fd1d 	bl	8007a04 <memset>
 8007fca:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <std+0x38>)
 8007fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <std+0x3c>)
 8007fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fd2:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <std+0x40>)
 8007fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <std+0x44>)
 8007fd8:	6224      	str	r4, [r4, #32]
 8007fda:	6323      	str	r3, [r4, #48]	; 0x30
 8007fdc:	bd10      	pop	{r4, pc}
 8007fde:	bf00      	nop
 8007fe0:	08008855 	.word	0x08008855
 8007fe4:	08008877 	.word	0x08008877
 8007fe8:	080088af 	.word	0x080088af
 8007fec:	080088d3 	.word	0x080088d3

08007ff0 <_cleanup_r>:
 8007ff0:	4901      	ldr	r1, [pc, #4]	; (8007ff8 <_cleanup_r+0x8>)
 8007ff2:	f000 b8af 	b.w	8008154 <_fwalk_reent>
 8007ff6:	bf00      	nop
 8007ff8:	08007f31 	.word	0x08007f31

08007ffc <__sfmoreglue>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	1e4a      	subs	r2, r1, #1
 8008000:	2568      	movs	r5, #104	; 0x68
 8008002:	4355      	muls	r5, r2
 8008004:	460e      	mov	r6, r1
 8008006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800800a:	f7ff fd53 	bl	8007ab4 <_malloc_r>
 800800e:	4604      	mov	r4, r0
 8008010:	b140      	cbz	r0, 8008024 <__sfmoreglue+0x28>
 8008012:	2100      	movs	r1, #0
 8008014:	e9c0 1600 	strd	r1, r6, [r0]
 8008018:	300c      	adds	r0, #12
 800801a:	60a0      	str	r0, [r4, #8]
 800801c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008020:	f7ff fcf0 	bl	8007a04 <memset>
 8008024:	4620      	mov	r0, r4
 8008026:	bd70      	pop	{r4, r5, r6, pc}

08008028 <__sfp_lock_acquire>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__sfp_lock_acquire+0x8>)
 800802a:	f000 b8b3 	b.w	8008194 <__retarget_lock_acquire_recursive>
 800802e:	bf00      	nop
 8008030:	20000cf4 	.word	0x20000cf4

08008034 <__sfp_lock_release>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sfp_lock_release+0x8>)
 8008036:	f000 b8ae 	b.w	8008196 <__retarget_lock_release_recursive>
 800803a:	bf00      	nop
 800803c:	20000cf4 	.word	0x20000cf4

08008040 <__sinit_lock_acquire>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sinit_lock_acquire+0x8>)
 8008042:	f000 b8a7 	b.w	8008194 <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	20000cef 	.word	0x20000cef

0800804c <__sinit_lock_release>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sinit_lock_release+0x8>)
 800804e:	f000 b8a2 	b.w	8008196 <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	20000cef 	.word	0x20000cef

08008058 <__sinit>:
 8008058:	b510      	push	{r4, lr}
 800805a:	4604      	mov	r4, r0
 800805c:	f7ff fff0 	bl	8008040 <__sinit_lock_acquire>
 8008060:	69a3      	ldr	r3, [r4, #24]
 8008062:	b11b      	cbz	r3, 800806c <__sinit+0x14>
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	f7ff bff0 	b.w	800804c <__sinit_lock_release>
 800806c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008070:	6523      	str	r3, [r4, #80]	; 0x50
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <__sinit+0x68>)
 8008074:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <__sinit+0x6c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	62a2      	str	r2, [r4, #40]	; 0x28
 800807a:	42a3      	cmp	r3, r4
 800807c:	bf04      	itt	eq
 800807e:	2301      	moveq	r3, #1
 8008080:	61a3      	streq	r3, [r4, #24]
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f820 	bl	80080c8 <__sfp>
 8008088:	6060      	str	r0, [r4, #4]
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f81c 	bl	80080c8 <__sfp>
 8008090:	60a0      	str	r0, [r4, #8]
 8008092:	4620      	mov	r0, r4
 8008094:	f000 f818 	bl	80080c8 <__sfp>
 8008098:	2200      	movs	r2, #0
 800809a:	60e0      	str	r0, [r4, #12]
 800809c:	2104      	movs	r1, #4
 800809e:	6860      	ldr	r0, [r4, #4]
 80080a0:	f7ff ff82 	bl	8007fa8 <std>
 80080a4:	68a0      	ldr	r0, [r4, #8]
 80080a6:	2201      	movs	r2, #1
 80080a8:	2109      	movs	r1, #9
 80080aa:	f7ff ff7d 	bl	8007fa8 <std>
 80080ae:	68e0      	ldr	r0, [r4, #12]
 80080b0:	2202      	movs	r2, #2
 80080b2:	2112      	movs	r1, #18
 80080b4:	f7ff ff78 	bl	8007fa8 <std>
 80080b8:	2301      	movs	r3, #1
 80080ba:	61a3      	str	r3, [r4, #24]
 80080bc:	e7d2      	b.n	8008064 <__sinit+0xc>
 80080be:	bf00      	nop
 80080c0:	08008f20 	.word	0x08008f20
 80080c4:	08007ff1 	.word	0x08007ff1

080080c8 <__sfp>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	4607      	mov	r7, r0
 80080cc:	f7ff ffac 	bl	8008028 <__sfp_lock_acquire>
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <__sfp+0x84>)
 80080d2:	681e      	ldr	r6, [r3, #0]
 80080d4:	69b3      	ldr	r3, [r6, #24]
 80080d6:	b913      	cbnz	r3, 80080de <__sfp+0x16>
 80080d8:	4630      	mov	r0, r6
 80080da:	f7ff ffbd 	bl	8008058 <__sinit>
 80080de:	3648      	adds	r6, #72	; 0x48
 80080e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	d503      	bpl.n	80080f0 <__sfp+0x28>
 80080e8:	6833      	ldr	r3, [r6, #0]
 80080ea:	b30b      	cbz	r3, 8008130 <__sfp+0x68>
 80080ec:	6836      	ldr	r6, [r6, #0]
 80080ee:	e7f7      	b.n	80080e0 <__sfp+0x18>
 80080f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080f4:	b9d5      	cbnz	r5, 800812c <__sfp+0x64>
 80080f6:	4b16      	ldr	r3, [pc, #88]	; (8008150 <__sfp+0x88>)
 80080f8:	60e3      	str	r3, [r4, #12]
 80080fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008100:	f000 f847 	bl	8008192 <__retarget_lock_init_recursive>
 8008104:	f7ff ff96 	bl	8008034 <__sfp_lock_release>
 8008108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800810c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008110:	6025      	str	r5, [r4, #0]
 8008112:	61a5      	str	r5, [r4, #24]
 8008114:	2208      	movs	r2, #8
 8008116:	4629      	mov	r1, r5
 8008118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800811c:	f7ff fc72 	bl	8007a04 <memset>
 8008120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008128:	4620      	mov	r0, r4
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812c:	3468      	adds	r4, #104	; 0x68
 800812e:	e7d9      	b.n	80080e4 <__sfp+0x1c>
 8008130:	2104      	movs	r1, #4
 8008132:	4638      	mov	r0, r7
 8008134:	f7ff ff62 	bl	8007ffc <__sfmoreglue>
 8008138:	4604      	mov	r4, r0
 800813a:	6030      	str	r0, [r6, #0]
 800813c:	2800      	cmp	r0, #0
 800813e:	d1d5      	bne.n	80080ec <__sfp+0x24>
 8008140:	f7ff ff78 	bl	8008034 <__sfp_lock_release>
 8008144:	230c      	movs	r3, #12
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	e7ee      	b.n	8008128 <__sfp+0x60>
 800814a:	bf00      	nop
 800814c:	08008f20 	.word	0x08008f20
 8008150:	ffff0001 	.word	0xffff0001

08008154 <_fwalk_reent>:
 8008154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008158:	4606      	mov	r6, r0
 800815a:	4688      	mov	r8, r1
 800815c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008160:	2700      	movs	r7, #0
 8008162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008166:	f1b9 0901 	subs.w	r9, r9, #1
 800816a:	d505      	bpl.n	8008178 <_fwalk_reent+0x24>
 800816c:	6824      	ldr	r4, [r4, #0]
 800816e:	2c00      	cmp	r4, #0
 8008170:	d1f7      	bne.n	8008162 <_fwalk_reent+0xe>
 8008172:	4638      	mov	r0, r7
 8008174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008178:	89ab      	ldrh	r3, [r5, #12]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d907      	bls.n	800818e <_fwalk_reent+0x3a>
 800817e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008182:	3301      	adds	r3, #1
 8008184:	d003      	beq.n	800818e <_fwalk_reent+0x3a>
 8008186:	4629      	mov	r1, r5
 8008188:	4630      	mov	r0, r6
 800818a:	47c0      	blx	r8
 800818c:	4307      	orrs	r7, r0
 800818e:	3568      	adds	r5, #104	; 0x68
 8008190:	e7e9      	b.n	8008166 <_fwalk_reent+0x12>

08008192 <__retarget_lock_init_recursive>:
 8008192:	4770      	bx	lr

08008194 <__retarget_lock_acquire_recursive>:
 8008194:	4770      	bx	lr

08008196 <__retarget_lock_release_recursive>:
 8008196:	4770      	bx	lr

08008198 <__swhatbuf_r>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	460e      	mov	r6, r1
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	2900      	cmp	r1, #0
 80081a2:	b096      	sub	sp, #88	; 0x58
 80081a4:	4614      	mov	r4, r2
 80081a6:	461d      	mov	r5, r3
 80081a8:	da07      	bge.n	80081ba <__swhatbuf_r+0x22>
 80081aa:	2300      	movs	r3, #0
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	89b3      	ldrh	r3, [r6, #12]
 80081b0:	061a      	lsls	r2, r3, #24
 80081b2:	d410      	bmi.n	80081d6 <__swhatbuf_r+0x3e>
 80081b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b8:	e00e      	b.n	80081d8 <__swhatbuf_r+0x40>
 80081ba:	466a      	mov	r2, sp
 80081bc:	f000 fbb0 	bl	8008920 <_fstat_r>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	dbf2      	blt.n	80081aa <__swhatbuf_r+0x12>
 80081c4:	9a01      	ldr	r2, [sp, #4]
 80081c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081ce:	425a      	negs	r2, r3
 80081d0:	415a      	adcs	r2, r3
 80081d2:	602a      	str	r2, [r5, #0]
 80081d4:	e7ee      	b.n	80081b4 <__swhatbuf_r+0x1c>
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	2000      	movs	r0, #0
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	b016      	add	sp, #88	; 0x58
 80081de:	bd70      	pop	{r4, r5, r6, pc}

080081e0 <__smakebuf_r>:
 80081e0:	898b      	ldrh	r3, [r1, #12]
 80081e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081e4:	079d      	lsls	r5, r3, #30
 80081e6:	4606      	mov	r6, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	d507      	bpl.n	80081fc <__smakebuf_r+0x1c>
 80081ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2301      	movs	r3, #1
 80081f6:	6163      	str	r3, [r4, #20]
 80081f8:	b002      	add	sp, #8
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	ab01      	add	r3, sp, #4
 80081fe:	466a      	mov	r2, sp
 8008200:	f7ff ffca 	bl	8008198 <__swhatbuf_r>
 8008204:	9900      	ldr	r1, [sp, #0]
 8008206:	4605      	mov	r5, r0
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff fc53 	bl	8007ab4 <_malloc_r>
 800820e:	b948      	cbnz	r0, 8008224 <__smakebuf_r+0x44>
 8008210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008214:	059a      	lsls	r2, r3, #22
 8008216:	d4ef      	bmi.n	80081f8 <__smakebuf_r+0x18>
 8008218:	f023 0303 	bic.w	r3, r3, #3
 800821c:	f043 0302 	orr.w	r3, r3, #2
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	e7e3      	b.n	80081ec <__smakebuf_r+0xc>
 8008224:	4b0d      	ldr	r3, [pc, #52]	; (800825c <__smakebuf_r+0x7c>)
 8008226:	62b3      	str	r3, [r6, #40]	; 0x28
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	6020      	str	r0, [r4, #0]
 800822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	9b00      	ldr	r3, [sp, #0]
 8008234:	6163      	str	r3, [r4, #20]
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	6120      	str	r0, [r4, #16]
 800823a:	b15b      	cbz	r3, 8008254 <__smakebuf_r+0x74>
 800823c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008240:	4630      	mov	r0, r6
 8008242:	f000 fb7f 	bl	8008944 <_isatty_r>
 8008246:	b128      	cbz	r0, 8008254 <__smakebuf_r+0x74>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	89a0      	ldrh	r0, [r4, #12]
 8008256:	4305      	orrs	r5, r0
 8008258:	81a5      	strh	r5, [r4, #12]
 800825a:	e7cd      	b.n	80081f8 <__smakebuf_r+0x18>
 800825c:	08007ff1 	.word	0x08007ff1

08008260 <__malloc_lock>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__malloc_lock+0x8>)
 8008262:	f7ff bf97 	b.w	8008194 <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	20000cf0 	.word	0x20000cf0

0800826c <__malloc_unlock>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__malloc_unlock+0x8>)
 800826e:	f7ff bf92 	b.w	8008196 <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	20000cf0 	.word	0x20000cf0

08008278 <__sfputc_r>:
 8008278:	6893      	ldr	r3, [r2, #8]
 800827a:	3b01      	subs	r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	b410      	push	{r4}
 8008280:	6093      	str	r3, [r2, #8]
 8008282:	da08      	bge.n	8008296 <__sfputc_r+0x1e>
 8008284:	6994      	ldr	r4, [r2, #24]
 8008286:	42a3      	cmp	r3, r4
 8008288:	db01      	blt.n	800828e <__sfputc_r+0x16>
 800828a:	290a      	cmp	r1, #10
 800828c:	d103      	bne.n	8008296 <__sfputc_r+0x1e>
 800828e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008292:	f7ff bd07 	b.w	8007ca4 <__swbuf_r>
 8008296:	6813      	ldr	r3, [r2, #0]
 8008298:	1c58      	adds	r0, r3, #1
 800829a:	6010      	str	r0, [r2, #0]
 800829c:	7019      	strb	r1, [r3, #0]
 800829e:	4608      	mov	r0, r1
 80082a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <__sfputs_r>:
 80082a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	4614      	mov	r4, r2
 80082ae:	18d5      	adds	r5, r2, r3
 80082b0:	42ac      	cmp	r4, r5
 80082b2:	d101      	bne.n	80082b8 <__sfputs_r+0x12>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e007      	b.n	80082c8 <__sfputs_r+0x22>
 80082b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082bc:	463a      	mov	r2, r7
 80082be:	4630      	mov	r0, r6
 80082c0:	f7ff ffda 	bl	8008278 <__sfputc_r>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d1f3      	bne.n	80082b0 <__sfputs_r+0xa>
 80082c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082cc <_vfiprintf_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	460d      	mov	r5, r1
 80082d2:	b09d      	sub	sp, #116	; 0x74
 80082d4:	4614      	mov	r4, r2
 80082d6:	4698      	mov	r8, r3
 80082d8:	4606      	mov	r6, r0
 80082da:	b118      	cbz	r0, 80082e4 <_vfiprintf_r+0x18>
 80082dc:	6983      	ldr	r3, [r0, #24]
 80082de:	b90b      	cbnz	r3, 80082e4 <_vfiprintf_r+0x18>
 80082e0:	f7ff feba 	bl	8008058 <__sinit>
 80082e4:	4b89      	ldr	r3, [pc, #548]	; (800850c <_vfiprintf_r+0x240>)
 80082e6:	429d      	cmp	r5, r3
 80082e8:	d11b      	bne.n	8008322 <_vfiprintf_r+0x56>
 80082ea:	6875      	ldr	r5, [r6, #4]
 80082ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ee:	07d9      	lsls	r1, r3, #31
 80082f0:	d405      	bmi.n	80082fe <_vfiprintf_r+0x32>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	059a      	lsls	r2, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_vfiprintf_r+0x32>
 80082f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082fa:	f7ff ff4b 	bl	8008194 <__retarget_lock_acquire_recursive>
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	071b      	lsls	r3, r3, #28
 8008302:	d501      	bpl.n	8008308 <_vfiprintf_r+0x3c>
 8008304:	692b      	ldr	r3, [r5, #16]
 8008306:	b9eb      	cbnz	r3, 8008344 <_vfiprintf_r+0x78>
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff fd1c 	bl	8007d48 <__swsetup_r>
 8008310:	b1c0      	cbz	r0, 8008344 <_vfiprintf_r+0x78>
 8008312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008314:	07dc      	lsls	r4, r3, #31
 8008316:	d50e      	bpl.n	8008336 <_vfiprintf_r+0x6a>
 8008318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831c:	b01d      	add	sp, #116	; 0x74
 800831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008322:	4b7b      	ldr	r3, [pc, #492]	; (8008510 <_vfiprintf_r+0x244>)
 8008324:	429d      	cmp	r5, r3
 8008326:	d101      	bne.n	800832c <_vfiprintf_r+0x60>
 8008328:	68b5      	ldr	r5, [r6, #8]
 800832a:	e7df      	b.n	80082ec <_vfiprintf_r+0x20>
 800832c:	4b79      	ldr	r3, [pc, #484]	; (8008514 <_vfiprintf_r+0x248>)
 800832e:	429d      	cmp	r5, r3
 8008330:	bf08      	it	eq
 8008332:	68f5      	ldreq	r5, [r6, #12]
 8008334:	e7da      	b.n	80082ec <_vfiprintf_r+0x20>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	0598      	lsls	r0, r3, #22
 800833a:	d4ed      	bmi.n	8008318 <_vfiprintf_r+0x4c>
 800833c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800833e:	f7ff ff2a 	bl	8008196 <__retarget_lock_release_recursive>
 8008342:	e7e9      	b.n	8008318 <_vfiprintf_r+0x4c>
 8008344:	2300      	movs	r3, #0
 8008346:	9309      	str	r3, [sp, #36]	; 0x24
 8008348:	2320      	movs	r3, #32
 800834a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008352:	2330      	movs	r3, #48	; 0x30
 8008354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008518 <_vfiprintf_r+0x24c>
 8008358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800835c:	f04f 0901 	mov.w	r9, #1
 8008360:	4623      	mov	r3, r4
 8008362:	469a      	mov	sl, r3
 8008364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008368:	b10a      	cbz	r2, 800836e <_vfiprintf_r+0xa2>
 800836a:	2a25      	cmp	r2, #37	; 0x25
 800836c:	d1f9      	bne.n	8008362 <_vfiprintf_r+0x96>
 800836e:	ebba 0b04 	subs.w	fp, sl, r4
 8008372:	d00b      	beq.n	800838c <_vfiprintf_r+0xc0>
 8008374:	465b      	mov	r3, fp
 8008376:	4622      	mov	r2, r4
 8008378:	4629      	mov	r1, r5
 800837a:	4630      	mov	r0, r6
 800837c:	f7ff ff93 	bl	80082a6 <__sfputs_r>
 8008380:	3001      	adds	r0, #1
 8008382:	f000 80aa 	beq.w	80084da <_vfiprintf_r+0x20e>
 8008386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008388:	445a      	add	r2, fp
 800838a:	9209      	str	r2, [sp, #36]	; 0x24
 800838c:	f89a 3000 	ldrb.w	r3, [sl]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80a2 	beq.w	80084da <_vfiprintf_r+0x20e>
 8008396:	2300      	movs	r3, #0
 8008398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800839c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a0:	f10a 0a01 	add.w	sl, sl, #1
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ac:	931a      	str	r3, [sp, #104]	; 0x68
 80083ae:	4654      	mov	r4, sl
 80083b0:	2205      	movs	r2, #5
 80083b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b6:	4858      	ldr	r0, [pc, #352]	; (8008518 <_vfiprintf_r+0x24c>)
 80083b8:	f7f7 ff0a 	bl	80001d0 <memchr>
 80083bc:	9a04      	ldr	r2, [sp, #16]
 80083be:	b9d8      	cbnz	r0, 80083f8 <_vfiprintf_r+0x12c>
 80083c0:	06d1      	lsls	r1, r2, #27
 80083c2:	bf44      	itt	mi
 80083c4:	2320      	movmi	r3, #32
 80083c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ca:	0713      	lsls	r3, r2, #28
 80083cc:	bf44      	itt	mi
 80083ce:	232b      	movmi	r3, #43	; 0x2b
 80083d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d4:	f89a 3000 	ldrb.w	r3, [sl]
 80083d8:	2b2a      	cmp	r3, #42	; 0x2a
 80083da:	d015      	beq.n	8008408 <_vfiprintf_r+0x13c>
 80083dc:	9a07      	ldr	r2, [sp, #28]
 80083de:	4654      	mov	r4, sl
 80083e0:	2000      	movs	r0, #0
 80083e2:	f04f 0c0a 	mov.w	ip, #10
 80083e6:	4621      	mov	r1, r4
 80083e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ec:	3b30      	subs	r3, #48	; 0x30
 80083ee:	2b09      	cmp	r3, #9
 80083f0:	d94e      	bls.n	8008490 <_vfiprintf_r+0x1c4>
 80083f2:	b1b0      	cbz	r0, 8008422 <_vfiprintf_r+0x156>
 80083f4:	9207      	str	r2, [sp, #28]
 80083f6:	e014      	b.n	8008422 <_vfiprintf_r+0x156>
 80083f8:	eba0 0308 	sub.w	r3, r0, r8
 80083fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008400:	4313      	orrs	r3, r2
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	46a2      	mov	sl, r4
 8008406:	e7d2      	b.n	80083ae <_vfiprintf_r+0xe2>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	1d19      	adds	r1, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9103      	str	r1, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfbb      	ittet	lt
 8008414:	425b      	neglt	r3, r3
 8008416:	f042 0202 	orrlt.w	r2, r2, #2
 800841a:	9307      	strge	r3, [sp, #28]
 800841c:	9307      	strlt	r3, [sp, #28]
 800841e:	bfb8      	it	lt
 8008420:	9204      	strlt	r2, [sp, #16]
 8008422:	7823      	ldrb	r3, [r4, #0]
 8008424:	2b2e      	cmp	r3, #46	; 0x2e
 8008426:	d10c      	bne.n	8008442 <_vfiprintf_r+0x176>
 8008428:	7863      	ldrb	r3, [r4, #1]
 800842a:	2b2a      	cmp	r3, #42	; 0x2a
 800842c:	d135      	bne.n	800849a <_vfiprintf_r+0x1ce>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	1d1a      	adds	r2, r3, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	9203      	str	r2, [sp, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfb8      	it	lt
 800843a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800843e:	3402      	adds	r4, #2
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008528 <_vfiprintf_r+0x25c>
 8008446:	7821      	ldrb	r1, [r4, #0]
 8008448:	2203      	movs	r2, #3
 800844a:	4650      	mov	r0, sl
 800844c:	f7f7 fec0 	bl	80001d0 <memchr>
 8008450:	b140      	cbz	r0, 8008464 <_vfiprintf_r+0x198>
 8008452:	2340      	movs	r3, #64	; 0x40
 8008454:	eba0 000a 	sub.w	r0, r0, sl
 8008458:	fa03 f000 	lsl.w	r0, r3, r0
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	4303      	orrs	r3, r0
 8008460:	3401      	adds	r4, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	482c      	ldr	r0, [pc, #176]	; (800851c <_vfiprintf_r+0x250>)
 800846a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800846e:	2206      	movs	r2, #6
 8008470:	f7f7 feae 	bl	80001d0 <memchr>
 8008474:	2800      	cmp	r0, #0
 8008476:	d03f      	beq.n	80084f8 <_vfiprintf_r+0x22c>
 8008478:	4b29      	ldr	r3, [pc, #164]	; (8008520 <_vfiprintf_r+0x254>)
 800847a:	bb1b      	cbnz	r3, 80084c4 <_vfiprintf_r+0x1f8>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	3307      	adds	r3, #7
 8008480:	f023 0307 	bic.w	r3, r3, #7
 8008484:	3308      	adds	r3, #8
 8008486:	9303      	str	r3, [sp, #12]
 8008488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848a:	443b      	add	r3, r7
 800848c:	9309      	str	r3, [sp, #36]	; 0x24
 800848e:	e767      	b.n	8008360 <_vfiprintf_r+0x94>
 8008490:	fb0c 3202 	mla	r2, ip, r2, r3
 8008494:	460c      	mov	r4, r1
 8008496:	2001      	movs	r0, #1
 8008498:	e7a5      	b.n	80083e6 <_vfiprintf_r+0x11a>
 800849a:	2300      	movs	r3, #0
 800849c:	3401      	adds	r4, #1
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0c0a 	mov.w	ip, #10
 80084a6:	4620      	mov	r0, r4
 80084a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ac:	3a30      	subs	r2, #48	; 0x30
 80084ae:	2a09      	cmp	r2, #9
 80084b0:	d903      	bls.n	80084ba <_vfiprintf_r+0x1ee>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0c5      	beq.n	8008442 <_vfiprintf_r+0x176>
 80084b6:	9105      	str	r1, [sp, #20]
 80084b8:	e7c3      	b.n	8008442 <_vfiprintf_r+0x176>
 80084ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80084be:	4604      	mov	r4, r0
 80084c0:	2301      	movs	r3, #1
 80084c2:	e7f0      	b.n	80084a6 <_vfiprintf_r+0x1da>
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <_vfiprintf_r+0x258>)
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4630      	mov	r0, r6
 80084d0:	f3af 8000 	nop.w
 80084d4:	4607      	mov	r7, r0
 80084d6:	1c78      	adds	r0, r7, #1
 80084d8:	d1d6      	bne.n	8008488 <_vfiprintf_r+0x1bc>
 80084da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084dc:	07d9      	lsls	r1, r3, #31
 80084de:	d405      	bmi.n	80084ec <_vfiprintf_r+0x220>
 80084e0:	89ab      	ldrh	r3, [r5, #12]
 80084e2:	059a      	lsls	r2, r3, #22
 80084e4:	d402      	bmi.n	80084ec <_vfiprintf_r+0x220>
 80084e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e8:	f7ff fe55 	bl	8008196 <__retarget_lock_release_recursive>
 80084ec:	89ab      	ldrh	r3, [r5, #12]
 80084ee:	065b      	lsls	r3, r3, #25
 80084f0:	f53f af12 	bmi.w	8008318 <_vfiprintf_r+0x4c>
 80084f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f6:	e711      	b.n	800831c <_vfiprintf_r+0x50>
 80084f8:	ab03      	add	r3, sp, #12
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	462a      	mov	r2, r5
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <_vfiprintf_r+0x258>)
 8008500:	a904      	add	r1, sp, #16
 8008502:	4630      	mov	r0, r6
 8008504:	f000 f880 	bl	8008608 <_printf_i>
 8008508:	e7e4      	b.n	80084d4 <_vfiprintf_r+0x208>
 800850a:	bf00      	nop
 800850c:	08008f44 	.word	0x08008f44
 8008510:	08008f64 	.word	0x08008f64
 8008514:	08008f24 	.word	0x08008f24
 8008518:	08008f84 	.word	0x08008f84
 800851c:	08008f8e 	.word	0x08008f8e
 8008520:	00000000 	.word	0x00000000
 8008524:	080082a7 	.word	0x080082a7
 8008528:	08008f8a 	.word	0x08008f8a

0800852c <_printf_common>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	4616      	mov	r6, r2
 8008532:	4699      	mov	r9, r3
 8008534:	688a      	ldr	r2, [r1, #8]
 8008536:	690b      	ldr	r3, [r1, #16]
 8008538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800853c:	4293      	cmp	r3, r2
 800853e:	bfb8      	it	lt
 8008540:	4613      	movlt	r3, r2
 8008542:	6033      	str	r3, [r6, #0]
 8008544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008548:	4607      	mov	r7, r0
 800854a:	460c      	mov	r4, r1
 800854c:	b10a      	cbz	r2, 8008552 <_printf_common+0x26>
 800854e:	3301      	adds	r3, #1
 8008550:	6033      	str	r3, [r6, #0]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	0699      	lsls	r1, r3, #26
 8008556:	bf42      	ittt	mi
 8008558:	6833      	ldrmi	r3, [r6, #0]
 800855a:	3302      	addmi	r3, #2
 800855c:	6033      	strmi	r3, [r6, #0]
 800855e:	6825      	ldr	r5, [r4, #0]
 8008560:	f015 0506 	ands.w	r5, r5, #6
 8008564:	d106      	bne.n	8008574 <_printf_common+0x48>
 8008566:	f104 0a19 	add.w	sl, r4, #25
 800856a:	68e3      	ldr	r3, [r4, #12]
 800856c:	6832      	ldr	r2, [r6, #0]
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	42ab      	cmp	r3, r5
 8008572:	dc26      	bgt.n	80085c2 <_printf_common+0x96>
 8008574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008578:	1e13      	subs	r3, r2, #0
 800857a:	6822      	ldr	r2, [r4, #0]
 800857c:	bf18      	it	ne
 800857e:	2301      	movne	r3, #1
 8008580:	0692      	lsls	r2, r2, #26
 8008582:	d42b      	bmi.n	80085dc <_printf_common+0xb0>
 8008584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008588:	4649      	mov	r1, r9
 800858a:	4638      	mov	r0, r7
 800858c:	47c0      	blx	r8
 800858e:	3001      	adds	r0, #1
 8008590:	d01e      	beq.n	80085d0 <_printf_common+0xa4>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	68e5      	ldr	r5, [r4, #12]
 8008596:	6832      	ldr	r2, [r6, #0]
 8008598:	f003 0306 	and.w	r3, r3, #6
 800859c:	2b04      	cmp	r3, #4
 800859e:	bf08      	it	eq
 80085a0:	1aad      	subeq	r5, r5, r2
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	bf0c      	ite	eq
 80085a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085ac:	2500      	movne	r5, #0
 80085ae:	4293      	cmp	r3, r2
 80085b0:	bfc4      	itt	gt
 80085b2:	1a9b      	subgt	r3, r3, r2
 80085b4:	18ed      	addgt	r5, r5, r3
 80085b6:	2600      	movs	r6, #0
 80085b8:	341a      	adds	r4, #26
 80085ba:	42b5      	cmp	r5, r6
 80085bc:	d11a      	bne.n	80085f4 <_printf_common+0xc8>
 80085be:	2000      	movs	r0, #0
 80085c0:	e008      	b.n	80085d4 <_printf_common+0xa8>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4652      	mov	r2, sl
 80085c6:	4649      	mov	r1, r9
 80085c8:	4638      	mov	r0, r7
 80085ca:	47c0      	blx	r8
 80085cc:	3001      	adds	r0, #1
 80085ce:	d103      	bne.n	80085d8 <_printf_common+0xac>
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d8:	3501      	adds	r5, #1
 80085da:	e7c6      	b.n	800856a <_printf_common+0x3e>
 80085dc:	18e1      	adds	r1, r4, r3
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	2030      	movs	r0, #48	; 0x30
 80085e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085e6:	4422      	add	r2, r4
 80085e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085f0:	3302      	adds	r3, #2
 80085f2:	e7c7      	b.n	8008584 <_printf_common+0x58>
 80085f4:	2301      	movs	r3, #1
 80085f6:	4622      	mov	r2, r4
 80085f8:	4649      	mov	r1, r9
 80085fa:	4638      	mov	r0, r7
 80085fc:	47c0      	blx	r8
 80085fe:	3001      	adds	r0, #1
 8008600:	d0e6      	beq.n	80085d0 <_printf_common+0xa4>
 8008602:	3601      	adds	r6, #1
 8008604:	e7d9      	b.n	80085ba <_printf_common+0x8e>
	...

08008608 <_printf_i>:
 8008608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800860c:	460c      	mov	r4, r1
 800860e:	4691      	mov	r9, r2
 8008610:	7e27      	ldrb	r7, [r4, #24]
 8008612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008614:	2f78      	cmp	r7, #120	; 0x78
 8008616:	4680      	mov	r8, r0
 8008618:	469a      	mov	sl, r3
 800861a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800861e:	d807      	bhi.n	8008630 <_printf_i+0x28>
 8008620:	2f62      	cmp	r7, #98	; 0x62
 8008622:	d80a      	bhi.n	800863a <_printf_i+0x32>
 8008624:	2f00      	cmp	r7, #0
 8008626:	f000 80d8 	beq.w	80087da <_printf_i+0x1d2>
 800862a:	2f58      	cmp	r7, #88	; 0x58
 800862c:	f000 80a3 	beq.w	8008776 <_printf_i+0x16e>
 8008630:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008638:	e03a      	b.n	80086b0 <_printf_i+0xa8>
 800863a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800863e:	2b15      	cmp	r3, #21
 8008640:	d8f6      	bhi.n	8008630 <_printf_i+0x28>
 8008642:	a001      	add	r0, pc, #4	; (adr r0, 8008648 <_printf_i+0x40>)
 8008644:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008648:	080086a1 	.word	0x080086a1
 800864c:	080086b5 	.word	0x080086b5
 8008650:	08008631 	.word	0x08008631
 8008654:	08008631 	.word	0x08008631
 8008658:	08008631 	.word	0x08008631
 800865c:	08008631 	.word	0x08008631
 8008660:	080086b5 	.word	0x080086b5
 8008664:	08008631 	.word	0x08008631
 8008668:	08008631 	.word	0x08008631
 800866c:	08008631 	.word	0x08008631
 8008670:	08008631 	.word	0x08008631
 8008674:	080087c1 	.word	0x080087c1
 8008678:	080086e5 	.word	0x080086e5
 800867c:	080087a3 	.word	0x080087a3
 8008680:	08008631 	.word	0x08008631
 8008684:	08008631 	.word	0x08008631
 8008688:	080087e3 	.word	0x080087e3
 800868c:	08008631 	.word	0x08008631
 8008690:	080086e5 	.word	0x080086e5
 8008694:	08008631 	.word	0x08008631
 8008698:	08008631 	.word	0x08008631
 800869c:	080087ab 	.word	0x080087ab
 80086a0:	680b      	ldr	r3, [r1, #0]
 80086a2:	1d1a      	adds	r2, r3, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	600a      	str	r2, [r1, #0]
 80086a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0a3      	b.n	80087fc <_printf_i+0x1f4>
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	6808      	ldr	r0, [r1, #0]
 80086b8:	062e      	lsls	r6, r5, #24
 80086ba:	f100 0304 	add.w	r3, r0, #4
 80086be:	d50a      	bpl.n	80086d6 <_printf_i+0xce>
 80086c0:	6805      	ldr	r5, [r0, #0]
 80086c2:	600b      	str	r3, [r1, #0]
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	da03      	bge.n	80086d0 <_printf_i+0xc8>
 80086c8:	232d      	movs	r3, #45	; 0x2d
 80086ca:	426d      	negs	r5, r5
 80086cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d0:	485e      	ldr	r0, [pc, #376]	; (800884c <_printf_i+0x244>)
 80086d2:	230a      	movs	r3, #10
 80086d4:	e019      	b.n	800870a <_printf_i+0x102>
 80086d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086da:	6805      	ldr	r5, [r0, #0]
 80086dc:	600b      	str	r3, [r1, #0]
 80086de:	bf18      	it	ne
 80086e0:	b22d      	sxthne	r5, r5
 80086e2:	e7ef      	b.n	80086c4 <_printf_i+0xbc>
 80086e4:	680b      	ldr	r3, [r1, #0]
 80086e6:	6825      	ldr	r5, [r4, #0]
 80086e8:	1d18      	adds	r0, r3, #4
 80086ea:	6008      	str	r0, [r1, #0]
 80086ec:	0628      	lsls	r0, r5, #24
 80086ee:	d501      	bpl.n	80086f4 <_printf_i+0xec>
 80086f0:	681d      	ldr	r5, [r3, #0]
 80086f2:	e002      	b.n	80086fa <_printf_i+0xf2>
 80086f4:	0669      	lsls	r1, r5, #25
 80086f6:	d5fb      	bpl.n	80086f0 <_printf_i+0xe8>
 80086f8:	881d      	ldrh	r5, [r3, #0]
 80086fa:	4854      	ldr	r0, [pc, #336]	; (800884c <_printf_i+0x244>)
 80086fc:	2f6f      	cmp	r7, #111	; 0x6f
 80086fe:	bf0c      	ite	eq
 8008700:	2308      	moveq	r3, #8
 8008702:	230a      	movne	r3, #10
 8008704:	2100      	movs	r1, #0
 8008706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800870a:	6866      	ldr	r6, [r4, #4]
 800870c:	60a6      	str	r6, [r4, #8]
 800870e:	2e00      	cmp	r6, #0
 8008710:	bfa2      	ittt	ge
 8008712:	6821      	ldrge	r1, [r4, #0]
 8008714:	f021 0104 	bicge.w	r1, r1, #4
 8008718:	6021      	strge	r1, [r4, #0]
 800871a:	b90d      	cbnz	r5, 8008720 <_printf_i+0x118>
 800871c:	2e00      	cmp	r6, #0
 800871e:	d04d      	beq.n	80087bc <_printf_i+0x1b4>
 8008720:	4616      	mov	r6, r2
 8008722:	fbb5 f1f3 	udiv	r1, r5, r3
 8008726:	fb03 5711 	mls	r7, r3, r1, r5
 800872a:	5dc7      	ldrb	r7, [r0, r7]
 800872c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008730:	462f      	mov	r7, r5
 8008732:	42bb      	cmp	r3, r7
 8008734:	460d      	mov	r5, r1
 8008736:	d9f4      	bls.n	8008722 <_printf_i+0x11a>
 8008738:	2b08      	cmp	r3, #8
 800873a:	d10b      	bne.n	8008754 <_printf_i+0x14c>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	07df      	lsls	r7, r3, #31
 8008740:	d508      	bpl.n	8008754 <_printf_i+0x14c>
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	6861      	ldr	r1, [r4, #4]
 8008746:	4299      	cmp	r1, r3
 8008748:	bfde      	ittt	le
 800874a:	2330      	movle	r3, #48	; 0x30
 800874c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008750:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008754:	1b92      	subs	r2, r2, r6
 8008756:	6122      	str	r2, [r4, #16]
 8008758:	f8cd a000 	str.w	sl, [sp]
 800875c:	464b      	mov	r3, r9
 800875e:	aa03      	add	r2, sp, #12
 8008760:	4621      	mov	r1, r4
 8008762:	4640      	mov	r0, r8
 8008764:	f7ff fee2 	bl	800852c <_printf_common>
 8008768:	3001      	adds	r0, #1
 800876a:	d14c      	bne.n	8008806 <_printf_i+0x1fe>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008770:	b004      	add	sp, #16
 8008772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008776:	4835      	ldr	r0, [pc, #212]	; (800884c <_printf_i+0x244>)
 8008778:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	680e      	ldr	r6, [r1, #0]
 8008780:	061f      	lsls	r7, r3, #24
 8008782:	f856 5b04 	ldr.w	r5, [r6], #4
 8008786:	600e      	str	r6, [r1, #0]
 8008788:	d514      	bpl.n	80087b4 <_printf_i+0x1ac>
 800878a:	07d9      	lsls	r1, r3, #31
 800878c:	bf44      	itt	mi
 800878e:	f043 0320 	orrmi.w	r3, r3, #32
 8008792:	6023      	strmi	r3, [r4, #0]
 8008794:	b91d      	cbnz	r5, 800879e <_printf_i+0x196>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f023 0320 	bic.w	r3, r3, #32
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	2310      	movs	r3, #16
 80087a0:	e7b0      	b.n	8008704 <_printf_i+0xfc>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	f043 0320 	orr.w	r3, r3, #32
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	2378      	movs	r3, #120	; 0x78
 80087ac:	4828      	ldr	r0, [pc, #160]	; (8008850 <_printf_i+0x248>)
 80087ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087b2:	e7e3      	b.n	800877c <_printf_i+0x174>
 80087b4:	065e      	lsls	r6, r3, #25
 80087b6:	bf48      	it	mi
 80087b8:	b2ad      	uxthmi	r5, r5
 80087ba:	e7e6      	b.n	800878a <_printf_i+0x182>
 80087bc:	4616      	mov	r6, r2
 80087be:	e7bb      	b.n	8008738 <_printf_i+0x130>
 80087c0:	680b      	ldr	r3, [r1, #0]
 80087c2:	6826      	ldr	r6, [r4, #0]
 80087c4:	6960      	ldr	r0, [r4, #20]
 80087c6:	1d1d      	adds	r5, r3, #4
 80087c8:	600d      	str	r5, [r1, #0]
 80087ca:	0635      	lsls	r5, r6, #24
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	d501      	bpl.n	80087d4 <_printf_i+0x1cc>
 80087d0:	6018      	str	r0, [r3, #0]
 80087d2:	e002      	b.n	80087da <_printf_i+0x1d2>
 80087d4:	0671      	lsls	r1, r6, #25
 80087d6:	d5fb      	bpl.n	80087d0 <_printf_i+0x1c8>
 80087d8:	8018      	strh	r0, [r3, #0]
 80087da:	2300      	movs	r3, #0
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	4616      	mov	r6, r2
 80087e0:	e7ba      	b.n	8008758 <_printf_i+0x150>
 80087e2:	680b      	ldr	r3, [r1, #0]
 80087e4:	1d1a      	adds	r2, r3, #4
 80087e6:	600a      	str	r2, [r1, #0]
 80087e8:	681e      	ldr	r6, [r3, #0]
 80087ea:	6862      	ldr	r2, [r4, #4]
 80087ec:	2100      	movs	r1, #0
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7f7 fcee 	bl	80001d0 <memchr>
 80087f4:	b108      	cbz	r0, 80087fa <_printf_i+0x1f2>
 80087f6:	1b80      	subs	r0, r0, r6
 80087f8:	6060      	str	r0, [r4, #4]
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	2300      	movs	r3, #0
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	e7a8      	b.n	8008758 <_printf_i+0x150>
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	4632      	mov	r2, r6
 800880a:	4649      	mov	r1, r9
 800880c:	4640      	mov	r0, r8
 800880e:	47d0      	blx	sl
 8008810:	3001      	adds	r0, #1
 8008812:	d0ab      	beq.n	800876c <_printf_i+0x164>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	079b      	lsls	r3, r3, #30
 8008818:	d413      	bmi.n	8008842 <_printf_i+0x23a>
 800881a:	68e0      	ldr	r0, [r4, #12]
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	4298      	cmp	r0, r3
 8008820:	bfb8      	it	lt
 8008822:	4618      	movlt	r0, r3
 8008824:	e7a4      	b.n	8008770 <_printf_i+0x168>
 8008826:	2301      	movs	r3, #1
 8008828:	4632      	mov	r2, r6
 800882a:	4649      	mov	r1, r9
 800882c:	4640      	mov	r0, r8
 800882e:	47d0      	blx	sl
 8008830:	3001      	adds	r0, #1
 8008832:	d09b      	beq.n	800876c <_printf_i+0x164>
 8008834:	3501      	adds	r5, #1
 8008836:	68e3      	ldr	r3, [r4, #12]
 8008838:	9903      	ldr	r1, [sp, #12]
 800883a:	1a5b      	subs	r3, r3, r1
 800883c:	42ab      	cmp	r3, r5
 800883e:	dcf2      	bgt.n	8008826 <_printf_i+0x21e>
 8008840:	e7eb      	b.n	800881a <_printf_i+0x212>
 8008842:	2500      	movs	r5, #0
 8008844:	f104 0619 	add.w	r6, r4, #25
 8008848:	e7f5      	b.n	8008836 <_printf_i+0x22e>
 800884a:	bf00      	nop
 800884c:	08008f95 	.word	0x08008f95
 8008850:	08008fa6 	.word	0x08008fa6

08008854 <__sread>:
 8008854:	b510      	push	{r4, lr}
 8008856:	460c      	mov	r4, r1
 8008858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885c:	f000 f894 	bl	8008988 <_read_r>
 8008860:	2800      	cmp	r0, #0
 8008862:	bfab      	itete	ge
 8008864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008866:	89a3      	ldrhlt	r3, [r4, #12]
 8008868:	181b      	addge	r3, r3, r0
 800886a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800886e:	bfac      	ite	ge
 8008870:	6563      	strge	r3, [r4, #84]	; 0x54
 8008872:	81a3      	strhlt	r3, [r4, #12]
 8008874:	bd10      	pop	{r4, pc}

08008876 <__swrite>:
 8008876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887a:	461f      	mov	r7, r3
 800887c:	898b      	ldrh	r3, [r1, #12]
 800887e:	05db      	lsls	r3, r3, #23
 8008880:	4605      	mov	r5, r0
 8008882:	460c      	mov	r4, r1
 8008884:	4616      	mov	r6, r2
 8008886:	d505      	bpl.n	8008894 <__swrite+0x1e>
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	2302      	movs	r3, #2
 800888e:	2200      	movs	r2, #0
 8008890:	f000 f868 	bl	8008964 <_lseek_r>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	f000 b817 	b.w	80088dc <_write_r>

080088ae <__sseek>:
 80088ae:	b510      	push	{r4, lr}
 80088b0:	460c      	mov	r4, r1
 80088b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b6:	f000 f855 	bl	8008964 <_lseek_r>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	bf15      	itete	ne
 80088c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ca:	81a3      	strheq	r3, [r4, #12]
 80088cc:	bf18      	it	ne
 80088ce:	81a3      	strhne	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__sclose>:
 80088d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d6:	f000 b813 	b.w	8008900 <_close_r>
	...

080088dc <_write_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d07      	ldr	r5, [pc, #28]	; (80088fc <_write_r+0x20>)
 80088e0:	4604      	mov	r4, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	602a      	str	r2, [r5, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7f8 f976 	bl	8000bdc <_write>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_write_r+0x1e>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_write_r+0x1e>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000cf8 	.word	0x20000cf8

08008900 <_close_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d06      	ldr	r5, [pc, #24]	; (800891c <_close_r+0x1c>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	f000 f84e 	bl	80089ac <_close>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_close_r+0x1a>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_close_r+0x1a>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20000cf8 	.word	0x20000cf8

08008920 <_fstat_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d07      	ldr	r5, [pc, #28]	; (8008940 <_fstat_r+0x20>)
 8008924:	2300      	movs	r3, #0
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	4611      	mov	r1, r2
 800892c:	602b      	str	r3, [r5, #0]
 800892e:	f000 f845 	bl	80089bc <_fstat>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d102      	bne.n	800893c <_fstat_r+0x1c>
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	b103      	cbz	r3, 800893c <_fstat_r+0x1c>
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	bf00      	nop
 8008940:	20000cf8 	.word	0x20000cf8

08008944 <_isatty_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	; (8008960 <_isatty_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f000 f83c 	bl	80089cc <_isatty>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_isatty_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_isatty_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	20000cf8 	.word	0x20000cf8

08008964 <_lseek_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d07      	ldr	r5, [pc, #28]	; (8008984 <_lseek_r+0x20>)
 8008968:	4604      	mov	r4, r0
 800896a:	4608      	mov	r0, r1
 800896c:	4611      	mov	r1, r2
 800896e:	2200      	movs	r2, #0
 8008970:	602a      	str	r2, [r5, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	f000 f832 	bl	80089dc <_lseek>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_lseek_r+0x1e>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_lseek_r+0x1e>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000cf8 	.word	0x20000cf8

08008988 <_read_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	; (80089a8 <_read_r+0x20>)
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f000 f828 	bl	80089ec <_read>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_read_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_read_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000cf8 	.word	0x20000cf8

080089ac <_close>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <_close+0xc>)
 80089ae:	2258      	movs	r2, #88	; 0x58
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b6:	4770      	bx	lr
 80089b8:	20000cf8 	.word	0x20000cf8

080089bc <_fstat>:
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <_fstat+0xc>)
 80089be:	2258      	movs	r2, #88	; 0x58
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c6:	4770      	bx	lr
 80089c8:	20000cf8 	.word	0x20000cf8

080089cc <_isatty>:
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <_isatty+0xc>)
 80089ce:	2258      	movs	r2, #88	; 0x58
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	2000      	movs	r0, #0
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000cf8 	.word	0x20000cf8

080089dc <_lseek>:
 80089dc:	4b02      	ldr	r3, [pc, #8]	; (80089e8 <_lseek+0xc>)
 80089de:	2258      	movs	r2, #88	; 0x58
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089e6:	4770      	bx	lr
 80089e8:	20000cf8 	.word	0x20000cf8

080089ec <_read>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <_read+0xc>)
 80089ee:	2258      	movs	r2, #88	; 0x58
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f6:	4770      	bx	lr
 80089f8:	20000cf8 	.word	0x20000cf8

080089fc <_init>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr

08008a08 <_fini>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	bf00      	nop
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr
